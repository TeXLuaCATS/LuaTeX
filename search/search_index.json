{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"index","text":""},{"location":"#globals","title":"Globals","text":"<ul> <li>callback</li> <li>fio</li> <li>font</li> <li>fontloader</li> <li>gzip</li> <li>img</li> <li>kpse</li> <li>lang</li> <li>lpeg</li> <li>lua</li> <li>luaharfbuzz</li> <li>mbox</li> <li>md5</li> <li>mime</li> <li>mplib</li> <li>node</li> <li>os</li> <li>pdf</li> <li>pdfe</li> <li>pdfscanner</li> <li>sha2</li> <li>sio</li> <li>status</li> <li>string</li> <li>tex</li> <li>texconfig</li> <li>texio</li> <li>token</li> <li>unicode</li> <li>vf</li> <li>zip</li> <li>zlib</li> </ul>"},{"location":"#types","title":"Types","text":"<ul> <li>alias AccentNodeSubtype</li> <li>alias AdjustNodeSubtype</li> <li>alias AppendToVlistFilterCallback</li> <li>alias AppendToVlistFilterLocationcode</li> <li>alias AttributeMode</li> <li>alias AttributeName</li> <li>alias BoundaryNodeSubtype</li> <li>alias BuildPageInsertCallback</li> <li>alias BuildpageFilterCallback</li> <li>alias BuildpageFilterExtrainfo</li> <li>alias CallEditCallback</li> <li>alias CallbackName</li> <li>alias Capture</li> <li>alias ContributeFilterCallback</li> <li>alias ContributeFilterExtrainfo</li> <li>alias Datagram</li> <li>alias DefineFontCallback</li> <li>alias DelCode</li> <li>alias DirectionParameter</li> <li>alias DirectionSpecifier</li> <li>alias DirectionSpecifierId</li> <li>alias DiscNodeSubtype</li> <li>alias FenceNodeSubtype</li> <li>alias FindDataFileCallback</li> <li>alias FindEncFileCallback</li> <li>alias FindFontFileCallback</li> <li>alias FindFormatFileCallback</li> <li>alias FindImageFileCallback</li> <li>alias FindMapFileCallback</li> <li>alias FindOpentypeFileCallback</li> <li>alias FindOutputFileCallback</li> <li>alias FindPkFileCallback</li> <li>alias FindReadFileCallback</li> <li>alias FindTruetypeFileCallback</li> <li>alias FindType1FileCallback</li> <li>alias FindVfFileCallback</li> <li>alias FindWriteFileCallback</li> <li>alias FinishPdffileCallback</li> <li>alias FinishPdfpageCallback</li> <li>alias FinishSynctexCallback</li> <li>alias FontCharacterCommands</li> <li>alias FontDirection</li> <li>alias FontEmbedding</li> <li>alias FontFormat</li> <li>alias FontParameterKey</li> <li>alias FontParameters</li> <li>alias FontType</li> <li>alias FontloaderFontField</li> <li>alias FontloaderGlyphField</li> <li>alias FontloaderMarkClasses</li> <li>alias FontloaderPrivate</li> <li>alias GlueNodeSubtype</li> <li>alias GlueOrder</li> <li>alias GlueParameter</li> <li>alias GlueSet</li> <li>alias GlueSign</li> <li>alias GlyphInfoCallback</li> <li>alias GlyphNodeSubtype</li> <li>alias GlyphNotFoundCallback</li> <li>alias HlistNodeSubtype</li> <li>alias HpackFilterCallback</li> <li>alias HpackQualityCallback</li> <li>alias HyphenateCallback</li> <li>alias ImgBox</li> <li>alias ImgType</li> <li>alias InsertLocalParCallback</li> <li>alias InternalParameter</li> <li>alias KernNodeSubtype</li> <li>alias KerningCallback</li> <li>alias KpseFtype</li> <li>alias LigaturingCallback</li> <li>alias LinebreakFilterCallback</li> <li>alias MPTransform</li> <li>alias MarginKernNodeSubtype</li> <li>alias MathCode</li> <li>alias MathNodeSubtype</li> <li>alias MathParamName</li> <li>alias MathStyleName</li> <li>alias MlistToHlistCallback</li> <li>alias MpColor</li> <li>alias MpFileFileMode</li> <li>alias MpFindFileFunc</li> <li>alias MpFindFileType</li> <li>alias MpMakeTextFunc</li> <li>alias MpPathPen</li> <li>alias MpResultStatus</li> <li>alias MpRunScriptFunc</li> <li>alias MpScriptErrorFunc</li> <li>alias MuglueParameter</li> <li>alias NoadNodeSubtype</li> <li>alias NodeCallbackReturn</li> <li>alias NodeTypeId</li> <li>alias NodeTypeName</li> <li>alias OpenReadFileCallback</li> <li>alias Operatorable</li> <li>alias PageOrderIndexCallback</li> <li>alias PdfActionTypes</li> <li>alias PdfLiteralModes</li> <li>alias PdfWindowTypes</li> <li>alias PenaltyNodeSubtype</li> <li>alias PostLinebreakFilterCallback</li> <li>alias PreDumpCallback</li> <li>alias PreLinebreakFilterCallback</li> <li>alias PreLinebreakFilterGroupCode</li> <li>alias PreOutputFilterCallback</li> <li>alias PrintableInput</li> <li>alias ProcessInputBufferCallback</li> <li>alias ProcessJobnameCallback</li> <li>alias ProcessOutputBufferCallback</li> <li>alias ProcessPdfImageContentCallback</li> <li>alias ProcessRuleCallback</li> <li>alias RadicalNodeSubtype</li> <li>alias ReadDataFileCallback</li> <li>alias ReadEncFileCallback</li> <li>alias ReadFileCallback</li> <li>alias ReadFontFileCallback</li> <li>alias ReadMapFileCallback</li> <li>alias ReadOnlyDimensionParameter</li> <li>alias ReadOnlyIntegerParameter</li> <li>alias ReadOpentypeFileCallback</li> <li>alias ReadPkFileCallback</li> <li>alias ReadTruetypeFileCallback</li> <li>alias ReadType1FileCallback</li> <li>alias ReadVfFileCallback</li> <li>alias ReadWriteDimensionParameter</li> <li>alias ReadWriteIntegerParameter</li> <li>alias ReceivePatternMode</li> <li>alias RuleNodeSubtype</li> <li>alias ShowErrorHookCallback</li> <li>alias ShowErrorMessageCallback</li> <li>alias ShowLuaErrorHookCallback</li> <li>alias SocketError</li> <li>alias SocketFamily</li> <li>alias SocketReturnError</li> <li>alias SocketReturnResult</li> <li>alias StartFileCallback</li> <li>alias StartFileCallbackCategory</li> <li>alias StartPageNumberCallback</li> <li>alias StartRunCallback</li> <li>alias StopFileCallback</li> <li>alias StopPageNumberCallback</li> <li>alias StopRunCallback</li> <li>alias SyntexMode</li> <li>alias TCPOption</li> <li>alias TCPShutdownMode</li> <li>alias TCPTimeoutMode</li> <li>alias TexEngine</li> <li>alias TokenCommandName</li> <li>alias TokenlistParameter</li> <li>alias UDPOption</li> <li>alias VlistNodeSubtype</li> <li>alias VpackFilterCallback</li> <li>alias VpackQualityCallback</li> <li>alias WhatsitTypeId</li> <li>alias WhatsitTypeName</li> <li>alias WrapupRunCallback</li> <li>alias WriteTarget</li> <li>class AccentNode</li> <li>class AdjustNode</li> <li>class AlignRecordNode</li> <li>class AlignStackNode</li> <li>class AttributeListNode</li> <li>class AttributeNode</li> <li>class Attributes</li> <li>class Blob</li> <li>class BoundaryNode</li> <li>class ChoiceNode</li> <li>class CloseWhatsitNode</li> <li>class DelimNode</li> <li>class DeltaNode</li> <li>class DirNode</li> <li>class DiscNode</li> <li>class ExprStackNode</li> <li>class FenceNode</li> <li>class Font</li> <li>class FontCharacter</li> <li>class FontCharacterComponent</li> <li>class FontCharacterExtensible</li> <li>class FontCharacterLigature</li> <li>class FontExtens</li> <li>class FontInfo</li> <li>class FontloaderAltuni</li> <li>class FontloaderAnchorClasses</li> <li>class FontloaderAxismaps</li> <li>class FontloaderCidinfo</li> <li>class FontloaderEnc</li> <li>class FontloaderFont</li> <li>class FontloaderGlyph</li> <li>class FontloaderGlyphKern</li> <li>class FontloaderGpos</li> <li>class FontloaderGposFeatures</li> <li>class FontloaderGposFeaturesScripts</li> <li>class FontloaderGposFlags</li> <li>class FontloaderGposSub</li> <li>class FontloaderGposSubtables</li> <li>class FontloaderGposSubtablesKernclass</li> <li>class FontloaderGsub</li> <li>class FontloaderHorizVertBase</li> <li>class FontloaderLang</li> <li>class FontloaderLangName</li> <li>class FontloaderLockup</li> <li>class FontloaderLockupClass</li> <li>class FontloaderLockupGlyph</li> <li>class FontloaderLockupReverseCoverage</li> <li>class FontloaderLockupRule</li> <li>class FontloaderLockupsCoverage</li> <li>class FontloaderMap</li> <li>class FontloaderMath</li> <li>class FontloaderMathkern</li> <li>class FontloaderMathkernSubtable</li> <li>class FontloaderMm</li> <li>class FontloaderPanose</li> <li>class FontloaderParts</li> <li>class FontloaderPfminfo</li> <li>class FontloaderRemap</li> <li>class FontloaderScripts</li> <li>class FontloaderTexdata</li> <li>class FontloaderTrueTypeNames</li> <li>class FontloaderTtfTables</li> <li>class FontloaderValidationState</li> <li>class FontloaderVertHorizVariants</li> <li>class FractionNode</li> <li>class GFile</li> <li>class GlueNode</li> <li>class GlueSpecNode</li> <li>class GlyphExtens</li> <li>class GlyphNode</li> <li>class HbBuffer</li> <li>class HbColor</li> <li>class HbDirection</li> <li>class HbFace</li> <li>class HbFeature</li> <li>class HbFont</li> <li>class HbGlyph</li> <li>class HbGlyphColor</li> <li>class HbLanguage</li> <li>class HbScript</li> <li>class HbTag</li> <li>class HbVariation</li> <li>class HlistNode</li> <li>class HyphenatedNode</li> <li>class IfStackNode</li> <li>class Image</li> <li>class ImageSpec</li> <li>class InsNode</li> <li>class KernNode</li> <li>class KpseLookupOptions</li> <li>class Language</li> <li>class LateLuaWhatsitNode</li> <li>class LinebreakParameters</li> <li>class ListNode</li> <li>class LocalParNode</li> <li>class Locale</li> <li>class LuaFileSystem</li> <li>class LuaHarfBuzzOptions</li> <li>class MarginKernNode</li> <li>class MarkNode</li> <li>class MathCharNode</li> <li>class MathNode</li> <li>class MathTextCharNode</li> <li>class Message</li> <li>class MovementStackNode</li> <li>class MpArguments</li> <li>class MpDash</li> <li>class MpFig</li> <li>class MpFill</li> <li>class MpGraphicObject</li> <li>class MpInstance</li> <li>class MpKnot</li> <li>class MpOutline</li> <li>class MpResult</li> <li>class MpSpecial</li> <li>class MpStartBoundsClip</li> <li>class MpStats</li> <li>class MpText</li> <li>class Nest</li> <li>class NestedListNode</li> <li>class NoadNode</li> <li>class Node</li> <li>class OpenReadFileEnv</li> <li>class OpenWhatsitNode</li> <li>class PageInsertNode</li> <li>class PassiveNode</li> <li>class Pattern</li> <li>class PdfActionWhatsitNode</li> <li>class PdfAnnotWhatsitNode</li> <li>class PdfColorstackWhatsitNode</li> <li>class PdfDestWhatsitNode</li> <li>class PdfEndLinkWhatsitNode</li> <li>class PdfEndThreadWhatsitNode</li> <li>class PdfLinkDataWhatsitNode</li> <li>class PdfLinkStateWhatsitNode</li> <li>class PdfLiteralWhatsitNode</li> <li>class PdfRefobjWhatsitNode</li> <li>class PdfRestoreWhatsitNode</li> <li>class PdfSaveWhatsitNode</li> <li>class PdfSetmatrixWhatsitNode</li> <li>class PdfStartLinkWhatsitNode</li> <li>class PdfStartThreadWhatsitNode</li> <li>class PdfThreadDataWhatsitNode</li> <li>class PdfThreadWhatsitNode</li> <li>class PdfeArray</li> <li>class PdfeDictionary</li> <li>class PdfeDocument</li> <li>class PdfeReference</li> <li>class PdfeStream</li> <li>class PenInfo</li> <li>class PenaltyNode</li> <li>class PseudoFileNode</li> <li>class PseudoLineNode</li> <li>class RadicalNode</li> <li>class RuleNode</li> <li>class SavePosWhatsitNode</li> <li>class Scanner</li> <li>class ShapeNode</li> <li>class Socket</li> <li>class SpanNode</li> <li>class SpecialWhatsitNode</li> <li>class SplitInsertNode</li> <li>class StatusInfo</li> <li>class StyleNode</li> <li>class SubBoxNode</li> <li>class SubMlistNode</li> <li>class TCPSocketClient</li> <li>class TCPSocketMaster</li> <li>class TCPSocketServer</li> <li>class TempNode</li> <li>class TfmFont</li> <li>class Times</li> <li>class Token</li> <li>class UDPSocketConnected</li> <li>class UDPSocketGeneric</li> <li>class UDPSocketUnconnected</li> <li>class Uname</li> <li>class UnhyphenatedNode</li> <li>class UnsetNode</li> <li>class UserDefinedWhatsitNode</li> <li>class VfFont</li> <li>class VlistNode</li> <li>class WhatsitNode</li> <li>class WriteWhatsitNode</li> <li>class ZFile</li> <li>class ZInternalFile</li> <li>class ZInternalFileInfo</li> <li>class ZStream</li> <li>class ot</li> <li>class unicode</li> </ul>"},{"location":"assets/fonts/","title":"Index","text":"<p>https://transfonter.org/files/a60a3dbeb9a5cb4664b949f04050f20f/result/transfonter.org-20250810-132116.zip</p>"},{"location":"globals/callback/","title":"global callback","text":"<p>This library has functions that register, find and list callbacks. Callbacks are Lua functions that are called in well defined places. There are two kind of callbacks: those that mix with existing functionality, and those that (when enabled) replace functionality. In mosty cases the second category is expected to behave similar to the built in functionality because in a next step specific data is expected. For instance, you can replace the hyphenation routine. The function gets a list that can be hyphenated (or not). The final list should be valid and is (normally) used for constructing a paragraph. Another function can replace the ligature builder and/or kerner. Doing something else is possible but in the end might not give the user the expected outcome.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-callbacks.tex#L17-L26</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/callback/#methods","title":"methods","text":""},{"location":"globals/callback/#callbackregister","title":"callback.register","text":"<pre><code>function callback.register(\n  callback_name: CallbackName,\n  func: (function|false)?\n)\n -&gt; id integer?\n -&gt; error string\n</code></pre> <p>@return <code>id</code> - The function returns the internal <code>id</code> of the callback or <code>nil</code>, if the callback could not be registered.</p> <p>@return <code>error</code> - In the latter case, <code>error</code> contains an error message, otherwise it is <code>nil</code>. The function returns <code>No such callback exists.</code> if a wrong callback name was specified.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Register a callback. Passing <code>nil</code> removes an existing callback. Returns <code>nil</code>, <code>error</code> on failure.</p> <p>The first thing you need to do is registering a callback:</p> <p>Here the <code>callback_name</code> is a predefined callback name, see below.</p> <p>LuaTeX internalizes the callback function in such a way that it does not matter if you redefine a function accidentally.</p> <p>Callback assignments are always global. You can use the special value <code>nil</code> instead of a function for clearing the callback.</p> <p>For some minor speed gain, you can assign the boolean <code>false</code> to the non-file related callbacks, doing so will prevent LuaTeX from executing whatever it would execute by default (when no callback function is registered at all). Be warned: this may cause all sorts of grief unless you know <code>exactly</code> what you are doing!</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-callbacks.tex#L28-L54</li> <li>Corresponding C source code: lcallbacklib.c#L517-L557</li> </ul>"},{"location":"globals/callback/#callbacklist","title":"callback.list","text":"<pre><code>function callback.list() -&gt; info table&lt;string,boolean&gt;\n</code></pre> <p>Produce a list of all known callback names.</p> <p>The keys in the table are the known callback names, the value is a boolean where <code>true</code> means that the callback is currently set (active).</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-callbacks.tex#L56-L62</li> <li>Corresponding C source code: lcallbacklib.c#L584-L599</li> </ul>"},{"location":"globals/callback/#callbackfind","title":"callback.find","text":"<pre><code>function callback.find(callback_name: CallbackName) -&gt; f (function)?\n</code></pre> <p>If the callback is not set, <code>find</code> returns <code>nil</code>.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-callbacks.tex#L64-L68</li> <li>Corresponding C source code: lcallbacklib.c#L559-L582</li> </ul>"},{"location":"globals/fio/","title":"global fio","text":"<p>Binary input from files with <code>fio</code> (file input-output)</p> <p>This library provides a set of functions for reading numbers from a file and in addition to the regular <code>io</code> library functions.</p> <p>There are eight additional little endian variants for the <code>cardinal[1-4]</code> and <code>integer[1-4]</code> readers: <code>cardinal[1-4]le</code> and <code>integer[1-4]le</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c</li> <li>Source file of the <code>LuaTeX</code> manual: luatex-lua.tex#L655-697</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/fio/#methods","title":"methods","text":""},{"location":"globals/fio/#fioreadcardinal1","title":"fio.readcardinal1","text":"<p><pre><code>function fio.readcardinal1(file: file*) -&gt;  integer\n</code></pre> @param <code>file</code> - A file handle.</p> <p>@return  - A 1 byte unsigned integer.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a 1 byte unsigned integer (8-bit) from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  -- t: decimal=116 hexadecimal=74 binary=01110100\n  assert.equals(fio.readcardinal1(f), 116)\n  -- e: decimal=101 hexadecimal=65 binary=01100101\n  assert.equals(fio.readcardinal1(f), 101)\n  -- s: decimal=115 hexadecimal=73 binary=01110011\n  assert.equals(fio.readcardinal1(f), 115)\n  -- t: decimal=116 hexadecimal=74 binary=01110100\n  assert.equals(fio.readcardinal1(f), 116)\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L114-L122</li> </ul>"},{"location":"globals/fio/#fioreadcardinal2","title":"fio.readcardinal2","text":"<p><pre><code>function fio.readcardinal2(file: file*) -&gt;  integer\n</code></pre> @param <code>file</code> - A file handle.</p> <p>@return  - A 2 byte unsigned integer</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a 2 byte unsigned integer (16-bit) from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  -- t.e: decimal=29797 hexadecimal=74.65 binary=01110100.01100101\n  assert.equals(fio.readcardinal2(f), 29797)\n  -- s.t: decimal=29556 hexadecimal=73.74 binary=01110011.01110100\n  assert.equals(fio.readcardinal2(f), 29556)\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L137-L147</li> </ul>"},{"location":"globals/fio/#fioreadcardinal3","title":"fio.readcardinal3","text":"<p><pre><code>function fio.readcardinal3(file: file*) -&gt;  integer\n</code></pre> @param <code>file</code> - A file handle.</p> <p>@return  - A 3 byte unsigned integer</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a 3 byte unsigned integer (24-bit) from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"luatex\")\n  fio.setposition(f, 0)\n  -- l.u.a: decimal=7107937 hexadecimal=6C.75.61 binary=01101100.01110101.01100001\n  assert.equals(fio.readcardinal3(f), 7107937)\n  -- t.e.x: decimal=7628152 hexadecimal=74.65.78 binary=01110100.01100101.01111000\n  assert.equals(fio.readcardinal3(f), 7628152)\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L187-L198</li> </ul>"},{"location":"globals/fio/#fioreadcardinal4","title":"fio.readcardinal4","text":"<p><pre><code>function fio.readcardinal4(file: file*) -&gt;  integer\n</code></pre> @param <code>file</code> - A file handle.</p> <p>@return  - A 4 byte unsigned integer.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a 4 byte unsigned integer (32-bit) from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  -- t.e.s.t:\n  -- decimal=1952805748\n  -- hexadecimal=74.65.73.74\n  -- binary=01110100.01100101.01110011.01110100\n  assert.equals(fio.readcardinal4(f), 1952805748)\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L241-L253</li> </ul>"},{"location":"globals/fio/#fioreadcardinaltable","title":"fio.readcardinaltable","text":"<p><pre><code>function fio.readcardinaltable(\n  file: file*,\n  number: integer,\n  bytes: (1|2|3|4)\n) -&gt;  table&lt;integer,integer&gt;\n</code></pre> @param <code>file</code> - A file handle.</p> <p>@param <code>number</code> - The number of integers in the resulting table.</p> <p>@param <code>bytes</code> - Specify 1 for 1 byte unsigned integer, 2 for a 2 byte unsigned integers, and so on.</p> <p>Read <code>number</code> unsigned integers of <code>bytes</code> as a table from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  local t = fio.readcardinaltable(f, 4, 1)\n  -- t: decimal=116 hexadecimal=74 binary=01110100\n  assert.equals(t[1], 116)\n  -- e: decimal=101 hexadecimal=65 binary=01100101\n  assert.equals(t[2], 101)\n  -- s: decimal=115 hexadecimal=73 binary=01110011\n  assert.equals(t[3], 115)\n  -- t: decimal=116 hexadecimal=74 binary=01110100\n  assert.equals(t[4], 116)\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L299-363</li> </ul>"},{"location":"globals/fio/#fioreadcardinal1le","title":"fio.readcardinal1le","text":"<p><pre><code>function fio.readcardinal1le(file: file*) -&gt;  integer\n</code></pre> @param <code>file</code> - A file handle.</p> <p>Read a 1 byte unsigned little endian integer (8-bit) from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  assert.equals(fio.readcardinal1le(f), 116)\n  assert.equals(fio.readcardinal1le(f), 101)\n  assert.equals(fio.readcardinal1le(f), 115)\n  assert.equals(fio.readcardinal1le(f), 116)\n  assert.is_nil(fio.readcardinal1le(f))\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L137-L147</li> </ul>"},{"location":"globals/fio/#fioreadcardinal2le","title":"fio.readcardinal2le","text":"<p><pre><code>function fio.readcardinal2le(file: file*) -&gt;  integer\n</code></pre> @param <code>file</code> - A file handle.</p> <p>Read a 2 byte unsigned little endian integer (16-bit) from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  assert.equals(fio.readcardinal2le(f), 25972)\n  assert.equals(fio.readcardinal2le(f), 29811)\n  assert.is_nil(fio.readcardinal2le(f))\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L148-L158</li> </ul> <p>little endian variant</p>"},{"location":"globals/fio/#fioreadcardinal3le","title":"fio.readcardinal3le","text":"<p><pre><code>function fio.readcardinal3le(file: file*) -&gt;  integer\n</code></pre> @param <code>file</code> - A file handle.</p> <p>Read a 3 byte unsigned little endian integer (24-bit) from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  assert.equals(fio.readcardinal3le(f), 7562612)\n  assert.is_nil(fio.readcardinal3le(f))\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L199-L210</li> </ul> <p>little endian variant</p>"},{"location":"globals/fio/#fioreadcardinal4le","title":"fio.readcardinal4le","text":"<p><pre><code>function fio.readcardinal4le(file: file*) -&gt;  integer\n</code></pre> @param <code>file</code> - A file handle.</p> <p>Read a 4 byte unsigned little endian integer (32-bit) from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  assert.equals(fio.readcardinal4le(f), 1953719668)\n  assert.is_nil(fio.readcardinal4le(f))\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L254-L266</li> </ul> <p>little endian variant</p>"},{"location":"globals/fio/#fioreadinteger1","title":"fio.readinteger1","text":"<p><pre><code>function fio.readinteger1(file: file*) -&gt;  integer\n</code></pre> @param <code>file</code> - A file handle.</p> <p>@return  - A 1 byte signed integer.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a 1 byte signed integer (8-bit) from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  assert.equals(fio.readinteger1(f), 116)\n  assert.equals(fio.readinteger1(f), 101)\n  assert.equals(fio.readinteger1(f), 115)\n  assert.equals(fio.readinteger1(f), 116)\n  assert.is_nil(fio.readinteger1(f))\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L432-L442</li> </ul>"},{"location":"globals/fio/#fioreadinteger2","title":"fio.readinteger2","text":"<p><pre><code>function fio.readinteger2(file: file*) -&gt;  integer\n</code></pre> @param <code>file</code> - A file handle.</p> <p>@return  - A 2 byte signed integer.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a 2 byte signed integer (16-bit) from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  assert.equals(fio.readinteger2(f), 29797)\n  assert.equals(fio.readinteger2(f), 29556)\n  assert.is_nil(fio.readinteger2(f))\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L460-L471</li> </ul>"},{"location":"globals/fio/#fioreadinteger3","title":"fio.readinteger3","text":"<p><pre><code>function fio.readinteger3(file: file*) -&gt;  integer\n</code></pre> @param <code>file</code> - A file handle.</p> <p>@return  - A 3 byte signed integer.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a 3 byte signed integer (24-bit) from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  assert.equals(fio.readinteger3(f), 7628147)\n  assert.is_nil(fio.readinteger3(f))\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L518-530</li> </ul>"},{"location":"globals/fio/#fioreadinteger4","title":"fio.readinteger4","text":"<p><pre><code>function fio.readinteger4(file: file*) -&gt;  integer\n</code></pre> @param <code>file</code> - A file handle.</p> <p>@return  - A 4 byte signed integer.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a 4 byte signed integer (32-bit) from a file.</p> <p>Example:</p> <p><pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  assert.equals(fio.readinteger4(f), 1952805748)\n  assert.is_nil(fio.readinteger4(f))\n  f:close()\nend\n</code></pre> Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L580-593</li> </ul>"},{"location":"globals/fio/#fioreadintegertable","title":"fio.readintegertable","text":"<p><pre><code>function fio.readintegertable(\n  file: file*,\n  number: integer,\n  bytes: (1|2|3|4)\n) -&gt;  table&lt;integer,integer&gt;\n</code></pre> @param <code>file</code> - A file handle.</p> <p>@param <code>number</code> - The number of integers in the resulting table.</p> <p>@param <code>bytes</code> - Specify 1 for 1 byte signed integers, 2 for a 2 byte signed integers, and so on.</p> <p>Read <code>number</code> signed integers of <code>bytes</code> as a table from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n\n  local t = fio.readintegertable(f, 4, 1)\n  -- t: decimal=116 hexadecimal=74 binary=01110100\n  assert.equals(t[1], 116)\n  -- e: decimal=101 hexadecimal=65 binary=01100101\n  assert.equals(t[2], 101)\n  -- s: decimal=115 hexadecimal=73 binary=01110011\n  assert.equals(t[3], 115)\n  -- t: decimal=116 hexadecimal=74 binary=01110100\n  assert.equals(t[4], 116)\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L646-715</li> </ul> <p>@see sio.readintegertable</p>"},{"location":"globals/fio/#fioreadinteger1le","title":"fio.readinteger1le","text":"<p><pre><code>function fio.readinteger1le(file: file*) -&gt;  integer\n</code></pre> @param <code>file</code> - A file handle.</p> <p>Read a 1 byte signed little endian integer (8-bit) from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  -- t: decimal=116 hexadecimal=74 binary=01110100\n  assert.equals(fio.readinteger1le(f), 116)\n  -- e: decimal=101 hexadecimal=65 binary=01100101\n  assert.equals(fio.readinteger1le(f), 101)\n  -- s: decimal=115 hexadecimal=73 binary=01110011\n  assert.equals(fio.readinteger1le(f), 115)\n  -- t: decimal=116 hexadecimal=74 binary=01110100\n  assert.equals(fio.readinteger1le(f), 116)\n  f:close()\nend\n</code></pre> <ul> <li>Corresponding C source code: liolibext.c#L432-L442</li> </ul> <p>little endian variant</p>"},{"location":"globals/fio/#fioreadinteger2le","title":"fio.readinteger2le","text":"<p><pre><code>function fio.readinteger2le(file: file*) -&gt;  integer?\n</code></pre> @param <code>file</code> - A file handle.</p> <p>Read a 2 byte signed little endian integer (16-bit) from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  assert.equals(fio.readinteger2le(f), 25972)\n  assert.equals(fio.readinteger2le(f), 29811)\n  assert.is_nil(fio.readinteger2le(f))\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L472-483</li> </ul> <p>little endian variant</p>"},{"location":"globals/fio/#fioreadinteger3le","title":"fio.readinteger3le","text":"<p><pre><code>function fio.readinteger3le(file: file*) -&gt;  integer?\n</code></pre> @param <code>file</code> - A file handle.</p> <p>Read a 3 byte signed little endian integer (24-bit) from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  assert.equals(fio.readinteger3le(f), 7562612)\n  assert.is_nil(fio.readinteger3le(f))\n  f:close()\nend\n</code></pre> <p>little endian variant</p> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L531-543</li> </ul>"},{"location":"globals/fio/#fioreadinteger4le","title":"fio.readinteger4le","text":"<p><pre><code>function fio.readinteger4le(file: file*) -&gt;  integer?\n</code></pre> @param <code>file</code> - A file handle.</p> <p>Read a 4 byte signed little endian integer (32-bit) from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  assert.equals(fio.readinteger4le(f), 1953719668)\n  assert.is_nil(fio.readinteger4le(f))\n  f:close()\nend\n</code></pre> <p>little endian variant</p> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L594-607</li> </ul>"},{"location":"globals/fio/#fioreadfixed2","title":"fio.readfixed2","text":"<p><pre><code>function fio.readfixed2(file: file*) -&gt;  number?\n</code></pre> @param <code>file</code> - A file handle.</p> <p>@return  - a 2 byte float (used in font files)</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a 2 byte float (used in font files) from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  assert.numbers(fio.readfixed2(f), 116.39453125)\n  assert.numbers(fio.readfixed2(f), 115.453125)\n  assert.is_nil(fio.readfixed2(f))\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L802-813</li> </ul>"},{"location":"globals/fio/#fioreadfixed4","title":"fio.readfixed4","text":"<p><pre><code>function fio.readfixed4(file: file*) -&gt;  number?\n</code></pre> @param <code>file</code> - A file handle.</p> <p>@return  - a 4 byte float (used in font files)</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a 4 byte float (used in font files) from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  assert.numbers(fio.readfixed4(f), 29797.45098877)\n  assert.is_nil(fio.readfixed4(f))\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L830-843</li> </ul>"},{"location":"globals/fio/#fioread2dot14","title":"fio.read2dot14","text":"<p><pre><code>function fio.read2dot14(file: file*) -&gt;  number?\n</code></pre> @param <code>file</code> - A file handle.</p> <p>@return  - a 2 byte float (used in font files)</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a 2 byte float (used in font files) from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  assert.numbers(fio.read2dot14(f), 1.8186645507812)\n  fio.setposition(f, 1)\n  assert.numbers(fio.read2dot14(f), 1.5851440429688)\n  fio.setposition(f, 2)\n  assert.numbers(fio.read2dot14(f), 1.803955078125)\n  assert.is_nil(sio.read2dot14(\"test\", 4))\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L862-874</li> <li>Corresponding fontforge C source code: mem.c#L101-L107</li> <li>Corresponding fontforge C source code: ttf2eps.c#L418-L424</li> </ul>"},{"location":"globals/fio/#fiosetposition","title":"fio.setposition","text":"<p><pre><code>function fio.setposition(\n  file: file*,\n  position: integer\n) -&gt;  0?\n</code></pre> @param <code>file</code> - A file handle.</p> <p>@return  - <code>0</code> upon success, <code>nil</code> otherwise.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Goto <code>position</code>.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  assert.equals(fio.getposition(f), 0)\n  assert.equals(fio.setposition(f, 3), 0)\n  assert.equals(fio.getposition(f), 3)\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L901-910</li> </ul>"},{"location":"globals/fio/#fiogetposition","title":"fio.getposition","text":"<p><pre><code>function fio.getposition(file: file*) -&gt; position integer\n</code></pre> @param <code>file</code> - A file handle.</p> <p>@return <code>position</code> - The current position in bytes.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Get the current position.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  fio.readcardinal1(f)\n  assert.equals(fio.getposition(f), 1)\n  fio.readcardinal1(f)\n  assert.equals(fio.getposition(f), 2)\n  fio.readcardinal1(f)\n  assert.equals(fio.getposition(f), 3)\n  fio.readcardinal1(f)\n  assert.equals(fio.getposition(f), 4)\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L891-899</li> </ul>"},{"location":"globals/fio/#fioskipposition","title":"fio.skipposition","text":"<p><pre><code>function fio.skipposition(\n  file: file*,\n  number: integer\n) -&gt;  0?\n</code></pre> @param <code>file</code> - A file handle.</p> <p>@param <code>number</code> - The number of bytes to skip.</p> <p>@return  - <code>0</code> upon success, <code>nil</code> otherwise.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Skip <code>number</code> positions.</p> <p>Example:</p> <p><pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  -- t: decimal=116 hexadecimal=74 binary=01110100\n  assert.equals(fio.readcardinal1(f), 116)\n\n  fio.setposition(f, 0)\n  assert.equals(fio.skipposition(f, 1), 0)\n  -- e: decimal=101 hexadecimal=65 binary=01100101\n  assert.equals(fio.readcardinal1(f), 101)\n  f:close()\nend\n</code></pre> Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L912-921</li> </ul>"},{"location":"globals/fio/#fioreadbytes","title":"fio.readbytes","text":"<p><pre><code>function fio.readbytes(\n  file: file*,\n  number: integer\n) -&gt;  integer ...\n</code></pre> @param <code>file</code> - A file handle.</p> <p>@param <code>number</code> - The number of bytes to be read.</p> <p>Read <code>number</code> bytes from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  local b1, b2, b3, b4 = fio.readbytes(f, 4)\n  -- t: decimal=116 hexadecimal=74 binary=01110100\n  assert.equals(b1, 116)\n  -- e: decimal=101 hexadecimal=65 binary=01100101\n  assert.equals(b2, 101)\n  -- s: decimal=115 hexadecimal=73 binary=01110011\n  assert.equals(b3, 115)\n  -- t: decimal=116 hexadecimal=74 binary=01110100\n  assert.equals(b4, 116)\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L967-980</li> </ul>"},{"location":"globals/fio/#fioreadbytetable","title":"fio.readbytetable","text":"<p><pre><code>function fio.readbytetable(\n  file: file*,\n  number: integer\n) -&gt;  integer[]\n</code></pre> @param <code>file</code> - A file handle.</p> <p>@param <code>number</code> - The number of bytes to be read.</p> <p>Read <code>number</code> bytes as a table from a file.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"test\")\n  fio.setposition(f, 0)\n  local t = fio.readbytetable(f, 4)\n  -- t: decimal=116 hexadecimal=74 binary=01110100\n  assert.equals(t[1], 116)\n  -- e: decimal=101 hexadecimal=65 binary=01100101\n  assert.equals(t[2], 101)\n  -- s: decimal=115 hexadecimal=73 binary=01110011\n  assert.equals(t[3], 115)\n  -- t: decimal=116 hexadecimal=74 binary=01110100\n  assert.equals(t[4], 116)\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L923-943</li> </ul>"},{"location":"globals/fio/#fioreadline","title":"fio.readline","text":"<p><pre><code>function fio.readline(file: file*) -&gt;  string\n</code></pre> @param <code>file</code> - A file handle.</p> <p>Example:</p> <pre><code>local f = io.open(\"tmp.txt\", \"w+\")\nif f then\n  f:write(\"line1\\nline2\\nline3\\n\")\n  fio.setposition(f, 0)\n  assert.equals(fio.readline(f), \"line1\")\n  assert.equals(fio.readline(f), \"line2\")\n  assert.equals(fio.readline(f), \"line3\")\n  f:close()\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L1003-1032</li> </ul>"},{"location":"globals/font/","title":"global font","text":"<p>The font library provides the interface into the internals of the font system, and it also contains helper functions to load traditional TeX font metrics formats. Other font loading functionality is provided by the <code>fontloader</code> library that will be discussed in the next section.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/font/#methods","title":"methods","text":""},{"location":"globals/font/#fontread_tfm","title":"font.read_tfm","text":"<p><pre><code>function font.read_tfm(\n  name: string,\n  at_size: integer\n) -&gt;  TfmFont {\n    name = string,\n    area = string,\n    used = boolean,\n    characters = table&lt;integer,FontCharacter&gt;,\n    checksum = integer,\n    designsize = integer,\n    direction = FontDirection,\n    parameters = FontParameters,\n    size = integer,\n    tounicode = integer,\n}\n</code></pre> @param <code>at_size</code> - If <code>at_size</code> is positive, it specifies an \u201cat size\u201d in scaled points. If <code>at_size</code> is negative, its absolute value represents a \u201cscaled\u201d setting relative to the designsize of the font.</p> <p>Parse a font metrics file, at the size indicated by the number.</p> <p>Load a TFM (<code>TeX</code> font metric) file.</p> <p>Example:</p> <pre><code>font.read_tfm('cmr10', tex.sp('10pt'))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L38-L64</li> </ul>"},{"location":"globals/font/#fontread_vf","title":"font.read_vf","text":"<p><pre><code>function font.read_vf(\n  name,\n  at_size: integer\n) -&gt;  VfFont {\n    name = string,\n    characters = table&lt;integer,FontCharacter&gt;,\n    checksum = integer,\n    fonts = table,\n    header = string,\n    type = string,\n}\n</code></pre> @param <code>at_size</code> - If <code>s</code> is positive, it specifies an \u201cat size\u201d in scaled points. If <code>at_size</code> is negative, its absolute value represents a \u201cscaled\u201d setting relative to the designsize of the font.</p> <p>Parse a virtual font metrics file, at the size indicated by the number.</p> <p>Load a VF (virtual font) file.</p> <p>Example:</p> <pre><code>font.read_vf('ptmr8t', tex.sp('8pt'))\n</code></pre> <p>The meaning of the number <code>at_size</code> and the format of the returned table are similar to the ones in the <code>read_tfm</code> function.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L67-L83</li> </ul>"},{"location":"globals/font/#fontsetfont","title":"font.setfont","text":"<pre><code>function font.setfont(\n  font_id: integer,\n  f: Font {\n    name = string,\n    area = string,\n    used = boolean,\n    characters = table&lt;integer,FontCharacter&gt;,\n    checksum = integer,\n    designsize = integer,\n    direction = FontDirection,\n    encodingbytes = integer,\n    encodingname = string,\n    fonts = table,\n    psname = string,\n    fullname = string,\n    ...(+24)\n}\n)\n</code></pre> <p>Set an internal font id from a lua table.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L156-L173</li> </ul>"},{"location":"globals/font/#fontgetfont","title":"font.getfont","text":"<pre><code>function font.getfont(font_id: integer) -&gt; Font table\n</code></pre> <p>Fetch an internal font id as a Lua table.</p> <p>Note that at the moment, each access to the <code>font.fonts</code> or call to <code>font.getfont</code> creates a Lua table for the whole font unless you cached it.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L251-L258</li> </ul>"},{"location":"globals/font/#fontgetcopy","title":"font.getcopy","text":"<pre><code>function font.getcopy(font_id: integer) -&gt; Font table\n</code></pre> <p>Copy the internal data of a font.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L260-L267</li> </ul>"},{"location":"globals/font/#fontgetparameters","title":"font.getparameters","text":"<pre><code>function font.getparameters(font_id: integer) -&gt; p table\n</code></pre> <p>Return a table of the parameters as known to TeX. These can be different from the ones in the cached table.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L269-L276</li> </ul>"},{"location":"globals/font/#fontfrozen","title":"font.frozen","text":"<pre><code>function font.frozen(font_id: integer) -&gt;  boolean?\n</code></pre> <p>Test for the status of a font.</p> <p>Return true if the font is frozen and can no longer be altered.</p> <p>The return value is one of <code>true</code> (unassignable), <code>false</code> (can be changed) or <code>nil</code> (not a valid font at all).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L135-L153</li> </ul>"},{"location":"globals/font/#fontdefine","title":"font.define","text":"<pre><code>function font.define(f: Font {\n    name = string,\n    area = string,\n    used = boolean,\n    characters = table&lt;integer,FontCharacter&gt;,\n    checksum = integer,\n    designsize = integer,\n    direction = FontDirection,\n    encodingbytes = integer,\n    encodingname = string,\n    fonts = table,\n    psname = string,\n    fullname = string,\n    ...(+24)\n}) -&gt; font_id integer\n</code></pre> <p>Define a font into <code>font.fonts</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L209-L235</li> </ul>"},{"location":"globals/font/#fontdefine_1","title":"font.define","text":"<pre><code>function font.define(\n  font_id: integer,\n  f: Font {\n    name = string,\n    area = string,\n    used = boolean,\n    characters = table&lt;integer,FontCharacter&gt;,\n    checksum = integer,\n    designsize = integer,\n    direction = FontDirection,\n    encodingbytes = integer,\n    encodingname = string,\n    fonts = table,\n    psname = string,\n    fullname = string,\n    ...(+24)\n}\n) -&gt; i integer\n</code></pre> <p>An alternative call is:</p> <p>Where the first argument is a reserved font id (see below).</p>"},{"location":"globals/font/#fontaddcharacters","title":"font.addcharacters","text":"<pre><code>function font.addcharacters(\n  font_id: integer,\n  f: Font {\n    name = string,\n    area = string,\n    used = boolean,\n    characters = table&lt;integer,FontCharacter&gt;,\n    checksum = integer,\n    designsize = integer,\n    direction = FontDirection,\n    encodingbytes = integer,\n    encodingname = string,\n    fonts = table,\n    psname = string,\n    fullname = string,\n    ...(+24)\n}\n)\n</code></pre> <p>Add characters to a font.</p> <p>The table passed can have the fields <code>characters</code> which is a (sub)table like the one used in <code>font.define()</code>, and for virtual fonts a <code>fonts</code> table can be added. The characters defined in the <code>characters</code> table are added (when not yet present) or replace an existing entry. Keep in mind that replacing can have side effects because a character already can have been used. Instead of posing restrictions we expect the user to be careful. (The <code>setfont</code> helper is a more drastic replacer.)</p> <p>Example:</p> <pre><code>local newcharacters = {}\nfor gid = 0, #glyphs do\n  local glyph = glyphs[gid]\n  if glyph.used then\n    local character = characters[gid + gid_offset]\n    newcharacters[gid + gid_offset] = character\n    local unicode = nominals[gid]\n    if unicode then\n      newcharacters[unicode] = character\n    end\n    character.tounicode = glyph.tounicode or unicode or \"FFFD\"\n    character.used = true\n  end\nend\nfont.addcharacters(font_id, { characters = newcharacters })\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L175-L188</li> </ul>"},{"location":"globals/font/#fontnextid","title":"font.nextid","text":"<pre><code>function font.nextid() -&gt; font_id integer\n</code></pre> <p>Return the next free font id number.</p> <p>Return the font id number that would be returned by a <code>font.define</code> call if it was executed at this spot in the code flow.</p> <p>This is useful for virtual fonts that need to reference themselves. If you pass <code>true</code> as argument, the id gets reserved and you can pass to <code>font.define</code> as first argument. This can be handy when you create complex virtual fonts.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L240-L249</li> </ul>"},{"location":"globals/font/#fontid","title":"font.id","text":"<pre><code>function font.id(csname: string) -&gt; font_id integer\n</code></pre> <p>Return the font id of the font accessed by the csname given.</p> <p>Return the font id associated with <code>csname</code>, or <code>-1</code> if <code>csname</code> is not defined.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L278-L296</li> </ul>"},{"location":"globals/font/#fontmax","title":"font.max","text":"<pre><code>function font.max() -&gt; max_font_id integer\n</code></pre> <p>@return <code>max_font_id</code> - The largest used index in <code>font.fonts</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the highest used font id at this moment.</p> <p>Get the largest used index in <code>font.fonts</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L102-L106</li> </ul>"},{"location":"globals/font/#fontcurrent","title":"font.current","text":"<pre><code>function font.current(font_id: integer)\n</code></pre> <p>Set the currently used / active font number.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L85-L100</li> </ul>"},{"location":"globals/font/#fontcurrent_1","title":"font.current","text":"<pre><code>function font.current(font_id) -&gt; font_id integer\n</code></pre> <p>Get the currently used / active font number.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L85-L100</li> </ul>"},{"location":"globals/font/#fonteach","title":"font.each","text":"<pre><code>function font.each() -&gt;  fun() -&gt; (integer,Font)\n</code></pre> <p>Iterate over all the defined fonts.</p> <p>This is an iterator over each of the defined TeX fonts. The first returned value is the index in <code>font.fonts</code>, the second the font itself, as a Lua table. The indices are listed incrementally, but they do not always form an array of consecutive numbers: in some cases there can be holes in the sequence.</p> <p>Example:</p> <pre><code>local inspect = require('inspect')\nfor font_id, font in font.each() do\n  print(font_id, inspect(font))\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L127-L133</li> </ul>"},{"location":"globals/font/#fontsetexpansion","title":"font.setexpansion","text":"<pre><code>function font.setexpansion(\n  font_id: integer,\n  stretch: integer,\n  shrink: integer,\n  step: integer\n)\n</code></pre> <p>Because we store the actual state of expansion with each glyph and don't have special font instances, we can change some font related parameters before lines are constructed, like:</p> <pre><code>font.setexpansion(font.current(),100,100,20)\n</code></pre> <p>This is mostly meant for experiments (or an optimizing routing written in Lua) so there is no primitive.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L190-L204</li> </ul>"},{"location":"globals/font/#fields","title":"fields","text":""},{"location":"globals/font/#fontfonts","title":"font.fonts","text":"<pre><code>font.fonts: table\n</code></pre> <p>The whole table of TeX fonts is accessible from Lua using a virtual array. Because this is a virtual array, you cannot call <code>pairs</code> on it</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/fontloader/","title":"global fontloader","text":"<p>The fontloader library is sort of independent of the rest in the sense that it can load font into a Lua table that then can be converted into a table suitable for TeX. The library is an adapted subset of FontForge and as such gives a similar view on a font (which has advantages when you want to debug).</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/fontloader/#methods","title":"methods","text":""},{"location":"globals/fontloader/#fontloaderinfo","title":"fontloader.info","text":"<p><pre><code>function fontloader.info(filename: string) -&gt;  FontInfo?\n</code></pre> @param <code>filename</code> - The path a font file.</p> <p>Get various information fields from an font file.</p> <p>This function returns either <code>nil</code>, or a <code>table</code>, or an array of small tables (in the case of a TrueType collection). The returned table(s) will contain some fairly interesting information items from the font(s) defined by the file.</p> <p>Getting information through this function is (sometimes much) more efficient than loading the font properly, and is therefore handy when you want to create a dictionary of available fonts based on a directory contents.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L2257-L2284</li> </ul>"},{"location":"globals/fontloader/#fontloaderopen","title":"fontloader.open","text":"<pre><code>function fontloader.open(\n  filename: string,\n  fontname: string?\n)\n -&gt; font FontloaderFont {\n    table_version = string,\n    fontname = string,\n    fullname = string,\n    familyname = string,\n    weight = string,\n    copyright = string,\n    filename = string,\n    version = string,\n    italicangle = integer,\n    units_per_em = integer,\n    ascent = integer,\n    descent = integer,\n    ...(+60)\n}\n -&gt; warnings table\n</code></pre> <p>@return <code>font</code> - The first return value is a userdata representation of the font.</p> <p>@return <code>warnings</code> - The second return value is a table containing any warnings and errors reported by fontloader while opening the font. In normal typesetting, you would probably ignore the second argument, but it can be useful for debugging purposes.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Parse a font file and return a table representing its contents. The optional argument is the name of the desired font in case of font collection files. The optional return value contains any parser error strings.</p> <p>Open an OpenType font.</p> <p>If you want to use an OpenType font, you have to get the metric information from somewhere. Using the <code>fontloader</code> library, the simplest way to get that information is thus:</p> <pre><code>function load_font (filename)\n  local metrics = nil\n  local font = fontloader.open(filename)\n  if font then\n     metrics = fontloader.to_table(font)\n     fontloader.close(font)\n  end\n  return metrics\nend\n\nmyfont = load_font('/opt/tex/texmf/fonts/data/arial.ttf')\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L198-L263</li> </ul>"},{"location":"globals/fontloader/#fontloaderto_table","title":"fontloader.to_table","text":"<pre><code>function fontloader.to_table(font: FontloaderFont {\n    table_version = string,\n    fontname = string,\n    fullname = string,\n    familyname = string,\n    weight = string,\n    copyright = string,\n    filename = string,\n    version = string,\n    italicangle = integer,\n    units_per_em = integer,\n    ascent = integer,\n    descent = integer,\n    ...(+60)\n}) -&gt; f (FontloaderFont|false)\n</code></pre> <p>If you want to use an \\OPENTYPE\\ font, you have to get the metric information from somewhere. Using the fontloader library, the simplest way to get that information is thus:</p> <p>Example:</p> <pre><code>function load_font (filename)\n  local metrics = nil\n  local font = fontloader.open(filename)\n  if font then\n     metrics = fontloader.to_table(font)\n     fontloader.close(font)\n  end\n  return metrics\nend\n\nmyfont = load_font('/opt/tex/texmf/fonts/data/arial.ttf')\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L2244-L2255</li> </ul>"},{"location":"globals/fontloader/#fontloaderclose","title":"fontloader.close","text":"<pre><code>function fontloader.close(font: FontloaderFont {\n    table_version = string,\n    fontname = string,\n    fullname = string,\n    familyname = string,\n    weight = string,\n    copyright = string,\n    filename = string,\n    version = string,\n    italicangle = integer,\n    units_per_em = integer,\n    ascent = integer,\n    descent = integer,\n    ...(+60)\n})\n</code></pre> <p>Discard a loaded font.</p> <p>Example:</p> <pre><code>local f = fontloader.open(\n              '/usr/share/fonts/opentype/urw-base35/NimbusRoman-Regular.otf')\nprint(fontloader.to_table(f)) -- table: 0x3d23b50\nfontloader.close(f)\nprint(fontloader.to_table(f)) -- false\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L265-L280</li> <li>Source file of the <code>LuaTeX</code> manual: luatex-fontloader.tex#L149-153</li> </ul>"},{"location":"globals/fontloader/#fontloaderapply_featurefile","title":"fontloader.apply_featurefile","text":"<pre><code>function fontloader.apply_featurefile(\n  font: userdata,\n  filename: string\n) -&gt; errors table\n</code></pre> <p>Apply a feature file to a fontloader table.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L313-L334</li> </ul>"},{"location":"globals/fontloader/#fontloaderapply_afmfile","title":"fontloader.apply_afmfile","text":"<pre><code>function fontloader.apply_afmfile(\n  font: userdata,\n  filename: string\n) -&gt; errors table\n</code></pre> <p>Apply an AFM file to a fontloader table.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L336-L355</li> </ul>"},{"location":"globals/fontloader/#fontloaderfields","title":"fontloader.fields","text":"<pre><code>function fontloader.fields(font: FontloaderFont {\n    table_version = string,\n    fontname = string,\n    fullname = string,\n    familyname = string,\n    weight = string,\n    copyright = string,\n    filename = string,\n    version = string,\n    italicangle = integer,\n    units_per_em = integer,\n    ascent = integer,\n    descent = integer,\n    ...(+60)\n}) -&gt; fields FontloaderFontField[]\n</code></pre> <p>Example:</p> <pre><code>local f = fontloader.open('/usr/share/fonts/opentype/urw-base35/NimbusRoman-Regular.otf')\nfor _, value in ipairs(fontloader.fields(f)) do\n    print(value, f[value])\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L2491-L2511</li> </ul>"},{"location":"globals/fontloader/#fontloaderfields_1","title":"fontloader.fields","text":"<pre><code>function fontloader.fields(glyph: FontloaderGlyph {\n    name = string,\n    unicode = integer,\n    boundingbox = integer[],\n    width = integer,\n    vwidth = integer,\n    tsidebearing = integer,\n    lsidebearing = integer,\n    class = string,\n    kerns = FontloaderGlyphKern[],\n    vkerns = table,\n    dependents = string[],\n    lookups = table,\n    ...(+12)\n}) -&gt; fields FontloaderGlyphField[]\n</code></pre> <p>---Example:</p> <p><code>lua local f = fontloader.open('/usr/share/fonts/opentype/urw-base35/NimbusRoman-Regular.otf') for _, value in ipairs(fontloader.fields(f.glyphs[1])) do     print(value, f[value]) end</code>---</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L2491-L2511</li> </ul>"},{"location":"globals/gzip/","title":"global gzip","text":"<p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luazlib/gzip.lua</p>"},{"location":"globals/gzip/#methods","title":"methods","text":""},{"location":"globals/gzip/#gzipopen","title":"gzip.open","text":"<pre><code>function gzip.open(\n  filename: string,\n  mode: string?\n)\n -&gt;  GFile?\n -&gt; err string?\n</code></pre> <p>Open a file name using <code>gzopen</code>.</p> <p>Behaviour is identical to the description given in the <code>zlib</code> library.</p> <p>The <code>mode</code> parameter is as in fopen (<code>rb</code> or <code>wb</code>) but can also include a compression level (<code>wb9</code>) or a strategy: 'f' for filtered data as in <code>wb6f</code>, <code>h</code> for Huffman-only compression as in <code>wb1h</code>, <code>R</code> for run-length encoding as in <code>wb1R</code>, or <code>F</code> for fixed code compression as in <code>wb9F</code>. (See the description of deflateInit2 for more information about the strategy parameter.) <code>T</code> will request transparent writing or appending with no compression and not using the gzip format.</p> <p><code>a</code> can be used instead of <code>w</code> to request that the gzip stream that will be written be appended to the file. <code>+</code> will result in an error, since reading and writing to the same gzip file is not supported. The addition of <code>x</code> when writing will create the file exclusively, which fails if the file already exists. On systems that support it, the addition of <code>e</code> when reading or writing will set the flag to close the file on an <code>execve()</code> call.</p> <p>It returns a new file handle, or, in case of errors, <code>nil</code> plus an error message</p> <p>Example:</p> <pre><code>local g_file = gzip.open('test.gz', 'wb9')\nassert(g_file)\nfor i = 1, 10 do\n  g_file:write('This is line ' .. i, '\\n')\nend\ng_file:close()\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lgzip.c#L132-L138</li> <li>zlib manual manual.html</li> </ul>"},{"location":"globals/gzip/#gziplines","title":"gzip.lines","text":"<pre><code>function gzip.lines(filename: string) -&gt;  fun() -&gt; string\n</code></pre> <p>Same behaviour as io.lines in the <code>io</code> standard library provided by lua with the aditional feature of working with gzip files. If a normal text file is read it will read it normaly (normal gzopen behaviour).</p> <p>Example:</p> <pre><code>for line in gzip.lines('test.gz') do\n  print(line)\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lgzip.c#L159-L166</li> </ul> <p>@see io.lines</p>"},{"location":"globals/gzip/#gzipclose","title":"gzip.close","text":"<pre><code>function gzip.close(file: GFile {\n    flush = function,\n    read = function,\n    lines = function,\n    seek = function,\n    write = function,\n    close = function,\n}) -&gt; success true\n</code></pre> <p>Close the file.</p> <p>Example:</p> <pre><code>local g_file = gzip.open('test.gz', 'rb')\nassert(g_file)\nlocal success = gzip.close(g_file)\nassert(success == true)\n-- gzip.close(g_file) -&gt; attempt to use a closed file\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lgzip.c#L107-L109</li> </ul> <p>@see GFile.close</p>"},{"location":"globals/img/","title":"global img","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/img/#methods","title":"methods","text":""},{"location":"globals/img/#imgnew","title":"img.new","text":"<pre><code>function img.new(image_spec: luatex.img.ImageSpec?) -&gt;  luatex.img.Image {\n    attr = string,\n    bbox = table,\n    colordepth = number,\n    colorspace = number,\n    depth = number,\n    filename = string,\n    filepath = string,\n    height = number,\n    imagetype = string,\n    index = number,\n    objnum = number,\n    page = number,\n    ...(+18)\n}\n</code></pre> <p>Create a userdata object of type \u201cimage\u201d.</p> <pre><code>&lt;image&gt; var = img.new()\n&lt;image&gt; var = img.new(&lt;table&gt; image_spec)\n</code></pre> <p>This function creates a userdata object of type \u201cimage\u201d. The <code>image_spec</code> argument is optional. If it is given, it must be a table, and that table must contain a <code>filename</code> key. A number of other keys can also be useful, these are explained below.</p> <p>You can either say</p> <pre><code>a = img.new()\n</code></pre> <p>followed by</p> <pre><code>a.filename = \"foo.png\"\n</code></pre> <p>or you can put the file name (and some or all of the other keys) into a table directly, like so:</p> <pre><code>a = img.new({filename='foo.pdf', page=1})\n</code></pre> <p>The generated <code>&lt;image&gt;</code> userdata object allows access to a set of user-specified values as well as a set of values that are normally filled in and updated automatically by LuaTeX itself. Some of those are derived from the actual image file, others are updated to reflect the PDF output status of the object.</p> <p>There is one required user-specified field: the file name (<code>filename</code>). It can optionally be augmented by the requested image dimensions (<code>width</code>, <code>depth</code>, <code>height</code>), user-specified image attributes (<code>attr</code>), the requested PDF page identifier (<code>page</code>), the requested boundingbox (<code>pagebox</code>) for PDF inclusion, the requested color space object (<code>colorspace</code>).</p> <p>The function <code>img.new</code> does not access the actual image file, it just creates the <code>&lt;image&gt;</code> userdata object and initializes some memory structures. The <code>&lt;image&gt;</code> object and its internal structures are automatically garbage collected.</p> <p>Once the image is scanned, all the values in the <code>&lt;image&gt;</code> except <code>width</code>, <code>height</code> and <code>depth</code>, become frozen, and you cannot change them any more.</p> <p>You can use <code>pdf.setignoreunknownimages(1)</code> (or at the TeX end the <code>pdfvariable</code> <code>ignoreunknownimages</code>) to get around a quit when no known image type is found (based on name or preamble). Beware: this will not catch invalid images and we cannot guarantee side effects. A zero dimension image is still included when requested. No special flags are set. A proper workflow will not rely in such a catch but make sure that images are valid.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: limglib.c#L75-L102</li> </ul>"},{"location":"globals/img/#imgfields","title":"img.fields","text":"<pre><code>function img.fields() -&gt; keys luatex.img.ImageSpec {\n    attr = string?,\n    bbox = table?,\n    colordepth = number?,\n    colorspace = number?,\n    depth = number?,\n    filename = string,\n    filepath = string?,\n    height = number?,\n    imagetype = string?,\n    index = number?,\n    objnum = number?,\n    page = number?,\n    ...(+18)\n}\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: limglib.c#L301-L304</li> </ul>"},{"location":"globals/img/#imgkeys","title":"img.keys","text":"<pre><code>function img.keys()\n</code></pre> <p>Alias for img.fields()</p> <p>Reference:</p> <ul> <li>Corresponding C source code: limglib.c#L301-L304</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/img/#imgscan","title":"img.scan","text":"<pre><code>function img.scan(image: (luatex.img.Image|luatex.img.ImageSpec)) -&gt;  luatex.img.Image {\n    attr = string,\n    bbox = table,\n    colordepth = number,\n    colorspace = number,\n    depth = number,\n    filename = string,\n    filepath = string,\n    height = number,\n    imagetype = string,\n    index = number,\n    objnum = number,\n    page = number,\n    ...(+18)\n}\n</code></pre> <p>When you say <code>img.scan(a)</code> for a new image, the file is scanned, and variables such as <code>xsize</code>, <code>ysize</code>, image <code>type</code>, number of <code>pages</code>, and the resolution are extracted. Each of the <code>width</code>, <code>height</code>, <code>depth</code> fields are set up according to the image dimensions, if they were not given an explicit value already. An image file will never be scanned more than once for a given image variable. With all subsequent <code>img.scan(a)</code> calls only the dimensions are again set up (if they have been changed by the user in the meantime).</p> <p>For ease of use, you can do right-away a</p> <pre><code>&lt;image&gt; a = img.scan { filename = \"foo.png\" }\n</code></pre> <p>without a prior <code>img.new</code>.</p> <p>Nothing is written yet at this point, so you can do <code>a=img.scan</code>, retrieve the available info like image width and height, and then throw away <code>a</code> again by saying <code>a=nil</code>. In that case no image object will be reserved in the PDF, and the used memory will be cleaned up automatically.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: limglib.c#L145-L157</li> </ul>"},{"location":"globals/img/#imgcopy","title":"img.copy","text":"<pre><code>function img.copy(image: (luatex.img.Image|luatex.img.ImageSpec)) -&gt;  luatex.img.Image {\n    attr = string,\n    bbox = table,\n    colordepth = number,\n    colorspace = number,\n    depth = number,\n    filename = string,\n    filepath = string,\n    height = number,\n    imagetype = string,\n    index = number,\n    objnum = number,\n    page = number,\n    ...(+18)\n}\n</code></pre> <p>If you say <code>a = b</code>, then both variables point to the same <code>&lt;image&gt;</code> object. if you want to write out an image with different sizes, you can do <code>b = img.copy(a)</code>.</p> <p>Afterwards, <code>a</code> and <code>b</code> still reference the same actual image dictionary, but the dimensions for <code>b</code> can now be changed from their initial values that were just copies from <code>a</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: limglib.c#L104-L114</li> </ul>"},{"location":"globals/img/#imgwrite","title":"img.write","text":"<pre><code>function img.write(image: (luatex.img.Image|luatex.img.ImageSpec)) -&gt;  luatex.img.Image {\n    attr = string,\n    bbox = table,\n    colordepth = number,\n    colorspace = number,\n    depth = number,\n    filename = string,\n    filepath = string,\n    height = number,\n    imagetype = string,\n    index = number,\n    objnum = number,\n    page = number,\n    ...(+18)\n}\n</code></pre> <p>Allocate a PDF object number and generate a rule node of subtype <code>image</code> and put it into the output list.</p> <p>By this the image <code>a</code> is placed into the page stream, and the image file is written out into an image stream object after the shipping of the current page is finished.</p> <p>Again you can do a terse call like</p> <pre><code>img.write { filename = \"foo.png\" }\n</code></pre> <p>The <code>&lt;image&gt;</code> variable is returned in case you want it for later processing. You can also write an object.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: limglib.c#L267-L271</li> </ul>"},{"location":"globals/img/#imgimmediatewrite","title":"img.immediatewrite","text":"<pre><code>function img.immediatewrite(image: (luatex.img.Image|luatex.img.ImageSpec)) -&gt;  luatex.img.Image {\n    attr = string,\n    bbox = table,\n    colordepth = number,\n    colorspace = number,\n    depth = number,\n    filename = string,\n    filepath = string,\n    height = number,\n    imagetype = string,\n    index = number,\n    objnum = number,\n    page = number,\n    ...(+18)\n}\n</code></pre> <p>Allocate a PDF object number and write the image file for image <code>a</code> out immediately into the PDF file as an image stream object (like with <code>immediate</code> <code>\\pdfximage</code>).</p> <p>The object number of the image stream dictionary is then available by the <code>objnum</code> key. No <code>pdf_refximage</code> whatsit node is generated. You will need an <code>img.write(a)</code> or <code>img.node(a)</code> call to let the image appear on the page, or reference it by another trick; else you will have a dangling image object in the PDF file.</p> <p>Also here you can do a terse call like</p> <pre><code>a = img.immediatewrite { filename = \"foo.png\" }\n</code></pre> <p>The <code>&lt;image&gt;</code> variable is returned and you will most likely need it.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: limglib.c#L273-L282</li> </ul>"},{"location":"globals/img/#imgimmediatewriteobject","title":"img.immediatewriteobject","text":"<pre><code>function img.immediatewriteobject(\n  image: (luatex.img.Image|luatex.img.ImageSpec),\n  objnum: integer\n) -&gt;  luatex.img.Image {\n    attr = string,\n    bbox = table,\n    colordepth = number,\n    colorspace = number,\n    depth = number,\n    filename = string,\n    filepath = string,\n    height = number,\n    imagetype = string,\n    index = number,\n    objnum = number,\n    page = number,\n    ...(+18)\n}\n</code></pre> <p>Copie an object from a (PDF) image file.</p> <p>This features is experimental and might disappear.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: limglib.c#L284-L293</li> </ul>"},{"location":"globals/img/#imgnode","title":"img.node","text":"<pre><code>function img.node(image: (luatex.img.Image|luatex.img.ImageSpec)) -&gt;  Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n</code></pre> <p>Allocate a PDF object number and return a whatsit node of subtype <code>pdf_refximage</code>, filled with the image parameters <code>width</code>, <code>height</code>, <code>depth</code>, and <code>objnum</code>.</p> <p>Also here you can do a terse call like:</p> <pre><code>n = img.node ({ filename = \"foo.png\" })\n</code></pre> <p>This example outputs an image:</p> <pre><code>node.write(img.node{filename=\"foo.png\"})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: limglib.c#L295-L299</li> </ul>"},{"location":"globals/img/#imgtypes","title":"img.types","text":"<pre><code>function img.types() -&gt;  luatex.img.ImgType[]\n</code></pre> <p>Return a list with the supported image file type names, currently these are <code>pdf</code>, <code>png</code>, <code>jpg</code>, <code>jp2</code> (JPEG 2000), and <code>jbig2</code>.</p> <pre><code>types = img.types()\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: limglib.c#L306-L309</li> </ul>"},{"location":"globals/img/#imgboxes","title":"img.boxes","text":"<pre><code>function img.boxes() -&gt;  luatex.img.ImgBox[]\n</code></pre> <p>Return a list with the supported PDF page box names, currently these are <code>media</code>, <code>crop</code>, <code>bleed</code>, <code>trim</code>, and <code>art</code>, all in lowercase.</p> <pre><code>boxes = img.boxes()\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: limglib.c#L311-L314</li> </ul>"},{"location":"globals/kpse/","title":"global kpse","text":"<p>This library provides two separate, but nearly identical interfaces to the <code>kpathsea</code> file search functionality: there is a \u201cnormal\u201d procedural interface that shares its kpathsea instance with LuaTeX itself, and an object oriented interface that is completely on its own.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/kpse/#methods","title":"methods","text":""},{"location":"globals/kpse/#kpsedefault_texmfcnf","title":"kpse.default_texmfcnf","text":"<pre><code>function kpse.default_texmfcnf() -&gt;  string\n</code></pre> <p>@return  - returns the value of the C preprocessor macro DEFAULT_TEXMFCNF without initializing anything else from kpathsea, for example <code>{$SELFAUTOLOC,$SELFAUTOLOC/share/texmf-local/web2c,...}</code></p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>The way the library looks up variables is driven by the <code>texmf.cmf</code> file where the currently set program name acts as filter. You can check what file is used by with <code>default_texmfcnf</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lkpselib.c#L317-321</li> </ul>"},{"location":"globals/kpse/#kpseset_program_name","title":"kpse.set_program_name","text":"<pre><code>function kpse.set_program_name(\n  name: string,\n  progname: string?\n)\n</code></pre> <p>Initialize the kpathsea library by setting the program name. The optional string allows explicit <code>progname</code> setting.</p> <p>Before the search library can be used at all, its database has to be initialized. There are three possibilities, two of which belong to the procedural interface.</p> <p>First, when LuaTeX is used to typeset documents, this initialization happens automatically and the <code>kpathsea</code> executable and program names are set to <code>luatex</code> (that is, unless explicitly prohibited by the user's startup script.)</p> <p>Second, in TeXLUA mode, the initialization has to be done explicitly via the <code>kpse.set_program_name</code> function, which sets the <code>kpathsea</code> executable (and optionally program) name.</p> <p>The second argument controls the use of the \u201cdotted\u201d values in the <code>texmf.cnf</code> configuration file, and defaults to the first argument.</p> <p>Third, if you prefer the object oriented interface, you have to call a different function. It has the same arguments, but it returns a userdata variable.</p> <ul> <li>Corresponding C source code: lkpselib.c#L832-852</li> </ul>"},{"location":"globals/kpse/#kpsenew","title":"kpse.new","text":"<pre><code>function kpse.new(\n  name: string,\n  progname: string?\n) -&gt;  userdata\n</code></pre> <p>Create a new kpathsea library instance.</p> <p>The optional string allows explicit <code>progname</code> setting.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lkpselib.c#L908-L921</li> </ul>"},{"location":"globals/kpse/#kpserecord_input_file","title":"kpse.record_input_file","text":"<pre><code>function kpse.record_input_file(name: string)\n</code></pre> <p>Register used files.</p> <p>Because callbacks can load files themselves you might need these helpers (if you use recording at all).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lkpselib.c#L923-L930</li> </ul>"},{"location":"globals/kpse/#kpserecord_output_file","title":"kpse.record_output_file","text":"<pre><code>function kpse.record_output_file(name: string)\n</code></pre> <p>Register used files.</p> <p>Because callbacks can load files themselves you might need these helpers (if you use recording at all).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lkpselib.c#L932-L939</li> </ul>"},{"location":"globals/kpse/#kpsefind_file","title":"kpse.find_file","text":"<p><pre><code>function kpse.find_file(filename: string) -&gt;  string\n</code></pre> @param <code>filename</code> - the name of the file you want to find, with or without extension.</p> <p>Find a file.</p> <p>The optional string is the file type as supported by the standalone <code>kpsewhich</code> program (default is <code>`tex</code>, no autodiscovery takes place). The optional boolean indicates wether the file must exist. The optional number is the dpi value for PK files.</p> <p>The most often used function in the library is <code>find_file</code>:</p> <p>If <code>--output-directory</code> is specified and the value is a relative pathname, the file is searched first here and if it fails it will be searched in the standard tree.</p> <p>References:</p> <ul> <li>Corresponding C source code: lkpselib.c#L254-315</li> </ul>"},{"location":"globals/kpse/#kpsefind_file_1","title":"kpse.find_file","text":"<p><pre><code>function kpse.find_file(\n  filename: string,\n  ftype: KpseFtype\n) -&gt;  string\n</code></pre> @param <code>filename</code> - the name of the file you want to find, with or without extension.</p> <p>@param <code>ftype</code> - maps to the <code>-format</code> argument of <code>kpsewhich</code>. The supported <code>ftype</code> values are the same as the ones supported by the standalone <code>kpsewhich</code> program. The default type is <code>tex</code>. Note: this is different from <code>kpsewhich</code>, which tries to deduce the file type itself from looking at the supplied extension.</p> <p>Find a file.</p> <p>The optional string is the file type as supported by the standalone <code>kpsewhich</code> program (default is <code>`tex</code>, no autodiscovery takes place). The optional boolean indicates wether the file must exist. The optional number is the dpi value for PK files.</p> <p>The most often used function in the library is <code>find_file</code>:</p> <p>If <code>--output-directory</code> is specified and the value is a relative pathname, the file is searched first here and if it fails it will be searched in the standard tree.</p> <p>References:</p> <ul> <li>Corresponding C source code: lkpselib.c#L254-315</li> </ul>"},{"location":"globals/kpse/#kpsefind_file_2","title":"kpse.find_file","text":"<p><pre><code>function kpse.find_file(\n  filename: string,\n  ftype: KpseFtype,\n  mustexist: boolean\n) -&gt;  string\n</code></pre> @param <code>filename</code> - the name of the file you want to find, with or without extension.</p> <p>@param <code>ftype</code> - maps to the <code>-format</code> argument of <code>kpsewhich</code>. The supported <code>ftype</code> values are the same as the ones supported by the standalone <code>kpsewhich</code> program. The default type is <code>tex</code>. Note: this is different from <code>kpsewhich</code>, which tries to deduce the file type itself from looking at the supplied extension.</p> <p>@param <code>mustexist</code> - is similar to <code>kpsewhich</code>'s <code>-must-exist</code>, and the default is <code>false</code>. If you specify <code>true</code> (or a non-zero integer), then the kpse library will search the disk as well as the <code>ls-R</code> databases.</p> <p>Find a file.</p> <p>The optional string is the file type as supported by the standalone <code>kpsewhich</code> program (default is <code>`tex</code>, no autodiscovery takes place). The optional boolean indicates wether the file must exist. The optional number is the dpi value for PK files.</p> <p>The most often used function in the library is <code>find_file</code>:</p> <p>If <code>--output-directory</code> is specified and the value is a relative pathname, the file is searched first here and if it fails it will be searched in the standard tree.</p> <p>References:</p> <ul> <li>Corresponding C source code: lkpselib.c#L254-315</li> </ul>"},{"location":"globals/kpse/#kpsefind_file_3","title":"kpse.find_file","text":"<p><pre><code>function kpse.find_file(\n  filename: string,\n  ftype: KpseFtype,\n  dpi: number\n) -&gt;  string\n</code></pre> @param <code>filename</code> - the name of the file you want to find, with or without extension.</p> <p>@param <code>ftype</code> - maps to the <code>-format</code> argument of <code>kpsewhich</code>. The supported <code>ftype</code> values are the same as the ones supported by the standalone <code>kpsewhich</code> program. The default type is <code>tex</code>. Note: this is different from <code>kpsewhich</code>, which tries to deduce the file type itself from looking at the supplied extension.</p> <p>@param <code>dpi</code> - This is used for the size argument of the formats <code>pk</code>, <code>gf</code>, and <code>bitmap font</code>.</p> <p>Find a file.</p> <p>The optional string is the file type as supported by the standalone <code>kpsewhich</code> program (default is <code>`tex</code>, no autodiscovery takes place). The optional boolean indicates wether the file must exist. The optional number is the dpi value for PK files.</p> <p>The most often used function in the library is <code>find_file</code>:</p> <p>If <code>--output-directory</code> is specified and the value is a relative pathname, the file is searched first here and if it fails it will be searched in the standard tree.</p> <p>References:</p> <ul> <li>Corresponding C source code: lkpselib.c#L254-315</li> </ul>"},{"location":"globals/kpse/#kpselookup","title":"kpse.lookup","text":"<p><pre><code>function kpse.lookup(\n  filename: string,\n  options: KpseLookupOptions {\n    debug = number,\n    format = string,\n    dpi = number,\n    path = string,\n    all = boolean,\n    mustexist = boolean,\n    mktexpk = boolean,\n    mktextex = boolean,\n    mktexmf = boolean,\n    mktextfm = boolean,\n    subdir = (string|table),\n}\n) -&gt;  string\n</code></pre> @param <code>filename</code> - the name of the file you want to find, with or without extension.</p> <p>Find a file (extended interface).</p> <p>A more powerful (but slower) generic method for finding files is also available. It returns a string for each found file.</p> <p>If <code>--output-directory</code> is specified and the value is a relative pathname, the file is searched first here and then in the standard tree.</p> <p>References:</p> <ul> <li>Corresponding C source code: lkpselib.c#L813-818</li> </ul>"},{"location":"globals/kpse/#kpseinit_prog","title":"kpse.init_prog","text":"<pre><code>function kpse.init_prog(\n  prefix: string,\n  base_dpi: number,\n  mfmode: string,\n  fallback: string\n)\n</code></pre> <p>Initialize a PK generation program. The optional string is the metafont mode fallback name.</p> <p>Extra initialization for programs that need to generate bitmap fonts.</p> <p>References:</p> <ul> <li>Corresponding C source code: lkpselib.c#L865-874</li> </ul>"},{"location":"globals/kpse/#kpsereadable_file","title":"kpse.readable_file","text":"<pre><code>function kpse.readable_file(name: string) -&gt; f string?\n</code></pre> <p>@return <code>f</code> - The return value is the actual absolute filename you should use, because the disk name is not always the same as the requested name, due to aliases and system-specific handling under e.g. MS Dos Returns <code>nil</code> if the file does not exist or is not readable.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Returns true if a file exists and is readable.</p> <p>Test if an (absolute) file name is a readable file.</p> <p>References:</p> <ul> <li>Corresponding C source code: lkpselib.c#L891-898</li> </ul>"},{"location":"globals/kpse/#kpseexpand_path","title":"kpse.expand_path","text":"<pre><code>function kpse.expand_path(s: string) -&gt; r string\n</code></pre> <p>Expand a path.</p> <p>Output the complete expansion of string, with each element separated by the usual path separator on the current system (<code>;</code> on Windows, <code>:</code> otherwise). This may be useful to construct a custom search path for a format not otherwise supported. Like <code>kpsewhich</code>\u2019s <code>-expand-path</code>.</p> <p>References:</p> <ul> <li>kpathsea manual</li> <li>Corresponding C source code: lkpselib.c#L353-359</li> </ul>"},{"location":"globals/kpse/#kpseexpand_var","title":"kpse.expand_var","text":"<pre><code>function kpse.expand_var(s: string) -&gt; r string\n</code></pre> <p>Expand a variable.</p> <p>Output the variable and tilde expansion of string. For example, with the usual texmf.cnf, <code>kpse.expand_var('$TEXMF')</code> returns the TeX system hierarchy root(s). The specified string can contain anything, though, not just variable references. This calls kpse_var_expand (see Programming with config files). Like <code>kpsewhich</code>\u2019s  <code>-expand-var</code>:</p> <p>References:</p> <ul> <li>kpathsea manual</li> <li>Corresponding C source code: lkpselib.c#L386-392</li> </ul>"},{"location":"globals/kpse/#kpseexpand_braces","title":"kpse.expand_braces","text":"<pre><code>function kpse.expand_braces(s: string) -&gt; r string\n</code></pre> <p>Expand the braces in a variable.</p> <p>Output variable, tilde, and brace expansion of string, which is assumed to be a single path element. Like <code>kpsewhich</code>\u2019s <code>-expand-braces</code></p> <p>References:</p> <ul> <li>kpathsea manual</li> <li>Corresponding C source code: lkpselib.c#L369-375</li> </ul>"},{"location":"globals/kpse/#kpseshow_path","title":"kpse.show_path","text":"<pre><code>function kpse.show_path(file_type: string) -&gt; search_path string\n</code></pre> <p>List the search path for a specific file type.</p> <p>Show the path that would be used for file lookups of file type name. Either a filename extension (<code>pk</code>, <code>.vf</code>, etc.) or an integer can be used, just as with <code>--format</code>, described in the previous section.</p> <p>Like <code>kpsewhich</code>\u2019s <code>-show-path</code></p> <p>References:</p> <ul> <li>kpathsea manual</li> <li>Corresponding C source code: lkpselib.c#L334-343</li> </ul>"},{"location":"globals/kpse/#kpsevar_value","title":"kpse.var_value","text":"<pre><code>function kpse.var_value(variable: string) -&gt; value string\n</code></pre> <p>Return the value of a variable.</p> <p>Outputs the value of variable (a simple identifier like <code>TEXMFDIST</code>, with no <code>$</code> or other constructs), expanding <code>$</code> (see Variable expansion) and <code>~</code> (see Tilde expansion) constructs in the value. \u2018~` expansion happens at the beginning of the overall value and at the beginning of a variable expansion, but not arbitrarily within the string. Braces are not expanded.</p> <p>Like <code>kpsewhich\u2019</code>s <code>-var-value</code></p> <p>References:</p> <ul> <li>kpathsea manual</li> <li>Corresponding C source code: lkpselib.c#L395-L401</li> </ul>"},{"location":"globals/kpse/#kpseversion","title":"kpse.version","text":"<pre><code>function kpse.version() -&gt; version string\n</code></pre> <p>@return <code>version</code> - For example <code>kpathsea version 6.3.4</code></p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the kpathsea version string.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lkpselib.c#L876-L880</li> </ul>"},{"location":"globals/kpse/#kpsecheck_permission","title":"kpse.check_permission","text":"<pre><code>function kpse.check_permission(name: string)\n -&gt; okay boolean\n -&gt; found string\n</code></pre> <pre><code>local okay, found = kpse.check_permission(name)\nif okay and found then\n  return io.popen(found,...)\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lkpselib.c#L943-L980</li> </ul>"},{"location":"globals/lang/","title":"global lang","text":"<p>This library provides the interface to LuaTeX's structure representing a language, and the associated functions.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/lang/#methods","title":"methods","text":""},{"location":"globals/lang/#langnew","title":"lang.new","text":"<p><pre><code>function lang.new(id: integer?) -&gt;  Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n}\n</code></pre> @param <code>id</code> - Without an argument, the next available internal id number will be assigned to this object. With an argument, an object will be created that links to the internal language with that id number.</p> <p>@return  - The language object.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Create a new language object, with an optional fixed id number.</p> <p>Example:</p> <pre><code>local l1 = lang.new()\nprint(l1:id())\n-- 1\n\nlocal l42 = lang.new(42)\nprint(l42:id())\n-- 42\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L27-L48</li> <li>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/manual/luatex-languages.tex#L944-954</li> </ul>"},{"location":"globals/lang/#langid","title":"lang.id","text":"<p><pre><code>function lang.id(language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n}) -&gt;  integer\n</code></pre> @param <code>language</code> - The language object.</p> <p>@return  - The number returned is the internal <code>language</code> id number this object refers to.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the current internal <code>language</code> id number.</p> <p>Example:</p> <pre><code>local l = lang.new(123)\nprint(lang.id(l))\n-- 123\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L50-L56</li> <li>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/manual/luatex-languages.tex#L956-960</li> </ul>"},{"location":"globals/lang/#langhyphenation","title":"lang.hyphenation","text":"<p><pre><code>function lang.hyphenation(\n  language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n},\n  hyphenation_exceptions: string\n)\n</code></pre> @param <code>language</code> - The language object.</p> <p>Add hyphenation exceptions.</p> <p>Example:</p> <pre><code>local l = lang.new()\nlang.hyphenation(l, \"man-u-script\")\nprint(lang.hyphenation(l)) -- man-u-script\nlang.hyphenation(l, \"ca-tas-tro-phe\")\nprint(lang.hyphenation(l)) -- man-u-script ca-tas-tro-phe\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L86-L104</li> <li>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/manual/luatex-languages.tex#L968-980</li> </ul>"},{"location":"globals/lang/#langhyphenation_1","title":"lang.hyphenation","text":"<p><pre><code>function lang.hyphenation(language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n}) -&gt; hyphenation_exceptions string?\n</code></pre> @param <code>language</code> - The language object.</p> <p>Get the hyphenation exceptions.</p> <p>Example:</p> <pre><code>local l = lang.new()\nlang.hyphenation(l, \"man-u-script\")\nprint(lang.hyphenation(l)) -- man-u-script\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L86-L104</li> <li>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/manual/luatex-languages.tex#L968-980</li> </ul>"},{"location":"globals/lang/#langclear_hyphenation","title":"lang.clear_hyphenation","text":"<pre><code>function lang.clear_hyphenation(language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n})\n</code></pre> <p>Clear the set of hyphenation exceptions.</p> <p>Example:</p> <pre><code>local l = lang.new()\nprint(lang.hyphenation(l)) -- nil\nlang.hyphenation(l, \"man-u-script\")\nlang.hyphenation(l, \"ca-tas-tro-phe\")\nprint(lang.hyphenation(l)) --  man-u-script ca-tas-tro-phe\nlang.clear_hyphenation(l)\nprint(lang.hyphenation(l)) -- nil\n</code></pre>"},{"location":"globals/lang/#langclean","title":"lang.clean","text":"<p><pre><code>function lang.clean(\n  language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n},\n  o: string\n) -&gt; n string\n</code></pre> @param <code>language</code> - The language object.</p> <p>Clear the exception dictionary (string) for this language.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L223-L241</li> </ul>"},{"location":"globals/lang/#langclean_1","title":"lang.clean","text":"<p><pre><code>function lang.clean(o: string) -&gt; n string\n</code></pre> @param <code>o</code> - The language object.</p> <p>Clear the exception dictionary (string) for this language.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L223-L241</li> </ul>"},{"location":"globals/lang/#langpatterns","title":"lang.patterns","text":"<p><pre><code>function lang.patterns(\n  language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n},\n  patterns: string\n)\n</code></pre> @param <code>language</code> - The language object.</p> <p>@param <code>patterns</code> - For example <code>.ab3a .abb2 .ab5erk</code></p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Add additional patterns for this language object.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L58-L76</li> </ul>"},{"location":"globals/lang/#langpatterns_1","title":"lang.patterns","text":"<p><pre><code>function lang.patterns(language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n}) -&gt; pattterns string?\n</code></pre> @param <code>language</code> - The language object.</p> <p>@return <code>pattterns</code> - For example <code>.ab3a .abb2 .ab5erk</code></p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the current set of patterns.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L58-L76</li> </ul>"},{"location":"globals/lang/#langclear_patterns","title":"lang.clear_patterns","text":"<pre><code>function lang.clear_patterns(language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n})\n</code></pre> <p>Clear the set of hyphenation patterns.</p> <p>Clear the pattern dictionary for a language.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L78-L84</li> </ul>"},{"location":"globals/lang/#langhyphenationmin","title":"lang.hyphenationmin","text":"<pre><code>function lang.hyphenationmin(\n  language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n},\n  min: integer\n)\n</code></pre> <p>Set the value of the TeX parameter <code>\\hyphenationmin</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L199-L213</li> </ul>"},{"location":"globals/lang/#langhyphenationmin_1","title":"lang.hyphenationmin","text":"<p><pre><code>function lang.hyphenationmin(language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n}) -&gt; min integer\n</code></pre> @param <code>language</code> - The language object.</p> <p>Get the value of the TeX parameter <code>\\hyphenationmin</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L199-L213</li> </ul>"},{"location":"globals/lang/#langprehyphenchar","title":"lang.prehyphenchar","text":"<p><pre><code>function lang.prehyphenchar(\n  language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n},\n  char: integer\n)\n</code></pre> @param <code>language</code> - The language object.</p> <p>Set the \u201cpre-break\u201d hyphen characters for implicit hyphenation in this language.</p> <p>The intial values are decimal 45 (hyphen) and decimal 0 (indicating emptiness).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L106-L120</li> </ul>"},{"location":"globals/lang/#langprehyphenchar_1","title":"lang.prehyphenchar","text":"<p><pre><code>function lang.prehyphenchar(language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n}) -&gt; char integer\n</code></pre> @param <code>language</code> - The language object.</p> <p>Get the \u201cpre-break\u201d hyphen characters for implicit hyphenation in this language.</p> <p>The intial values are decimal 45 (hyphen) and decimal 0 (indicating emptiness).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L106-L120</li> </ul>"},{"location":"globals/lang/#langposthyphenchar","title":"lang.posthyphenchar","text":"<p><pre><code>function lang.posthyphenchar(\n  language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n},\n  char: integer\n)\n</code></pre> @param <code>language</code> - The language object.</p> <p>Set the \u201cpost-break\u201d hyphen characters for implicit hyphenation in this language.</p> <p>The intial values are decimal 45 (hyphen) and decimal 0 (indicating emptiness).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L122-L136</li> </ul>"},{"location":"globals/lang/#langposthyphenchar_1","title":"lang.posthyphenchar","text":"<p><pre><code>function lang.posthyphenchar(language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n}) -&gt; char integer\n</code></pre> @param <code>language</code> - The language object.</p> <p>Get the \u201cpost-break\u201d hyphen characters for implicit hyphenation in this language.</p> <p>The intial values are decimal 45 (hyphen) and decimal 0 (indicating emptiness).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L122-L136</li> </ul>"},{"location":"globals/lang/#langpreexhyphenchar","title":"lang.preexhyphenchar","text":"<p><pre><code>function lang.preexhyphenchar(\n  language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n},\n  char: integer\n)\n</code></pre> @param <code>language</code> - The language object.</p> <p>Set the \u201cpre-break\u201d hyphen characters for explicit hyphenation in this language.</p> <p>The hyphen character is initially decimal <code>0</code> (indicating emptiness).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L138-L152</li> </ul>"},{"location":"globals/lang/#langpreexhyphenchar_1","title":"lang.preexhyphenchar","text":"<p><pre><code>function lang.preexhyphenchar(language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n}) -&gt; char integer\n</code></pre> @param <code>language</code> - The language object.</p> <p>Get the \u201cpre-break\u201d hyphen characters for explicit hyphenation in this language.</p> <p>The hyphen character is initially decimal <code>0</code> (indicating emptiness).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L138-L152</li> </ul>"},{"location":"globals/lang/#langpostexhyphenchar","title":"lang.postexhyphenchar","text":"<p><pre><code>function lang.postexhyphenchar(\n  language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n},\n  char: integer\n)\n</code></pre> @param <code>language</code> - The language object.</p> <p>Set the \u201cpost-break\u201d hyphen characters for explicit hyphenation in this language.</p> <p>The hyphen character is initially decimal <code>0</code> (indicating emptiness).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L183-L197</li> </ul>"},{"location":"globals/lang/#langpostexhyphenchar_1","title":"lang.postexhyphenchar","text":"<p><pre><code>function lang.postexhyphenchar(language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n}) -&gt; char integer\n</code></pre> @param <code>language</code> - The language object.</p> <p>Get the \u201cpost-break\u201d hyphen characters for explicit hyphenation in this language.</p> <p>The hyphen character is initially decimal <code>0</code> (indicating emptiness).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L183-L197</li> </ul>"},{"location":"globals/lang/#langhyphenate","title":"lang.hyphenate","text":"<pre><code>function lang.hyphenate(\n  head: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  tail: Node?\n) -&gt; success boolean\n</code></pre> <p>Hyphenate a node list.</p> <p>Insert hyphenation points (discretionary nodes) in a node list.</p> <p>If <code>tail</code> is given as argument, processing stops on that node. Currently, <code>success</code> is always true if <code>head</code> (and <code>tail</code>, if specified) are proper nodes, regardless of possible other errors.</p> <p>Hyphenation works only on \u201ccharacters\u201d, a special subtype of all the glyph nodes with the node subtype having the value <code>1</code>. Glyph modes with different subtypes are not processed.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L243-L261</li> </ul>"},{"location":"globals/lang/#langsethjcode","title":"lang.sethjcode","text":"<p><pre><code>function lang.sethjcode(\n  language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n},\n  char: integer,\n  used_char: integer\n)\n</code></pre> @param <code>language</code> - The language object.</p> <p>Set hj codes.</p> <p>When you set a hjcode the current sets get initialized unless the set was already initialized due to <code>\\savinghyphcodes</code> being larger than zero.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L154-L169</li> </ul>"},{"location":"globals/lang/#langgethjcode","title":"lang.gethjcode","text":"<p><pre><code>function lang.gethjcode(\n  language: Language {\n    id = function,\n    hyphenation = function,\n    hyphenation = function,\n    clear_hyphenation = function,\n    patterns = function,\n    patterns = function,\n},\n  char: number\n) -&gt; used_char integer\n</code></pre> @param <code>language</code> - The language object.</p> <p>Query hj codes.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L171-L181</li> </ul>"},{"location":"globals/lpeg/","title":"global lpeg","text":"<p>This type definition is based on the HTML documentation of the LPeg library. A different HTML documentation can be found at http://stevedonovan.github.io/lua-stdlibs/modules/lpeg.html.</p> <p>LPeg is a new pattern-matching library for Lua, based on Parsing Expression Grammars (PEGs). This text is a reference manual for the library. For a more formal treatment of LPeg, as well as some discussion about its implementation, see A Text Pattern-Matching Tool based on Parsing Expression Grammars. (You may also be interested in my talk about LPeg given at the III Lua Workshop.)</p> <p>Following the Snobol tradition, LPeg defines patterns as first-class objects. That is, patterns are regular Lua values (represented by userdata). The library offers several functions to create and compose patterns. With the use of metamethods, several of these functions are provided as infix or prefix operators. On the one hand, the result is usually much more verbose than the typical encoding of patterns using the so called regular expressions (which typically are not regular expressions in the formal sense). On the other hand, first-class patterns allow much better documentation (as it is easy to comment the code, to break complex definitions in smaller parts, etc.) and are extensible, as we can define new functions to create and compose patterns.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/lpeg/#methods","title":"methods","text":""},{"location":"globals/lpeg/#lpegmatch","title":"lpeg.match","text":"<pre><code>function lpeg.match(\n  pattern: (Pattern|string|integer|boolean|table|function),\n  subject: string,\n  init: integer?,\n  ...: any\n) -&gt;  any ...\n</code></pre> <p>Match the given <code>pattern</code> against the <code>subject</code> string.</p> <p>If the match succeeds, returns the index in the subject of the first character after the match, or the captured values (if the pattern captured any value).</p> <p>An optional numeric argument <code>init</code> makes the match start at that position in the subject string. As usual in Lua libraries, a negative value counts from the end.</p> <p>Unlike typical pattern-matching functions, <code>match</code> works only in anchored mode; that is, it tries to match the pattern with a prefix of the given subject string (at position <code>init</code>), not with an arbitrary substring of the subject. So, if we want to find a pattern anywhere in a string, we must either write a loop in Lua or write a pattern that matches anywhere. This second approach is easy and quite efficient;</p> <p>Example:</p> <pre><code>local pattern = lpeg.R('az') ^ 1 * -1\nassert(pattern:match('hello') == 6)\nassert(lpeg.match(pattern, 'hello') == 6)\nassert(pattern:match('1 hello') == nil)\n</code></pre>"},{"location":"globals/lpeg/#lpegtype","title":"lpeg.type","text":"<pre><code>function lpeg.type(value) -&gt;  \"pattern\"?\n</code></pre> <p>Return the string <code>\"pattern\"</code> if the given value is a pattern, otherwise <code>nil</code>.</p>"},{"location":"globals/lpeg/#lpegsetmaxstack","title":"lpeg.setmaxstack","text":"<pre><code>function lpeg.setmaxstack(max: integer)\n</code></pre> <p>Set a limit for the size of the backtrack stack used by LPeg to track calls and choices.</p> <p>The default limit is <code>400</code>. Most well-written patterns need little backtrack levels and therefore you seldom need to change this limit; before changing it you should try to rewrite your pattern to avoid the need for extra space. Nevertheless, a few useful patterns may overflow. Also, with recursive grammars, subjects with deep recursion may also need larger limits.</p>"},{"location":"globals/lpeg/#lpegp","title":"lpeg.P","text":"<pre><code>function lpeg.P(value: (Pattern|string|integer|boolean|table|function)) -&gt;  Pattern {\n    match = function,\n}\n</code></pre> <p>Convert the given value into a proper pattern.</p> <p>The following rules are applied:</p> <ul> <li> <p>If the argument is a pattern, it is returned unmodified.</p> </li> <li> <p>If the argument is a string, it is translated to a pattern that matches the string literally.</p> </li> <li> <p>If the argument is a non-negative number <code>n</code>, the result is a pattern that matches exactly <code>n</code> characters.</p> </li> <li> <p>If the argument is a negative number <code>-n</code>, the result is a pattern that succeeds only if the input string has less than <code>n</code> characters left: <code>lpeg.P(-n)</code> is equivalent to <code>-lpeg.P(n)</code> (see the unary minus operation).</p> </li> <li> <p>If the argument is a boolean, the result is a pattern that always succeeds or always fails (according to the boolean value), without consuming any input.</p> </li> <li> <p>If the argument is a table, it is interpreted as a grammar (see Grammars).</p> </li> <li> <p>If the argument is a function, returns a pattern equivalent to a match-time capture over the empty string.</p> </li> </ul>"},{"location":"globals/lpeg/#lpegb","title":"lpeg.B","text":"<pre><code>function lpeg.B(pattern: (Pattern|string|integer|boolean|table)) -&gt;  Pattern {\n    match = function,\n}\n</code></pre> <p>Return a pattern that matches only if the input string at the current position is preceded by <code>patt</code>.</p> <p>Pattern <code>patt</code> must match only strings with some fixed length, and it cannot contain captures.</p> <p>Like the <code>and</code> predicate, this pattern never consumes any input, independently of success or failure.</p>"},{"location":"globals/lpeg/#lpegr","title":"lpeg.R","text":"<pre><code>function lpeg.R(...: string) -&gt;  Pattern {\n    match = function,\n}\n</code></pre> <p>Return a pattern that matches any single character belonging to one of the given ranges.</p> <p>Each <code>range</code> is a string <code>xy</code> of length 2, representing all characters with code between the codes of <code>x</code> and <code>y</code> (both inclusive).</p> <p>As an example, the pattern <code>lpeg.R('09')</code> matches any digit, and <code>lpeg.R('az', 'AZ')</code> matches any ASCII letter.</p> <p>Example:</p> <pre><code>local pattern = lpeg.R('az') ^ 1 * -1\nassert(pattern:match('hello') == 6)\n</code></pre>"},{"location":"globals/lpeg/#lpegs","title":"lpeg.S","text":"<pre><code>function lpeg.S(string: string) -&gt;  Pattern {\n    match = function,\n}\n</code></pre> <p>Return a pattern that matches any single character that appears in the given string. (The <code>S</code> stands for Set.)</p> <p>As an example, the pattern <code>lpeg.S('+-*/')</code> matches any arithmetic operator.</p> <p>Note that, if <code>s</code> is a character (that is, a string of length 1), then <code>lpeg.P(s)</code> is equivalent to <code>lpeg.S(s)</code> which is equivalent to <code>lpeg.R(s..s)</code>. Note also that both <code>lpeg.S('')</code> and <code>lpeg.R()</code> are patterns that always fail.</p>"},{"location":"globals/lpeg/#lpegv","title":"lpeg.V","text":"<pre><code>function lpeg.V(v: (boolean|string|number|function|table|thread|userdata|lightuserdata)) -&gt;  Pattern {\n    match = function,\n}\n</code></pre> <p>Create a non-terminal (a variable) for a grammar.</p> <p>This operation creates a non-terminal (a variable) for a grammar. The created non-terminal refers to the rule indexed by <code>v</code> in the enclosing grammar.</p> <p>Example:</p> <pre><code>local b = lpeg.P({'(' * ((1 - lpeg.S '()') + lpeg.V(1)) ^ 0 * ')'})\nassert(b:match('((string))') == 11)\nassert(b:match('(') == nil)\n</code></pre>"},{"location":"globals/lpeg/#lpeglocale","title":"lpeg.locale","text":"<pre><code>function lpeg.locale(tab: table?) -&gt;  Locale {\n    alnum = userdata,\n    alpha = userdata,\n    cntrl = userdata,\n    digit = userdata,\n    graph = userdata,\n    lower = userdata,\n    print = userdata,\n    punct = userdata,\n    space = userdata,\n    upper = userdata,\n    xdigit = userdata,\n}\n</code></pre> <p>Return a table with patterns for matching some character classes according to the current locale.</p> <p>The table has fields named <code>alnum</code>, <code>alpha</code>, <code>cntrl</code>, <code>digit</code>, <code>graph</code>, <code>lower</code>, <code>print</code>, <code>punct</code>, <code>space</code>, <code>upper</code>, and <code>xdigit</code>, each one containing a correspondent pattern. Each pattern matches any single character that belongs to its class.</p> <p>If called with an argument <code>table</code>, then it creates those fields inside the given table and returns that table.</p> <p>Example:</p> <pre><code>lpeg.locale(lpeg)\nlocal space = lpeg.space ^ 0\nlocal name = lpeg.C(lpeg.alpha ^ 1) * space\nlocal sep = lpeg.S(',;') * space\nlocal pair = lpeg.Cg(name * '=' * space * name) * sep ^ -1\nlocal list = lpeg.Cf(lpeg.Ct('') * pair ^ 0, rawset)\nlocal t = list:match('a=b, c = hi; next = pi')\nassert(t.a == 'b')\nassert(t.c == 'hi')\nassert(t.next == 'pi')\n\nlocal locale = lpeg.locale()\nassert(type(locale.digit) == 'userdata')\n</code></pre>"},{"location":"globals/lpeg/#lpegc","title":"lpeg.C","text":"<pre><code>function lpeg.C(patt: (Pattern|string|integer|boolean|table|function)) -&gt;  Capture\n</code></pre> <p>Create a simple capture.</p> <p>Creates a simple capture, which captures the substring of the subject that matches <code>patt</code>. The captured value is a string. If <code>patt</code> has other captures, their values are returned after this one.</p> <p>Example:</p> <pre><code>local function split (s, sep)\n  sep = lpeg.P(sep)\n  local elem = lpeg.C((1 - sep) ^ 0)\n  local p = elem * (sep * elem) ^ 0\n  return lpeg.match(p, s)\nend\n\nlocal a, b, c = split('a,b,c', ',')\nassert(a == 'a')\nassert(b == 'b')\nassert(c == 'c')\n</code></pre>"},{"location":"globals/lpeg/#lpegcarg","title":"lpeg.Carg","text":"<pre><code>function lpeg.Carg(n: integer) -&gt;  Capture\n</code></pre> <p>Create an argument capture.</p> <p>This pattern matches the empty string and produces the value given as the nth extra argument given in the call to <code>lpeg.match</code>.</p>"},{"location":"globals/lpeg/#lpegcb","title":"lpeg.Cb","text":"<pre><code>function lpeg.Cb(name: any) -&gt;  Capture\n</code></pre> <p>Create a back capture.</p> <p>This pattern matches the empty string and produces the values produced by the most recent group capture named <code>name</code> (where <code>name</code> can be any Lua value).</p> <p>Most recent means the last complete outermost group capture with the given name. A Complete capture means that the entire pattern corresponding to the capture has matched. An Outermost capture means that the capture is not inside another complete capture.</p> <p>In the same way that LPeg does not specify when it evaluates captures, it does not specify whether it reuses values previously produced by the group or re-evaluates them.</p>"},{"location":"globals/lpeg/#lpegcc","title":"lpeg.Cc","text":"<pre><code>function lpeg.Cc(...: any) -&gt;  Capture\n</code></pre> <p>Create a constant capture.</p> <p>This pattern matches the empty string and produces all given values as its captured values.</p>"},{"location":"globals/lpeg/#lpegcf","title":"lpeg.Cf","text":"<pre><code>function lpeg.Cf(\n  patt: (Pattern|string|integer|boolean|table|function),\n  func: fun(acc, newvalue) -&gt; any\n) -&gt;  Capture\n</code></pre> <p>Create a fold capture.</p> <p>If <code>patt</code> produces a list of captures C1 C2 ... Cn, this capture will produce the value <code>func(...func(func(C1, C2), C3)...,Cn)</code>, that is, it will fold (or accumulate, or reduce) the captures from <code>patt</code> using function <code>func</code>.</p> <p>This capture assumes that <code>patt</code> should produce at least one capture with at least one value (of any type), which becomes the initial value of an accumulator. (If you need a specific initial value, you may prefix a constant capture to <code>patt</code>.) For each subsequent capture, LPeg calls <code>func</code> with this accumulator as the first argument and all values produced by the capture as extra arguments; the first result from this call becomes the new value for the accumulator. The final value of the accumulator becomes the captured value.</p> <p>Example:</p> <pre><code>local number = lpeg.R('09') ^ 1 / tonumber\nlocal list = number * (',' * number) ^ 0\nlocal function add(acc, newvalue) return acc + newvalue end\nlocal sum = lpeg.Cf(list, add)\nassert(sum:match('10,30,43') == 83)\n</code></pre>"},{"location":"globals/lpeg/#lpegcg","title":"lpeg.Cg","text":"<pre><code>function lpeg.Cg(\n  patt: (Pattern|string|integer|boolean|table|function),\n  name: string?\n) -&gt;  Capture\n</code></pre> <p>Create a group capture.</p> <p>It groups all values returned by <code>patt</code> into a single capture. The group may be anonymous (if no name is given) or named with the given name (which can be any non-nil Lua value).</p>"},{"location":"globals/lpeg/#lpegcp","title":"lpeg.Cp","text":"<pre><code>function lpeg.Cp() -&gt;  Capture\n</code></pre> <p>Create a position capture.</p> <p>It matches the empty string and captures the position in the subject where the match occurs. The captured value is a number.</p> <p>Example:</p> <pre><code>local I = lpeg.Cp()\nlocal function anywhere(p) return lpeg.P({I * p * I + 1 * lpeg.V(1)}) end\n\nlocal match_start, match_end = anywhere('world'):match('hello world!')\nassert(match_start == 7)\nassert(match_end == 12)\n</code></pre>"},{"location":"globals/lpeg/#lpegcs","title":"lpeg.Cs","text":"<pre><code>function lpeg.Cs(patt: (Pattern|string|integer|boolean|table|function)) -&gt;  Capture\n</code></pre> <p>Create a substitution capture.</p> <p>This function creates a substitution capture, which captures the substring of the subject that matches <code>patt</code>, with substitutions. For any capture inside <code>patt</code> with a value, the substring that matched the capture is replaced by the capture value (which should be a string). The final captured value is the string resulting from all replacements.</p> <p>Example:</p> <pre><code>local function gsub (s, patt, repl)\n  patt = lpeg.P(patt)\n  patt = lpeg.Cs((patt / repl + 1) ^ 0)\n  return lpeg.match(patt, s)\nend\nassert(gsub('Hello, xxx!', 'xxx', 'World') == 'Hello, World!')\n</code></pre>"},{"location":"globals/lpeg/#lpegct","title":"lpeg.Ct","text":"<pre><code>function lpeg.Ct(patt: (Pattern|string|integer|boolean|table|function)) -&gt;  Capture\n</code></pre> <p>Create a table capture.</p> <p>This capture returns a table with all values from all anonymous captures made by <code>patt</code> inside this table in successive integer keys, starting at 1. Moreover, for each named capture group created by <code>patt</code>, the first value of the group is put into the table with the group name as its key. The captured value is only the table.</p>"},{"location":"globals/lpeg/#lpegcmt","title":"lpeg.Cmt","text":"<pre><code>function lpeg.Cmt(\n  patt: (Pattern|string|integer|boolean|table|function),\n  fn: fun(s: string, i: integer, ...: any) -&gt; ((boolean|integer),unknown)\n) -&gt;  Capture\n</code></pre> <p>Create a match-time capture.</p> <p>Unlike all other captures, this one is evaluated immediately when a match occurs (even if it is part of a larger pattern that fails later). It forces the immediate evaluation of all its nested captures and then calls <code>function</code>.</p> <p>The given function gets as arguments the entire subject, the current position (after the match of <code>patt</code>), plus any capture values produced by <code>patt</code>.</p> <p>The first value returned by <code>fn</code> defines how the match happens. If the call returns a number, the match succeeds and the returned number becomes the new current position. (Assuming a subject and current position <code>i</code>, the returned number must be in the range <code>[i, len(s) + 1]</code>.) If the call returns true, the match succeeds without consuming any input. (So, to return true is equivalent to return <code>i</code>.) If the call returns <code>false</code>, <code>nil</code>, or no value, the match fails.</p> <p>Any extra values returned by the function become the values produced by the capture.</p>"},{"location":"globals/lpeg/#fields","title":"fields","text":""},{"location":"globals/lpeg/#lpegversion","title":"lpeg.version","text":"<pre><code>lpeg.version : string\n</code></pre> <p>A string (not a function) with the running version of LPeg.</p> <p>Note: In earlier versions of LPeg this field was a function.</p>"},{"location":"globals/lua/","title":"global lua","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/lua/#methods","title":"methods","text":""},{"location":"globals/lua/#luasetbytecode","title":"lua.setbytecode","text":"<pre><code>function lua.setbytecode(\n  n: integer,\n  f: (function)?\n)\n</code></pre> <p>Save a function in a bytecode register.</p> <p>Example:</p> <pre><code>lua.setbytecode(13, function () print('A message') end)\nlocal print_message = lua.getbytecode(13)\nprint_message() -- 'A message'\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: llualib.c#L249-L315</li> </ul>"},{"location":"globals/lua/#luagetbytecode","title":"lua.getbytecode","text":"<pre><code>function lua.getbytecode(n: integer) -&gt; f (function)?\n</code></pre> <p>Return a previously stored function from a bytecode register.</p> <p>Example:</p> <pre><code>lua.setbytecode(13, function () print('A message') end)\nlocal print_message = lua.getbytecode(13)\nprint_message() -- 'A message'\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: llualib.c#L187-L212</li> </ul>"},{"location":"globals/lua/#luagetcodepage","title":"lua.getcodepage","text":"<pre><code>function lua.getcodepage()\n -&gt;  integer\n -&gt;  integer\n</code></pre> <p>@return  - command handler</p> <p>@return  - graphical user interface</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return two numbers, one for the command handler and one for the graphical user interface (on Microsoft Windows).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llualib.c#L382-L392</li> </ul>"},{"location":"globals/lua/#luasetluaname","title":"lua.setluaname","text":"<p><pre><code>function lua.setluaname(\n  chunk_name: string?,\n  index: integer\n)\n</code></pre> @param <code>chunk_name</code> - If you want to unset a Lua name, you can assign <code>nil</code> to it.</p> <p>Set a Lua chunk name.</p> <p>When a chunk name starts with a <code>@</code> it will be displayed as a file name. This is a side effect of the way Lua implements error handling.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llualib.c#L318-L339-</li> </ul> <p>@see lua.name lua.getluaname</p>"},{"location":"globals/lua/#luagetluaname","title":"lua.getluaname","text":"<pre><code>function lua.getluaname(index: number) -&gt;  string?\n</code></pre> <p>Return a Lua chunk name.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llualib.c#L341-L354</li> </ul> <p>@see lua.name lua.setluaname</p>"},{"location":"globals/lua/#luanewtable","title":"lua.newtable","text":"<pre><code>function lua.newtable(\n  index: integer,\n  hash: integer\n) -&gt;  table\n</code></pre> <p>Create a new empty table and push it onto the stack.</p> <p>Parameter <code>index</code> is a hint for how many elements the table will have as a sequence; parameter <code>hash</code> is a hint for how many other elements the table will have. Lua may use these hints to preallocate memory for the new table. This preallocation is useful for performance when you know in advance how many elements the table will have.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llualib.c#L362-L368</li> <li>lua_createtable</li> </ul>"},{"location":"globals/lua/#luagetstacktop","title":"lua.getstacktop","text":"<pre><code>function lua.getstacktop() -&gt;  integer\n</code></pre> <p>Return a number indicating how much nesting is going on.</p> <p>It is only of use as a breakpoint when checking some mechanism going haywire.</p> <p>Reference:</p> <ul> <li><code>LuaTeX</code> manual: 10.1.4 Introspection</li> <li>Corresponding C source code: llualib.c#L370-L374</li> </ul>"},{"location":"globals/lua/#luagetcalllevel","title":"lua.getcalllevel","text":"<pre><code>function lua.getcalllevel() -&gt;  integer\n</code></pre> <p>Return a number indicating how much nesting is going on.</p> <p>It is only of use as a breakpoint when checking some mechanism going haywire.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llualib.c#L376-L380</li> <li><code>LuaTeX</code> manual: 10.1.4 Introspection</li> </ul>"},{"location":"globals/lua/#luaget_functions_table","title":"lua.get_functions_table","text":"<pre><code>function lua.get_functions_table() -&gt;  { [integer]: fun(slot: integer) }\n</code></pre> <p>The <code>\\directlua</code> commands involves tokenization of its argument (after picking up an optional name or number specification). The tokenlist is then converted into a string and given to Lua to turn into a function that is called. The overhead is rather small but when you have millions of calls it can have some impact. For this reason there is a variant call available: <code>\\luafunction</code>. This command is used as follows:</p> <pre><code>\\directlua {\n    local t = lua.get_functions_table()\n    t[1] = function() tex.print(\"!\") end\n    t[2] = function() tex.print(\"?\") end\n}\n\n\\luafunction1\n\\luafunction2\n</code></pre> <p>Of course the functions can also be defined in a separate file. There is no limit on the number of functions apart from normal Lua limitations. Of course there is the limitation of no arguments but that would involve parsing and thereby give no gain. The function, when called in fact gets one argument, being the index, so in the following example the number <code>8</code> gets typeset.</p>"},{"location":"globals/lua/#directlua-local-t-luaget_functions_table-t8-functionslot-texprintslot-end","title":"<pre><code>\\directlua {\n    local t = lua.get_functions_table()\n    t[8] = function(slot) tex.print(slot) end\n}\n</code></pre>","text":"<pre><code>token.set_lua(\"mycode\", id)\ntoken.set_lua(\"mycode\", id, \"global\", \"protected\")\n</code></pre> <p>This creates a token that refers to a Lua function with an entry in the table that you can access with <code>lua.get_functions_table</code>. It is the companion to <code>luadef</code>.</p> <p>Reference:</p> <ul> <li><code>LuaTeX</code> manual: 2.4.4 <code>\\luafunction</code>, <code>\\luafunctioncall</code> and <code>\\luadef</code></li> <li><code>LuaTeX</code> manual: 10.6.4 Macros</li> <li>Corresponding C source code: llualib.c#L356-L360</li> </ul>"},{"location":"globals/lua/#fields","title":"fields","text":""},{"location":"globals/lua/#luaversion","title":"lua.version","text":"<pre><code>lua.version : string\n</code></pre> <p>Version information: This library contains one read-only item:</p> <pre><code>&lt;string&gt; s = lua.version\n</code></pre> <p>This returns the Lua version identifier string.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llualib.c#L416-L417</li> </ul>"},{"location":"globals/lua/#luabytecode","title":"lua.bytecode","text":"<pre><code>lua.bytecode : table&lt;integer,(function)?&gt;\n</code></pre> <p>Use the <code>bytecode</code> table to store Lua code chunks. The accepted values for assignments are functions and <code>nil</code>. Likewise, the retrieved value is either a function or <code>nil</code>.</p> <p>The contents of the <code>lua.bytecode</code> array is stored inside the format file as actual Lua bytecode, so it can also be used to preload Lua code. The function must not contain any upvalues.</p>"},{"location":"globals/lua/#luaname","title":"lua.name","text":"<pre><code>lua.name : table&lt;integer,string&gt;\n</code></pre> <p>There is an array of 65536 (0-65535) potential chunk names for use with the <code>directlua</code> and <code>latelua</code> primitives.</p> <pre><code>lua.name[&lt;number&gt; n] = &lt;string&gt; s\n&lt;string&gt; s = lua.name[&lt;number&gt; n]\n</code></pre> <p>@see lua.getluaname lua.setluaname</p>"},{"location":"globals/luaharfbuzz/","title":"global luaharfbuzz","text":"<p>https://github.com/ufyTeX/luaharfbuzz/blob/master/src/harfbuzz.luadoc</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/luaharfbuzz/#methods","title":"methods","text":""},{"location":"globals/luaharfbuzz/#luaharfbuzzshape_full","title":"luaharfbuzz.shape_full","text":"<pre><code>function luaharfbuzz.shape_full(\n  font: HbFont {\n    new = function,\n    get_scale = function,\n    set_scale = function,\n    get_h_extents = function,\n    get_v_extents = function,\n    get_glyph_extents = function,\n    get_glyph_name = function,\n    get_glyph_from_name = function,\n    get_glyph_h_advance = function,\n    get_glyph_v_advance = function,\n    get_nominal_glyph = function,\n    ot_color_glyph_get_png = function,\n    ...(+0)\n},\n  buffer: HbBuffer {\n    CLUSTER_LEVEL_MONOTONE_GRAPHEMES = 0,\n    CLUSTER_LEVEL_MONOTONE_CHARACTERS = 1,\n    CLUSTER_LEVEL_CHARACTERS = 2,\n    CLUSTER_LEVEL_DEFAULT = 0,\n    GLYPH_FLAG_UNSAFE_TO_BREAK = 1,\n    GLYPH_FLAG_DEFINED = 3,\n    new = function,\n    add_utf8 = function,\n    add_codepoints = function,\n    set_direction = function,\n    get_direction = function,\n    set_script = function,\n    ...(+9)\n},\n  features: HbFeature[],\n  shapers: string[]\n)\n</code></pre> <p>Shapes <code>buffer</code> using <code>font</code> turning its Unicode characters content to positioned glyphs. If <code>features</code> is not <code>nil</code>, it will be used to control the features applied during shaping.</p> <p>Wraps <code>hb_shape_full</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luaharfbuzz.c#L16-L51</li> <li>HarfBuzz online documentation: hb_shape_full</li> </ul>"},{"location":"globals/luaharfbuzz/#luaharfbuzzshapers","title":"luaharfbuzz.shapers","text":"<pre><code>function luaharfbuzz.shapers() -&gt;  string ...\n</code></pre> <p>@return  - for example: <code>graphite2 ot fallback</code></p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Retrieve the list of shapers supported by HarfBuzz.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luaharfbuzz.c#L44-L53</li> <li>HarfBuzz online documentation: hb_shape_list_shapers</li> </ul>"},{"location":"globals/luaharfbuzz/#luaharfbuzzversion","title":"luaharfbuzz.version","text":"<pre><code>function luaharfbuzz.version() -&gt;  string\n</code></pre> <p>Return the library version as a string with three components.</p> <p>Wraps <code>hb_version_string</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luaharfbuzz.c#L39-L42</li> <li>HarfBuzz online documentation: hb_version_string</li> </ul>"},{"location":"globals/luaharfbuzz/#luaharfbuzzshape","title":"luaharfbuzz.shape","text":"<p><pre><code>function luaharfbuzz.shape(\n  font: HbFont {\n    new = function,\n    get_scale = function,\n    set_scale = function,\n    get_h_extents = function,\n    get_v_extents = function,\n    get_glyph_extents = function,\n    get_glyph_name = function,\n    get_glyph_from_name = function,\n    get_glyph_h_advance = function,\n    get_glyph_v_advance = function,\n    get_nominal_glyph = function,\n    ot_color_glyph_get_png = function,\n    ...(+0)\n},\n  buffer: HbBuffer {\n    CLUSTER_LEVEL_MONOTONE_GRAPHEMES = 0,\n    CLUSTER_LEVEL_MONOTONE_CHARACTERS = 1,\n    CLUSTER_LEVEL_CHARACTERS = 2,\n    CLUSTER_LEVEL_DEFAULT = 0,\n    GLYPH_FLAG_UNSAFE_TO_BREAK = 1,\n    GLYPH_FLAG_DEFINED = 3,\n    new = function,\n    add_utf8 = function,\n    add_codepoints = function,\n    set_direction = function,\n    get_direction = function,\n    set_script = function,\n    ...(+9)\n},\n  options: LuaHarfBuzzOptions?\n)\n</code></pre> @param <code>font</code> - <code>Font</code> to use for shaping</p> <p>@param <code>buffer</code> - <code>Buffer</code> to shape</p> <p>Shape <code>buffer</code> using <code>font</code> turning its Unicode characters content to positioned glyphs.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: harfbuzz.lua#L22-L53</li> </ul>"},{"location":"globals/luaharfbuzz/#fields","title":"fields","text":""},{"location":"globals/luaharfbuzz/#luaharfbuzzblob","title":"luaharfbuzz.Blob","text":"<pre><code>luaharfbuzz.Blob : Blob {\n    new: function,\n    new_from_file: function,\n    get_length: function,\n    get_data: function,\n}\n</code></pre>"},{"location":"globals/luaharfbuzz/#luaharfbuzzface","title":"luaharfbuzz.Face","text":"<pre><code>luaharfbuzz.Face : HbFace {\n    new_from_blob: function,\n    new: function,\n    collect_unicodes: function,\n    get_glyph_count: function,\n    get_name: function,\n    get_table: function,\n    get_table_tags: function,\n    get_upem: function,\n    ot_color_has_palettes: function,\n    ot_color_palette_get_count: function,\n    ot_color_palette_get_colors: function,\n    ot_color_has_layers: function,\n    ...(+8)\n}\n</code></pre>"},{"location":"globals/luaharfbuzz/#luaharfbuzzfont","title":"luaharfbuzz.Font","text":"<pre><code>luaharfbuzz.Font : HbFont {\n    new: function,\n    get_scale: function,\n    set_scale: function,\n    get_h_extents: function,\n    get_v_extents: function,\n    get_glyph_extents: function,\n    get_glyph_name: function,\n    get_glyph_from_name: function,\n    get_glyph_h_advance: function,\n    get_glyph_v_advance: function,\n    get_nominal_glyph: function,\n    ot_color_glyph_get_png: function,\n    ...(+0)\n}\n</code></pre>"},{"location":"globals/luaharfbuzz/#luaharfbuzzbuffer","title":"luaharfbuzz.Buffer","text":"<pre><code>luaharfbuzz.Buffer : HbBuffer {\n    CLUSTER_LEVEL_MONOTONE_GRAPHEMES: integer = 0,\n    CLUSTER_LEVEL_MONOTONE_CHARACTERS: integer = 1,\n    CLUSTER_LEVEL_CHARACTERS: integer = 2,\n    CLUSTER_LEVEL_DEFAULT: integer = 0,\n    GLYPH_FLAG_UNSAFE_TO_BREAK: integer = 1,\n    GLYPH_FLAG_DEFINED: integer = 3,\n    new: function,\n    add_utf8: function,\n    add_codepoints: function,\n    set_direction: function,\n    get_direction: function,\n    set_script: function,\n    ...(+9)\n}\n</code></pre>"},{"location":"globals/luaharfbuzz/#luaharfbuzzfeature","title":"luaharfbuzz.Feature","text":"<pre><code>luaharfbuzz.Feature : HbFeature {\n    new: function,\n    __tostring: function,\n}\n</code></pre>"},{"location":"globals/luaharfbuzz/#luaharfbuzztag","title":"luaharfbuzz.Tag","text":"<pre><code>luaharfbuzz.Tag : HbTag {\n    new: function,\n    __to_string: function,\n    __eq: function,\n}\n</code></pre>"},{"location":"globals/luaharfbuzz/#luaharfbuzzscript","title":"luaharfbuzz.Script","text":"<pre><code>luaharfbuzz.Script : HbScript {\n    COMMON: string,\n    INHERITED: string,\n    UNKNOWN: string,\n    INVALID: string,\n    new: function,\n    from_iso15924_tag: function,\n    to_iso15924_tag: function,\n    __to_string: function,\n    __eq: function,\n}\n</code></pre>"},{"location":"globals/luaharfbuzz/#luaharfbuzzdirection","title":"luaharfbuzz.Direction","text":"<pre><code>luaharfbuzz.Direction : HbDirection {\n    LTR: integer?,\n    RTL: integer?,\n    TTB: integer?,\n    BTT: integer?,\n    new: function,\n    __to_string: function,\n    __eq: function,\n    is_valid: function,\n    is_horizontal: function,\n    is_vertical: function,\n    is_forward: function,\n    is_backward: function,\n    ...(+0)\n}\n</code></pre>"},{"location":"globals/luaharfbuzz/#luaharfbuzzlanguage","title":"luaharfbuzz.Language","text":"<pre><code>luaharfbuzz.Language : HbLanguage {\n    INVALID: HbLanguage,\n    new: function,\n    __tostring: function,\n    __eq: function,\n}\n</code></pre>"},{"location":"globals/luaharfbuzz/#luaharfbuzzunicode","title":"luaharfbuzz.unicode","text":"<pre><code>luaharfbuzz.unicode : unicode {\n    script: function,\n}\n</code></pre>"},{"location":"globals/luaharfbuzz/#luaharfbuzzot","title":"luaharfbuzz.ot","text":"<pre><code>luaharfbuzz.ot : ot {\n    NAME_ID_COPYRIGHT: string,\n    NAME_ID_FONT_FAMILY: string,\n    NAME_ID_FONT_SUBFAMILY: string,\n    NAME_ID_UNIQUE_ID: string,\n    NAME_ID_FULL_NAME: string,\n    NAME_ID_VERSION_STRING: string,\n    NAME_ID_POSTSCRIPT_NAME: string,\n    NAME_ID_TRADEMARK: string,\n    NAME_ID_MANUFACTURER: string,\n    NAME_ID_DESIGNER: string,\n    NAME_ID_DESCRIPTION: string,\n    NAME_ID_VENDOR_URL: string,\n    ...(+18)\n}\n</code></pre>"},{"location":"globals/luaharfbuzz/#luaharfbuzzvariation","title":"luaharfbuzz.Variation","text":"<pre><code>luaharfbuzz.Variation : HbVariation\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: luaharfbuzz.h#L21</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/mbox/","title":"global mbox","text":"<p>https://github.com/lunarmodules/luasocket/blob/master/src/mbox.lua</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/mbox/#methods","title":"methods","text":""},{"location":"globals/mbox/#mboxsplit_message","title":"mbox.split_message","text":"<pre><code>function mbox.split_message(message_s: string)\n -&gt; headers string\n -&gt; body string\n</code></pre>"},{"location":"globals/mbox/#mboxsplit_headers","title":"mbox.split_headers","text":"<pre><code>function mbox.split_headers(headers_s: string) -&gt; headers string[]\n</code></pre>"},{"location":"globals/mbox/#mboxparse_header","title":"mbox.parse_header","text":"<pre><code>function mbox.parse_header(header_s: string)\n -&gt; name string\n -&gt; value string\n</code></pre>"},{"location":"globals/mbox/#mboxparse_headers","title":"mbox.parse_headers","text":"<pre><code>function mbox.parse_headers(headers_s: string) -&gt; headers table&lt;string,string&gt;\n</code></pre>"},{"location":"globals/mbox/#mboxparse_from","title":"mbox.parse_from","text":"<pre><code>function mbox.parse_from(from: string)\n -&gt; name string\n -&gt; address string\n</code></pre>"},{"location":"globals/mbox/#mboxsplit_mbox","title":"mbox.split_mbox","text":"<pre><code>function mbox.split_mbox(mbox_s: string) -&gt; mbox string[]\n</code></pre>"},{"location":"globals/mbox/#mboxparse","title":"mbox.parse","text":"<pre><code>function mbox.parse(mbox_s: string) -&gt; mbox Message[]\n</code></pre>"},{"location":"globals/mbox/#mboxparse_message","title":"mbox.parse_message","text":"<pre><code>function mbox.parse_message(message_s: string) -&gt; message Message {\n    headers = table&lt;string,string&gt;,\n    body = string,\n}\n</code></pre>"},{"location":"globals/md5/","title":"global md5","text":"<p><code>md5</code>, by Roberto Ierusalimschy http://www.inf.puc-rio.br/~roberto/md5/md5-5/md5.html.</p> <p>This library offers basic cryptographic facilities for Lua 5.0: a hash (digest) function, an a pair crypt/decrypt.</p> <p>All functions are registered inside a table <code>md5</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/md5/#methods","title":"methods","text":""},{"location":"globals/md5/#md5sum","title":"md5.sum","text":"<pre><code>function md5.sum(message: string) -&gt;  string\n</code></pre> <p>Compute the MD5 message-digest of the string <code>message</code>.</p> <p>This function takes as input a message of arbitrary length and content and returns as output a 128-bit \"fingerprint\" (or \"message digest\") of the input.</p> <p>The output is formated as a binary string with 16 characters. It is conjectured that it is computationally infeasible to produce two messages having the same message digest, or to produce any message having a given pre-specified target message digest. (see RFC 1321)</p> <p>Example:</p> <pre><code>local function convert_to_hex(str)\n  return (str:gsub('.', function (c)\n      return string.format('%02X', string.byte(c))\n  end))\nend\nlocal hash = convert_to_hex(md5.sum('test'))\nassert(hash == '098F6BCD4621D373CADE4E832627B4F6')\n</code></pre>"},{"location":"globals/md5/#md5sumhexa","title":"md5.sumhexa","text":"<pre><code>function md5.sumhexa(message: string) -&gt;  string\n</code></pre> <p>@return  - for example <code>098f6bcd4621d373cade4e832627b4f6</code></p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Compute the MD5 lower case hexadecimal message-digest of the string <code>message</code>.</p> <p>Similar to <code>md5.sum()</code>, but returns its value as a string of 32 hexadecimal digits (lower case letters).</p> <p>Example:</p> <pre><code>local hash = md5.sumhexa('test')\nassert(hash == '098f6bcd4621d373cade4e832627b4f6')\n</code></pre>"},{"location":"globals/md5/#md5sumhexa_1","title":"md5.sumHEXA","text":"<pre><code>function md5.sumHEXA(message: string) -&gt;  string\n</code></pre> <p>@return  - for example <code>098F6BCD4621D373CADE4E832627B4F6</code></p> <p>Compute the MD5 upper case hexadecimal message-digest of the string <code>message</code>.</p> <p>Similar to <code>md5.sum()</code> but returns its value as a string of 32 hexadecimal digits (upper case letters).</p> <p>Example:</p> <pre><code>local hash = md5.sumHEXA('test')\nassert(hash == '098F6BCD4621D373CADE4E832627B4F6')\n</code></pre>"},{"location":"globals/md5/#md5crypt","title":"md5.crypt","text":"<p><pre><code>function md5.crypt(\n  message: string,\n  key: string,\n  seed: string?\n) -&gt; cyphertext string\n</code></pre> @param <code>message</code> - An arbitrary binary string to be encrypted.</p> <p>@param <code>key</code> - An arbitrary binary string to be used as a key.</p> <p>@param <code>seed</code> - An optional arbitrary binary string to be used as a seed. If no seed is provided, the function uses the result of <code>time()</code> as a seed.</p> <p>@return <code>cyphertext</code> - The cyphertext (as a binary string).</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Encrypt a string, using MD5 in CFB (Cipher-feedback mode).</p> <p><code>message</code> is an arbitrary binary string to be encrypted. <code>key</code> is an arbitrary binary string to be used as a key. <code>seed</code> is an arbitrary binary string to be used as a seed; Returns the cyphertext (as a binary string).</p> <p>If no seed is provided, the function uses the result of <code>os.time()</code> as a seed. It is recommended that you use different seeds for each message; the seed itself is not private, and should contain no private data, because it goes plain in the beginning of the encrypted message.</p> <p>The length of the cyphertext is the length of the message plus the length of the seed plus one.</p> <p>Example:</p> <pre><code>local function convert_to_hex(str)\n  return (str:gsub('.', function(c)\n      return string.format('%02X', string.byte(c))\n  end))\nend\n\nlocal result = convert_to_hex(md5.crypt('secret', '123', 'seed'))\nassert(result == '0473656564974C4C1B3848')\n</code></pre>"},{"location":"globals/md5/#md5decrypt","title":"md5.decrypt","text":"<p><pre><code>function md5.decrypt(\n  message: string,\n  key: string\n) -&gt; plaintext string\n</code></pre> @param <code>message</code> - message to be decrypted (this must be the result of a previous call to <code>crypt</code>).</p> <p>@param <code>key</code> - arbitrary binary string to be used as a key.</p> <p>@return <code>plaintext</code> - The plaintext.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Decrypt a string.</p> <p>The input <code>message</code> must be the result of a previous call to <code>crypt</code>. For any <code>message</code>, <code>key</code>, and <code>seed</code>, we have that</p> <pre><code>local encrypted = md5.crypt('message', '123', 'seed')\nlocal message = md5.decrypt(encrypted, '123')\nassert(message == 'message')\n</code></pre>"},{"location":"globals/md5/#md5exor","title":"md5.exor","text":"<p><pre><code>function md5.exor(\n  s1: string,\n  s2: string\n) -&gt;  string\n</code></pre> @param <code>s1</code> - arbitrary binary string.</p> <p>@param <code>s2</code> - arbitrary binary string with same length as <code>s1</code>.</p> <p>@return  - a binary string with same length as <code>s1</code> and <code>s2</code>, where each bit is the exclusive <code>or</code> of the corresponding bits in <code>s1</code>-<code>s2</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Do a bit-a-bit exclusive <code>or</code> of strings <code>s1</code> and <code>s2</code>.</p> <p>Both strings must have the same length, which will be also the length of the resulting string.</p> <p>Example:</p> <pre><code>assert(md5.exor('', '') == '')\nassert(md5.exor('alo alo', '\\0\\0\\0\\0\\0\\0\\0') == 'alo alo')\n</code></pre>"},{"location":"globals/mime/","title":"global mime","text":"<p>https://lunarmodules.github.io/luasocket/mime.html</p> <p>The <code>mime</code> namespace offers filters that apply and remove common content transfer encodings, such as Base64 and Quoted-Printable. It also provides functions to break text into lines and change the end-of-line convention. MIME is described mainly in RFC 2045, 2046, 2047, 2048, and 2049.</p> <p>All functionality provided by the MIME module follows the ideas presented in</p> <p>LTN012, Filters sources and sinks.</p> <p>To obtain the <code>mime</code> namespace, run:</p> <pre><code>-- loads the MIME module and everything it requires\nlocal mime = require(\"mime\")\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/mime/#methods","title":"methods","text":""},{"location":"globals/mime/#mimedecode","title":"mime.decode","text":"<pre><code>function mime.decode(name: (\"base64\"|\"quoted-printable\"))\n</code></pre> <p>Returns a filter that decodes data from a given transfer content encoding.</p> <p>In the Quoted-Printable case, the user can specify whether the data is textual or binary, by passing the <code>mode</code> strings \"<code>text</code>\" or \"<code>binary</code>\". <code>Mode</code> defaults to \"<code>text</code>\".</p>"},{"location":"globals/mime/#mimeencode","title":"mime.encode","text":"<pre><code>function mime.encode(\n  name: (\"base64\"|\"quoted-printable\"),\n  mode: (\"text\"|\"binary\")?\n)\n</code></pre> <p>Returns a filter that encodes data according to a given transfer content encoding.</p> <p>In the Quoted-Printable case, the user can specify whether the data is textual or binary, by passing the <code>mode</code> strings \"<code>text</code>\" or \"<code>binary</code>\". <code>Mode</code> defaults to \"<code>text</code>\".</p>"},{"location":"globals/mime/#mimenormalize","title":"mime.normalize","text":"<pre><code>function mime.normalize(marker: string)\n</code></pre> <p>Converts most common end-of-line markers to a specific given marker.</p> <p><code>Marker</code> is the new marker. It defaults to CRLF, the canonic end-of-line marker defined by the MIME standard.</p> <p>The function returns a filter that performs the conversion.</p> <p>Note: There is no perfect solution to this problem. Different end-of-line markers are an evil that will probably plague developers forever. This function, however, will work perfectly for text created with any of the most common end-of-line markers, i.e. the Mac OS (CR), the Unix (LF), or the DOS (CRLF) conventions. Even if the data has mixed end-of-line markers, the function will still work well, although it doesn't guarantee that the number of empty lines will be correct.</p>"},{"location":"globals/mime/#mimestuff","title":"mime.stuff","text":"<pre><code>function mime.stuff()\n</code></pre> <p>Creates and returns a filter that performs stuffing of SMTP messages.</p> <p>Note: The <code>smtp.send</code>function uses this filter automatically. You don't need to chain it with your source, or apply it to your message body.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/mime/#mimewrap","title":"mime.wrap","text":"<pre><code>function mime.wrap(\n  name: (\"text\"|\"base64\"|\"quoted-printable\"),\n  length: integer\n)\n</code></pre> <p>Returns a filter that breaks data into lines.</p> <p>The \"<code>text</code>\" line-wrap filter simply breaks text into lines by inserting CRLF end-of-line markers at appropriate positions. <code>Length</code> defaults 76. The \"<code>base64</code>\" line-wrap filter works just like the default \"<code>text</code>\" line-wrap filter with default length. The function can also wrap \"<code>quoted-printable</code>\" lines, taking care not to break lines in the middle of an escaped character. In that case, the line length is fixed at 76.</p> <p>For example, to create an encoding filter for the Quoted-Printable transfer content encoding of text data, do the following:</p> <pre><code>qp = ltn12.filter.chain(\n  mime.normalize(),\n  mime.encode(\"quoted-printable\"),\n  mime.wrap(\"quoted-printable\")\n)\n</code></pre> <p>Note: To break into lines with a different end-of-line convention, apply a normalization filter after the line break filter.</p>"},{"location":"globals/mime/#mimeb64","title":"mime.b64","text":"<pre><code>function mime.b64(\n  C: string,\n  D: string?\n)\n -&gt; A string\n -&gt; B string\n</code></pre> <p>Low-level filter to perform Base64 encoding.</p> <p>If <code>D</code> is <code>nil</code>, <code>A</code> is padded with the encoding of the remaining bytes of <code>C</code>.</p> <p>Note: The simplest use of this function is to encode a string into it's Base64 transfer content encoding. Notice the extra parenthesis around the call to <code>mime.b64</code>, to discard the second return value.</p> <pre><code>print((mime.b64(\"diego:password\")))\n--&amp;gt; ZGllZ286cGFzc3dvcmQ=\n</code></pre>"},{"location":"globals/mime/#mimedot","title":"mime.dot","text":"<p><pre><code>function mime.dot(\n  m: sub&lt;integer,\"`m`\"&gt;,\n  B: string?\n)\n -&gt; A string\n -&gt; n integer\n</code></pre> @param <code>m</code> - should tell the same, but for the previous chunk.</p> <p>Low-level filter to perform SMTP stuffing and enable transmission of messages containing the sequence \"CRLF.CRLF\".</p> <p>Note: The message body is defined to begin with an implicit CRLF. Therefore, to stuff a message correctly, the first <code>m</code> should have the value 2.</p> <pre><code>print((string.gsub(mime.dot(2, \".\\r\\nStuffing the message.\\r\\n.\\r\\n.\"), \"\\r\\n\", \"\\\\n\")))\n--&amp;gt; ..\\nStuffing the message.\\n..\\n..\n</code></pre> <p>Note: The <code>smtp.send</code>function uses this filter automatically. You don't need to apply it again.</p>"},{"location":"globals/mime/#mimeeol","title":"mime.eol","text":"<p><pre><code>function mime.eol(\n  C: integer,\n  D: string?,\n  marker: string\n)\n -&gt; A string\n -&gt; B string\n</code></pre> @param <code>C</code> - <code>C</code> is the ASCII value of the last character of the previous chunk, if it was a candidate for line break, or 0 otherwise.</p> <p>@param <code>marker</code> - <code>Marker</code> gives the new end-of-line marker and defaults to CRLF.</p> <p>@return <code>A</code> - <code>A</code> is the translated version of <code>D</code>.</p> <p>@return <code>B</code> - <code>B</code> is the same as <code>C</code>, but for the current chunk.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>A, B = mime.eol(C [, D, marker])</p> <p>Low-level filter to perform end-of-line marker translation. For each chunk, the function needs to know if the last character of the previous chunk could be part of an end-of-line marker or not. This is the context the function receives besides the chunk.  An updated version of the context is returned after each new chunk.</p> <pre><code>-- translates the end-of-line marker to UNIX\nunix = mime.eol(0, dos, \"\\n\")\n</code></pre>"},{"location":"globals/mime/#mimeqp","title":"mime.qp","text":"<p><pre><code>function mime.qp(\n  C: string,\n  D: string?,\n  marker: string\n)\n -&gt; A string\n -&gt; B string\n</code></pre> @param <code>D</code> - If <code>D</code> is <code>nil</code>, <code>A</code> is padded with the encoding of the remaining bytes of <code>C</code>.</p> <p>@param <code>marker</code> - Throughout encoding, occurrences of CRLF are replaced by the <code>marker</code>, which itself defaults to CRLF.</p> <p>@return <code>A</code> - <code>A</code> is the encoded version of the largest prefix of <code>C..D</code> that can be encoded unambiguously.</p> <p>@return <code>B</code> - <code>B</code> has the remaining bytes of <code>C..D</code>, before decoding.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Low-level filter to perform Quoted-Printable encoding.</p> <p>Note: The simplest use of this function is to encode a string into it's Quoted-Printable transfer content encoding. Notice the extra parenthesis around the call to <code>mime.qp</code>, to discard the second return value.</p> <pre><code>print((mime.qp(\"ma\ufffd\ufffd\")))\n--&amp;gt; ma=E7=E3=\n</code></pre>"},{"location":"globals/mime/#mimeqpwrp","title":"mime.qpwrp","text":"<p><pre><code>function mime.qpwrp(\n  n: integer,\n  B: string?,\n  length: any\n)\n -&gt; A string\n -&gt; m integer\n</code></pre> @param <code>n</code> - <code>n</code> should tell how many bytes are left for the first line of <code>B</code></p> <p>@param <code>length</code> - broken into lines of at most <code>length</code> bytes (defaults to 76).</p> <p>@return <code>A</code> - <code>A</code> is a copy of <code>B</code>, broken into lines of at most <code>length</code> bytes (defaults to 76).</p> <p>@return <code>m</code> - returns the number of bytes left in the last line of <code>A</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Low-level filter to break Quoted-Printable text into lines.</p> <p>Note: Besides breaking text into lines, this function makes sure the line breaks don't fall in the middle of an escaped character combination. Also, this function only breaks lines that are bigger than <code>length</code> bytes.</p>"},{"location":"globals/mime/#mimeunb64","title":"mime.unb64","text":"<pre><code>function mime.unb64(\n  C: string,\n  D: string?\n)\n -&gt; A string\n -&gt; B string\n</code></pre> <p>@return <code>A</code> - <code>A</code> is the decoded version of the largest prefix of <code>C..D</code> that can be decoded unambiguously.</p> <p>@return <code>B</code> - <code>B</code> has the remaining bytes of <code>C..D</code>, before decoding.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Low-level filter to perform Base64 decoding.</p> <p>If <code>D</code> is <code>nil</code>, <code>A</code> is the empty string and <code>B</code> returns whatever couldn't be decoded.</p> <p>Note: The simplest use of this function is to decode a string from it's Base64 transfer content encoding. Notice the extra parenthesis around the call to <code>mime.unqp</code>, to discard the second return value.</p> <pre><code>print((mime.unb64(\"ZGllZ286cGFzc3dvcmQ=\")))\n--&amp;gt; diego:password\n</code></pre>"},{"location":"globals/mime/#mimeunqp","title":"mime.unqp","text":"<pre><code>function mime.unqp(\n  C: string,\n  D: string?\n)\n -&gt; A string\n -&gt; B string\n</code></pre> <p>@return <code>A</code> - <code>A</code> is the decoded version of the largest prefix of <code>C..D</code> that can be decoded unambiguously. If <code>D</code> is <code>nil</code>, <code>A</code> is augmented with the encoding of the remaining bytes of <code>C</code>.</p> <p>@return <code>B</code> - <code>B</code> has the remaining bytes of <code>C..D</code>, before decoding.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Low-level filter to remove the Quoted-Printable transfer content encoding from data.</p> <p>Note: The simplest use of this function is to decode a string from it's Quoted-Printable transfer content encoding. Notice the extra parenthesis around the call to <code>mime.unqp</code>, to discard the second return value.</p> <pre><code>print((mime.qp(\"ma=E7=E3=\")))\n--&amp;gt; ma\ufffd\ufffd\n</code></pre>"},{"location":"globals/mime/#mimewrp","title":"mime.wrp","text":"<p><pre><code>function mime.wrp(\n  n: integer,\n  B: string?,\n  length: any\n)\n -&gt; A string\n -&gt; m integer\n</code></pre> @param <code>n</code> - <code>n</code> should tell how many bytes are left for the first line of <code>B</code></p> <p>@param <code>length</code> - broken into lines of at most <code>length</code> bytes (defaults to 76).</p> <p>@return <code>A</code> - <code>A</code> is a copy of <code>B</code>, broken into lines of at most <code>length</code> bytes (defaults to 76).</p> <p>@return <code>m</code> - returns the number of bytes left in the last line of <code>A</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Low-level filter to break text into lines with CRLF marker. Text is assumed to be in the <code>normalize</code> form.</p> <p>Note: This function only breaks lines that are bigger than <code>length</code> bytes. The resulting line length does not include the CRLF marker.</p>"},{"location":"globals/mplib/","title":"global mplib","text":""},{"location":"globals/mplib/#methods","title":"methods","text":""},{"location":"globals/mplib/#mplibnew","title":"mplib.new","text":"<pre><code>function mplib.new(args: MpArguments?) -&gt;  MpInstance {\n    statistics = function,\n    execute = function,\n    finish = function,\n    char_width = function,\n    char_height = function,\n    char_depth = function,\n    get_boolean = function,\n    get_numeric = function,\n    get_string = function,\n    get_path = function,\n    solve_path = function,\n}\n</code></pre> <p>Create a new metapost instance.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-graphics.tex#L381-L385</li> <li>Corresponding C source code: lmplib.c#L532-L627</li> </ul>"},{"location":"globals/mplib/#mplibstatistics","title":"mplib.statistics","text":"<pre><code>function mplib.statistics(mp: MpInstance {\n    statistics = function,\n    execute = function,\n    finish = function,\n    char_width = function,\n    char_height = function,\n    char_depth = function,\n    get_boolean = function,\n    get_numeric = function,\n    get_string = function,\n    get_path = function,\n    solve_path = function,\n}) -&gt;  MpStats {\n    main_memory = integer,\n    hash_size = integer,\n    param_size = integer,\n    max_in_open = integer,\n}\n</code></pre> <p>Return some statistics for this metapost instance.</p> <p>This function returns the vital statistics for an MPlib instance.</p> <p>Note that in the new version of MPlib, this is informational only. The objects are all allocated dynamically, so there is no chance of running out of space unless the available system memory is exhausted.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-graphics.tex#L470-L482</li> <li>Corresponding C source code: lmplib.c#L771-L792</li> </ul>"},{"location":"globals/mplib/#mplibexecute","title":"mplib.execute","text":"<pre><code>function mplib.execute(\n  mp: MpInstance {\n    statistics = function,\n    execute = function,\n    finish = function,\n    char_width = function,\n    char_height = function,\n    char_depth = function,\n    get_boolean = function,\n    get_numeric = function,\n    get_string = function,\n    get_path = function,\n    solve_path = function,\n},\n  code: string\n) -&gt;  MpResult {\n    log = string?,\n    term = string?,\n    error = string?,\n    status = MpResultStatus,\n    fig = MpFig[]?,\n}\n</code></pre> <p>Execute metapost code in the instance.</p> <p>You can ask the MetaPost interpreter to run a chunk of code by calling mp.execute()</p> <p>for various bits of MetaPost language input. Be sure to check the <code>rettable.status</code> (see below) because when a fatal MetaPost error occurs the MPlib instance will become unusable thereafter.</p> <p>Generally speaking, it is best to keep your chunks small, but beware that all chunks have to obey proper syntax, like each of them is a small file. For instance, you cannot split a single statement over multiple chunks.</p> <p>In contrast with the normal stand alone <code>mpost</code> command, there is <code>no</code> implied \u201cinput\u201d at the start of the first chunk.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-graphics.tex#L488-L507</li> <li>Corresponding C source code: lmplib.c#L692-L711</li> </ul>"},{"location":"globals/mplib/#mplibfinish","title":"mplib.finish","text":"<pre><code>function mplib.finish(mp: MpInstance {\n    statistics = function,\n    execute = function,\n    finish = function,\n    char_width = function,\n    char_height = function,\n    char_depth = function,\n    get_boolean = function,\n    get_numeric = function,\n    get_string = function,\n    get_path = function,\n    solve_path = function,\n}) -&gt;  MpResult {\n    log = string?,\n    term = string?,\n    error = string?,\n    status = MpResultStatus,\n    fig = MpFig[]?,\n}\n</code></pre> <p>Finish a metapost instance.</p> <p>If for some reason you want to stop using an MPlib instance while processing is not yet actually done, you can call <code>finish</code>. Eventually, used memory will be freed and open files will be closed by the Lua garbage collector, but an explicit <code>finish</code> is the only way to capture the final part of the output streams.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L713-L728</li> </ul>"},{"location":"globals/mplib/#mplibfields","title":"mplib.fields","text":"<pre><code>function mplib.fields(obj: MpGraphicObject {\n    type = string,\n}) -&gt;  string[]\n</code></pre> <p>Get the list of accessible values for a particular object.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L1548-L1591</li> </ul>"},{"location":"globals/mplib/#mplibpen_info","title":"mplib.pen_info","text":"<pre><code>function mplib.pen_info(obj: MpGraphicObject {\n    type = string,\n}) -&gt;  PenInfo?\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L1474-L1539</li> </ul>"},{"location":"globals/mplib/#mplibchar_width","title":"mplib.char_width","text":"<pre><code>function mplib.char_width(\n  mp: MpInstance {\n    statistics = function,\n    execute = function,\n    finish = function,\n    char_width = function,\n    char_height = function,\n    char_depth = function,\n    get_boolean = function,\n    get_numeric = function,\n    get_string = function,\n    get_path = function,\n    solve_path = function,\n},\n  fontname: string,\n  char: integer\n) -&gt; width number\n</code></pre> <p>@return <code>width</code> - AFM units</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Report a character's width.</p> <p>This function finds the size of a glyph in a defined font. The <code>fontname</code> is the same name as the argument to <code>infont</code>; the <code>char</code> is a glyph id in the range 0 to 255; the returned <code>width</code> is in AFM units.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L748-L751</li> </ul>"},{"location":"globals/mplib/#mplibchar_height","title":"mplib.char_height","text":"<pre><code>function mplib.char_height(\n  mp: MpInstance {\n    statistics = function,\n    execute = function,\n    finish = function,\n    char_width = function,\n    char_height = function,\n    char_depth = function,\n    get_boolean = function,\n    get_numeric = function,\n    get_string = function,\n    get_path = function,\n    solve_path = function,\n},\n  fontname: string,\n  char: integer\n) -&gt; height number\n</code></pre> <p>@return <code>height</code> - AFM units</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Report a character's height.</p> <p>This function finds the size of a glyph in a defined font. The <code>fontname</code> is the same name as the argument to <code>infont</code>; the <code>char</code> is a glyph id in the range 0 to 255; the returned <code>height</code> is in AFM units.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L758-L761</li> </ul>"},{"location":"globals/mplib/#mplibchar_depth","title":"mplib.char_depth","text":"<pre><code>function mplib.char_depth(\n  mp: MpInstance {\n    statistics = function,\n    execute = function,\n    finish = function,\n    char_width = function,\n    char_height = function,\n    char_depth = function,\n    get_boolean = function,\n    get_numeric = function,\n    get_string = function,\n    get_path = function,\n    solve_path = function,\n},\n  fontname: string,\n  char: integer\n) -&gt; depth number\n</code></pre> <p>@return <code>depth</code> - AFM units</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Report a character's depth.</p> <p>This function finds the size of a glyph in a defined font. The <code>fontname</code> is the same name as the argument to <code>infont</code>; the <code>char</code> is a glyph id in the range 0 to 255; the returned <code>depth</code> is in AFM units.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L753-L756</li> </ul>"},{"location":"globals/mplib/#mplibget_boolean","title":"mplib.get_boolean","text":"<pre><code>function mplib.get_boolean(\n  mp: MpInstance {\n    statistics = function,\n    execute = function,\n    finish = function,\n    char_width = function,\n    char_height = function,\n    char_depth = function,\n    get_boolean = function,\n    get_numeric = function,\n    get_string = function,\n    get_path = function,\n    solve_path = function,\n},\n  name: string\n) -&gt; value boolean\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L497-L510</li> </ul>"},{"location":"globals/mplib/#mplibget_numeric","title":"mplib.get_numeric","text":"<pre><code>function mplib.get_numeric(\n  mp: MpInstance {\n    statistics = function,\n    execute = function,\n    finish = function,\n    char_width = function,\n    char_height = function,\n    char_depth = function,\n    get_boolean = function,\n    get_numeric = function,\n    get_string = function,\n    get_path = function,\n    solve_path = function,\n},\n  name: string\n) -&gt; value integer\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L482-L495</li> </ul>"},{"location":"globals/mplib/#mplibget_string","title":"mplib.get_string","text":"<pre><code>function mplib.get_string(\n  mp: MpInstance {\n    statistics = function,\n    execute = function,\n    finish = function,\n    char_width = function,\n    char_height = function,\n    char_depth = function,\n    get_boolean = function,\n    get_numeric = function,\n    get_string = function,\n    get_path = function,\n    solve_path = function,\n},\n  name: string\n) -&gt; value string\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L512-L528</li> </ul>"},{"location":"globals/mplib/#mplibget_path","title":"mplib.get_path","text":"<pre><code>function mplib.get_path(\n  mp: MpInstance {\n    statistics = function,\n    execute = function,\n    finish = function,\n    char_width = function,\n    char_height = function,\n    char_depth = function,\n    get_boolean = function,\n    get_numeric = function,\n    get_string = function,\n    get_path = function,\n    solve_path = function,\n},\n  name: string\n) -&gt; value table\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L1649-L1693</li> </ul>"},{"location":"globals/mplib/#mplibversion","title":"mplib.version","text":"<pre><code>function mplib.version() -&gt; version string\n</code></pre> <p>@return <code>version</code> - for example <code>2.02</code></p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the version of the MetaPost library.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L763-L769</li> </ul>"},{"location":"globals/mplib/#mplibsolve_path","title":"mplib.solve_path","text":"<pre><code>function mplib.solve_path(\n  mp: MpInstance {\n    statistics = function,\n    execute = function,\n    finish = function,\n    char_width = function,\n    char_height = function,\n    char_depth = function,\n    get_boolean = function,\n    get_numeric = function,\n    get_string = function,\n    get_path = function,\n    solve_path = function,\n},\n  coordinates: table,\n  cyclic: boolean\n)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L978-L1195</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/node/","title":"global node","text":"<p>The node library contains functions that facilitate dealing with (lists of) nodes and their values. They allow you to create, alter, copy, delete, and insert LuaTEX node objects, the core objects within the typesetter.</p> <p>LuaTEX nodes are represented in Lua as userdata with the metadata type <code>luatex.node.</code> The various parts within a node can be accessed using named fields.</p> <p>Each node has at least the three fields next, id, and subtype:</p> <ul> <li>The next field returns the userdata object for the next node in a linked list of nodes, or nil, if there is no next node.</li> <li>The id indicates TEX\u2019s \u2018node type\u2019. The field id has a numeric value for efficiency reasons, but some of the library functions also accept a string value instead of id.</li> <li>The subtype is another number. It often gives further information about a node of a particular id, but it is most important when dealing with \u2018whatsits\u2019, because they are differentiated solely based on their subtype.</li> </ul> <p>The other available fields depend on the id (and for \u2018whatsits\u2019, the subtype) of the node.</p> <p>Support for unset (alignment) nodes is partial: they can be queried and modified from Lua code, but not created.</p> <p>Nodes can be compared to each other, but: you are actually comparing indices into the node memory. This means that equality tests can only be trusted under very limited conditions. It will not work correctly in any situation where one of the two nodes has been freed and/or reallocated: in that case, there will be false positives.</p> <p>At the moment, memory management of nodes should still be done explicitly by the user. Nodes are not \u2018seen\u2019 by the Lua garbage collector, so you have to call the node freeing functions yourself when you are no longer in need of a node (list). Nodes form linked lists without reference counting, so you have to be careful that when control returns back to LuaTEX itself, you have not deleted nodes that are still referenced from a next pointer elsewhere, and that you did not create nodes that are referenced more than once. Normally the setters and getters handle this for you.</p> <p>There are statistics available with regards to the allocated node memory, which can be handy for tracing.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/node/#methods","title":"methods","text":""},{"location":"globals/node/#nodeeffective_glue","title":"node.effective_glue","text":"<p><pre><code>function node.effective_glue(\n  glue: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  parent: (HlistNode|VlistNode),\n  round: boolean?\n) -&gt;  (number|integer)?\n</code></pre> @param <code>round</code> - When you pass true as third argument the value will be rounded.</p> <p>Return the effective width of a glue node.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L8473-L8503</li> </ul>"},{"location":"globals/node/#nodeuses_font","title":"node.uses_font","text":"<pre><code>function node.uses_font(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  font: integer\n) -&gt;  boolean\n</code></pre> <p>Return <code>true</code> when a glyph or disc node references that font.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L7639-L7655</li> </ul>"},{"location":"globals/node/#nodeis_node","title":"node.is_node","text":"<pre><code>function node.is_node(item: any) -&gt; t (false|integer)\n</code></pre> <p>Return a number (the internal index of the node) if the argument is a userdata object of type <code>node</code> and <code>false</code> when no node is passed.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-nodes.tex#L1199-L1211</li> <li>Corresponding C source code: lnodelib.c#L8295-L8303</li> </ul>"},{"location":"globals/node/#nodetypes","title":"node.types","text":"<pre><code>function node.types() -&gt;  table&lt;integer,string&gt;\n</code></pre> <p>Return a table that maps node id numbers to node type strings, providing an overview of the possible top-level <code>id</code> types.</p> <p>Example:</p> <pre><code>assert.same(\n  node.types(),\n  {\n    [0] = \"hlist\",\n    [1] = \"vlist\",\n    [2] = \"rule\",\n    [3] = \"ins\",\n    [4] = \"mark\",\n    [5] = \"adjust\",\n    [6] = \"boundary\",\n    [7] = \"disc\",\n    [8] = \"whatsit\",\n    [9] = \"local_par\",\n    [10] = \"dir\",\n    [11] = \"math\",\n    [12] = \"glue\",\n    [13] = \"kern\",\n    [14] = \"penalty\",\n    [15] = \"unset\",\n    [16] = \"style\",\n    [17] = \"choice\",\n    [18] = \"noad\",\n    [19] = \"radical\",\n    [20] = \"fraction\",\n    [21] = \"accent\",\n    [22] = \"fence\",\n    [23] = \"math_char\",\n    [24] = \"sub_box\",\n    [25] = \"sub_mlist\",\n    [26] = \"math_text_char\",\n    [27] = \"delim\",\n    [28] = \"margin_kern\",\n    [29] = \"glyph\",\n    [30] = \"align_record\",\n    [31] = \"pseudo_file\",\n    [32] = \"pseudo_line\",\n    [33] = \"page_insert\",\n    [34] = \"split_insert\",\n    [35] = \"expr_stack\",\n    [36] = \"nested_list\",\n    [37] = \"span\",\n    [38] = \"attribute\",\n    [39] = \"glue_spec\",\n    [40] = \"attribute_list\",\n    [41] = \"temp\",\n    [42] = \"align_stack\",\n    [43] = \"movement_stack\",\n    [44] = \"if_stack\",\n    [45] = \"unhyphenated\",\n    [46] = \"hyphenated\",\n    [47] = \"delta\",\n    [48] = \"passive\",\n    [49] = \"shape\",\n  }\n)\n</code></pre> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-nodes.tex#L1218-L1224</li> <li>Corresponding C source code: lnodelib.c#L3066-L3069</li> </ul>"},{"location":"globals/node/#nodewhatsits","title":"node.whatsits","text":"<pre><code>function node.whatsits() -&gt;  table&lt;integer,string&gt;\n</code></pre> <p>Provides a table of subtype mappings.</p> <p>TeX\u2019s \u2018whatsits\u2019 all have the same id. The various subtypes are defined by their subtype fields.</p> <p>Example:</p> <pre><code>assert.same(node.whatsits(), {\n  [0] = \"open\",\n  [1] = \"write\",\n  [2] = \"close\",\n  [3] = \"special\",\n  [4] = \"late_special\",\n  [7] = \"save_pos\",\n  [8] = \"late_lua\",\n  [9] = \"user_defined\",\n  [16] = \"pdf_literal\",\n  [17] = \"pdf_late_literal\",\n  [18] = \"pdf_refobj\",\n  [19] = \"pdf_annot\",\n  [20] = \"pdf_start_link\",\n  [21] = \"pdf_end_link\",\n  [22] = \"pdf_dest\",\n  [23] = \"pdf_action\",\n  [24] = \"pdf_thread\",\n  [25] = \"pdf_start_thread\",\n  [26] = \"pdf_end_thread\",\n  [27] = \"pdf_thread_data\",\n  [28] = \"pdf_link_data\",\n  [29] = \"pdf_colorstack\",\n  [30] = \"pdf_setmatrix\",\n  [31] = \"pdf_save\",\n  [32] = \"pdf_restore\",\n  [33] = \"pdf_link_state\",\n})\n</code></pre> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-nodes.tex#L1226-L1233</li> <li>Corresponding C source code: lnodelib.c#L3073-L3076</li> </ul>"},{"location":"globals/node/#nodeid","title":"node.id","text":"<pre><code>function node.id(type: NodeTypeName) -&gt;  NodeTypeId\n</code></pre> <p>Convert a single type name to its internal numeric representation.</p> <p>Example:</p> <p><pre><code>local function equals(name, id)\n  assert.equals(node.id(name), id)\nend\n\nequals(\"hlist\", 0)\nequals(\"vlist\", 1)\nequals(\"rule\", 2)\nequals(\"ins\", 3)\nequals(\"mark\", 4)\nequals(\"adjust\", 5)\nequals(\"boundary\", 6)\nequals(\"disc\", 7)\nequals(\"whatsit\", 8)\nequals(\"local_par\", 9)\nequals(\"dir\", 10)\nequals(\"math\", 11)\nequals(\"glue\", 12)\nequals(\"kern\", 13)\nequals(\"penalty\", 14)\nequals(\"unset\", 15)\nequals(\"style\", 16)\nequals(\"choice\", 17)\nequals(\"noad\", 18)\nequals(\"radical\", 19)\nequals(\"fraction\", 20)\nequals(\"accent\", 21)\nequals(\"fence\", 22)\nequals(\"math_char\", 23)\nequals(\"sub_box\", 24)\nequals(\"sub_mlist\", 25)\nequals(\"math_text_char\", 26)\nequals(\"delim\", 27)\nequals(\"margin_kern\", 28)\nequals(\"glyph\", 29)\nequals(\"align_record\", 30)\nequals(\"pseudo_file\", 31)\nequals(\"pseudo_line\", 32)\nequals(\"page_insert\", 33)\nequals(\"split_insert\", 34)\nequals(\"expr_stack\", 35)\nequals(\"nested_list\", 36)\nequals(\"span\", 37)\nequals(\"attribute\", 38)\nequals(\"glue_spec\", 39)\nequals(\"attribute_list\", 40)\nequals(\"temp\", 41)\nequals(\"align_stack\", 42)\nequals(\"movement_stack\", 43)\nequals(\"if_stack\", 44)\nequals(\"unhyphenated\", 45)\nequals(\"hyphenated\", 46)\nequals(\"delta\", 47)\nequals(\"passive\", 48)\nequals(\"shape\", 49)\n</code></pre> Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-nodes.tex#L1235-L1244</li> <li>Corresponding C source code: lnodelib.c#L470-L483</li> </ul>"},{"location":"globals/node/#nodetype","title":"node.type","text":"<p><pre><code>function node.type(n: NodeTypeId) -&gt;  (NodeTypeName|\"node\")?\n</code></pre> @param <code>n</code> - The numeric node type id.</p> <p>Convert an internal numeric node type representation to an external node type string.</p> <p>If the argument is a number, then the type function converts an internal numeric representation to an external string representation. Otherwise, it will return the string <code>node</code> if the object represents a node, and <code>nil</code> otherwise.</p> <pre><code>assert.equals(node.type(29), \"glyph\")\nassert.equals(node.type(node.id(\"glyph\")), \"glyph\")\nassert.is_nil(node.type(\"xxx\"))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L1993-L2009</li> </ul>"},{"location":"globals/node/#nodesubtype","title":"node.subtype","text":"<pre><code>function node.subtype(whatsit_type_name: WhatsitTypeName) -&gt; whatsit_type_id WhatsitTypeId\n</code></pre> <p>Convert a single <code>whatsit</code> name to its internal numeric representation (subtype).</p> <p>Example:</p> <pre><code>local function equals(name, id)\n  assert.equals(node.subtype(name), id)\nend\n\nequals(\"open\", 0)\nequals(\"write\", 1)\nequals(\"close\", 2)\nequals(\"special\", 3)\nequals(\"late_special\", 4)\nequals(\"save_pos\", 7)\nequals(\"late_lua\", 8)\nequals(\"user_defined\", 9)\nequals(\"pdf_literal\", 16)\nequals(\"pdf_late_literal\", 17)\nequals(\"pdf_refobj\", 18)\nequals(\"pdf_annot\", 19)\nequals(\"pdf_start_link\", 20)\nequals(\"pdf_end_link\", 21)\nequals(\"pdf_dest\", 22)\nequals(\"pdf_action\", 23)\nequals(\"pdf_thread\", 24)\nequals(\"pdf_start_thread\", 25)\nequals(\"pdf_end_thread\", 26)\nequals(\"pdf_thread_data\", 27)\nequals(\"pdf_link_data\", 28)\nequals(\"pdf_colorstack\", 29)\nequals(\"pdf_setmatrix\", 30)\nequals(\"pdf_save\", 31)\nequals(\"pdf_restore\", 32)\nequals(\"pdf_link_state\", 33)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L1976-L1989</li> </ul>"},{"location":"globals/node/#nodefields","title":"node.fields","text":"<pre><code>function node.fields(\n  id: NodeTypeId,\n  subtype: number?\n) -&gt;  { [number]: string }\n</code></pre> <p>Return an array of valid field names for a particular type of node.</p> <p>Example:</p> <pre><code>local types = {}\nfor type_id, type in pairs(node.types()) do\n  if type_id ~= 8 then\n    types[type] = {}\n    for field_id, field in pairs(node.fields(type_id)) do\n      types[type][field_id] = field\n    end\n  end\nend\n\nassert.same(types, {\n  accent = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"nucleus\",\n    \"sub\",\n    \"sup\",\n    \"accent\",\n    \"bot_accent\",\n    \"top_accent\",\n    \"overlay_accent\",\n    \"fraction\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  adjust = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"head\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  align_record = { \"id\", \"subtype\", [-1] = \"prev\", [0] = \"next\" },\n  align_stack = { \"id\", \"subtype\", [-1] = \"prev\", [0] = \"next\" },\n  attribute = { \"id\", \"number\", \"value\", [0] = \"next\" },\n  attribute_list = { \"id\", [0] = \"next\" },\n  boundary = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"value\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  choice = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"display\",\n    \"text\",\n    \"script\",\n    \"scriptscript\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  delim = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"small_fam\",\n    \"small_char\",\n    \"large_fam\",\n    \"large_char\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  delta = { \"id\", \"subtype\", [-1] = \"prev\", [0] = \"next\" },\n  dir = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"dir\",\n    \"level\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  disc = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"pre\",\n    \"post\",\n    \"replace\",\n    \"penalty\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  expr_stack = { \"id\", \"subtype\", [-1] = \"prev\", [0] = \"next\" },\n  fence = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"delim\",\n    \"italic\",\n    \"height\",\n    \"depth\",\n    \"options\",\n    \"class\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  fraction = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"width\",\n    \"num\",\n    \"denom\",\n    \"left\",\n    \"right\",\n    \"middle\",\n    \"fam\",\n    \"options\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  glue = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"leader\",\n    \"width\",\n    \"stretch\",\n    \"shrink\",\n    \"stretch_order\",\n    \"shrink_order\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  glue_spec = {\n    \"id\",\n    \"width\",\n    \"stretch\",\n    \"shrink\",\n    \"stretch_order\",\n    \"shrink_order\",\n    [0] = \"next\",\n  },\n  glyph = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"char\",\n    \"font\",\n    \"lang\",\n    \"left\",\n    \"right\",\n    \"uchyph\",\n    \"components\",\n    \"xoffset\",\n    \"yoffset\",\n    \"width\",\n    \"height\",\n    \"depth\",\n    \"expansion_factor\",\n    \"data\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  hlist = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"width\",\n    \"depth\",\n    \"height\",\n    \"dir\",\n    \"shift\",\n    \"glue_order\",\n    \"glue_sign\",\n    \"glue_set\",\n    \"head\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  hyphenated = { \"id\", \"subtype\", [-1] = \"prev\", [0] = \"next\" },\n  if_stack = { \"id\", \"subtype\", [-1] = \"prev\", [0] = \"next\" },\n  ins = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"cost\",\n    \"depth\",\n    \"height\",\n    \"spec\",\n    \"head\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  kern = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"kern\",\n    \"expansion_factor\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  local_par = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"pen_inter\",\n    \"pen_broken\",\n    \"dir\",\n    \"box_left\",\n    \"box_left_width\",\n    \"box_right\",\n    \"box_right_width\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  margin_kern = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"width\",\n    \"glyph\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  mark = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"class\",\n    \"mark\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  math = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"surround\",\n    \"width\",\n    \"stretch\",\n    \"shrink\",\n    \"stretch_order\",\n    \"shrink_order\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  math_char = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"fam\",\n    \"char\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  math_text_char = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"fam\",\n    \"char\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  movement_stack = { \"id\", \"subtype\", [-1] = \"prev\", [0] = \"next\" },\n  nested_list = { \"id\", \"subtype\", [-1] = \"prev\", [0] = \"next\" },\n  noad = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"nucleus\",\n    \"sub\",\n    \"sup\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  page_insert = {\n    \"id\",\n    \"subtype\",\n    \"height\",\n    \"last_ins_ptr\",\n    \"best_ins_ptr\",\n    \"width\",\n    \"stretch\",\n    \"shrink\",\n    \"stretch_order\",\n    \"shrink_order\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  passive = { \"id\", \"subtype\", [-1] = \"prev\", [0] = \"next\" },\n  penalty = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"penalty\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  pseudo_file = { \"id\", \"subtype\", [-1] = \"prev\", [0] = \"next\" },\n  pseudo_line = { \"id\", \"subtype\", [-1] = \"prev\", [0] = \"next\" },\n  radical = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"nucleus\",\n    \"sub\",\n    \"sup\",\n    \"left\",\n    \"degree\",\n    \"width\",\n    \"options\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  rule = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"width\",\n    \"depth\",\n    \"height\",\n    \"dir\",\n    \"index\",\n    \"left\",\n    \"right\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  shape = { \"id\", \"subtype\", [-1] = \"prev\", [0] = \"next\" },\n  span = { \"id\", \"subtype\", [-1] = \"prev\", [0] = \"next\" },\n  split_insert = {\n    \"id\",\n    \"subtype\",\n    \"height\",\n    \"last_ins_ptr\",\n    \"best_ins_ptr\",\n    \"broken_ptr\",\n    \"broken_ins\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  style = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"style\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  sub_box = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"head\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  sub_mlist = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"head\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  temp = { \"id\", \"subtype\", [-1] = \"prev\", [0] = \"next\" },\n  unhyphenated = { \"id\", \"subtype\", [-1] = \"prev\", [0] = \"next\" },\n  unset = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"width\",\n    \"depth\",\n    \"height\",\n    \"dir\",\n    \"shrink\",\n    \"glue_order\",\n    \"glue_sign\",\n    \"stretch\",\n    \"span\",\n    \"head\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n  vlist = {\n    \"id\",\n    \"subtype\",\n    \"attr\",\n    \"width\",\n    \"depth\",\n    \"height\",\n    \"dir\",\n    \"shift\",\n    \"glue_order\",\n    \"glue_sign\",\n    \"glue_set\",\n    \"head\",\n    [-1] = \"prev\",\n    [0] = \"next\",\n  },\n})\n</code></pre> <p>If you want to get the valid fields for a \u201cwhatsit\u201d, you have to supply the second argument also. In other cases, any given second argument will be silently ignored.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L3080-L3115</li> </ul>"},{"location":"globals/node/#nodehas_field","title":"node.has_field","text":"<pre><code>function node.has_field(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  field: string\n) -&gt; t boolean\n</code></pre> <p>Return a boolean that is only <code>true</code> if <code>n</code> is actually a node, and it has the field.</p> <p>Example:</p> <pre><code>local glyph = node.new(\"glyph\")\n\nfor _, field in ipairs({\n  \"prev\",\n  \"next\",\n  \"id\",\n  \"subtype\",\n  \"attr\",\n  \"char\",\n  \"font\",\n  \"lang\",\n  \"left\",\n  \"right\",\n  \"uchyph\",\n  \"components\",\n  \"xoffset\",\n  \"yoffset\",\n  \"width\",\n  \"height\",\n  \"depth\",\n  \"expansion_factor\",\n  \"data\",\n}) do\n  assert.is_true(node.has_field(glyph, field))\nend\n\n  assert.is_false(node.has_field(glyph, \"xxx\"))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L2993-L3000</li> </ul> <p>@see node.direct.has_field</p>"},{"location":"globals/node/#nodenew","title":"node.new","text":"<pre><code>function node.new(\n  id: (integer|NodeTypeName),\n  subtype: (integer|string)?\n) -&gt;  Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n</code></pre> <p>Create a new node.</p> <p>All its fields are initialized to either zero or <code>nil</code> except for <code>id</code> and <code>subtype</code>. Instead of numbers you can also use strings (names). If you create a new <code>whatsit</code> node the second argument is required. As with all node functions, this function creates a node at the TeX level.</p> <p>Example:</p> <pre><code>for type_id, node_type in pairs(node.types()) do\n  if node_type == \"whatsit\" then\n    for subtype_id, subtype in pairs(node.whatsits()) do\n      local n = node.new(node_type, subtype)\n      assert.equals(n.id, type_id)\n      assert.equals(n.subtype, subtype_id)\n    end\n  else\n    local n = node.new(node_type)\n    assert.equals(n.id, type_id)\n  end\nend\n</code></pre> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-nodes.tex#L1299-L1314</li> <li>Corresponding C source code: lnodelib.c#L2055-L2060</li> </ul> <p>@see node.direct.new</p>"},{"location":"globals/node/#nodeflush_node","title":"node.flush_node","text":"<pre><code>function node.flush_node(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n})\n</code></pre> <p>Free the TeX memory allocated for the specified node. and return nothing.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L2113-L2122</li> </ul>"},{"location":"globals/node/#nodeflush_list","title":"node.flush_list","text":"<pre><code>function node.flush_list(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n})\n</code></pre> <p>Free the TeX memory allocated for a list of nodes.</p> <p>Be careful: no checks are done on whether any of these nodes is still pointed to from a register or some <code>next</code> field: it is up to you to make sure that the internal data structures remain correct.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L2137-L2146</li> </ul>"},{"location":"globals/node/#nodecopy","title":"node.copy","text":"<pre><code>function node.copy(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt; m Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n</code></pre> <p>Create a deep copy of node <code>n</code>, including all nested lists as in the case of a <code>hlist</code> or <code>vlist</code> node. Only the <code>next</code> field is not copied.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L2476-L2485</li> </ul>"},{"location":"globals/node/#nodecopy_list","title":"node.copy_list","text":"<pre><code>function node.copy_list(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  m: Node?\n) -&gt; m Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n</code></pre> <p>Create a deep copy of the node list that starts at node <code>n</code>.</p> <p>If <code>m</code> is also given, the copy stops just before node <code>m</code>.</p> <p>Note that you cannot copy attribute lists this way. However, there is normally no need to copy attribute lists as when you do assignments to the <code>attr</code> field or make changes to specific attributes, the needed copying and freeing takes place automatically.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L2440-L2452</li> </ul>"},{"location":"globals/node/#nodeprev","title":"node.prev","text":"<pre><code>function node.prev(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt; m Node?\n</code></pre> <p>Return the node preceding the given node, or <code>nil</code> if there is no such node.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L379-L388</li> </ul>"},{"location":"globals/node/#nodenext","title":"node.next","text":"<pre><code>function node.next(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt; m Node?\n</code></pre> <p>Return the node following the given node, or <code>nil</code> if there is no such node.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L390-L399</li> </ul>"},{"location":"globals/node/#nodecurrent_attr","title":"node.current_attr","text":"<pre><code>function node.current_attr() -&gt; m Node?\n</code></pre> <p>Return the currently active list of attributes, if there is one.</p> <p>The intended usage of <code>current_attr</code> is as follows:</p> <pre><code>local x1 = node.new(\"glyph\")\nx1.attr = node.current_attr()\nlocal x2 = node.new(\"glyph\")\nx2.attr = node.current_attr()\n</code></pre> <p>or:</p> <pre><code>local x1 = node.new(\"glyph\")\nlocal x2 = node.new(\"glyph\")\nlocal ca = node.current_attr()\nx1.attr = ca\nx2.attr = ca\n</code></pre> <p>The attribute lists are ref counted and the assignment takes care of incrementing the refcount. You cannot expect the value <code>ca</code> to be valid any more when you assign attributes (using <code>tex.setattribute</code>) or when control has been passed back to TeX.</p> <p>Note: this function is somewhat experimental, and it returns the actual attribute list, not a copy thereof. Therefore, changing any of the attributes in the list will change these values for all nodes that have the current attribute list assigned to them.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L6511-L6532</li> </ul>"},{"location":"globals/node/#nodehpack","title":"node.hpack","text":"<pre><code>function node.hpack(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  width: integer?,\n  info: string?,\n  dir: string?\n)\n -&gt; n Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n -&gt; badness integer\n</code></pre> <p>Create a new <code>hlist</code> by packaging the list that begins at node <code>n</code> into a horizontal box.</p> <p>With only a single argument, this box is created using the natural width of its components. In the three argument form, <code>info</code> must be either <code>additional</code> or <code>exactly</code>, and <code>width</code> is the additional (<code>\\hbox spread</code>) or exact (<code>\\hbox to</code>) width to be used. The second return value is the badness of the generated box.</p> <p>Caveat: there can be unexpected side-effects to this function, like updating some of the <code>marks</code> and <code>\\inserts</code>. Also note that the content of <code>h</code> is the original node list <code>n</code>: if you call <code>node.free(h)</code> you will also free the node list itself, unless you explicitly set the <code>list</code> field to <code>nil</code> beforehand. And in a similar way, calling <code>node.free(n)</code> will invalidate <code>h</code> as well!</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L2576-L2619</li> </ul>"},{"location":"globals/node/#nodevpack","title":"node.vpack","text":"<p><pre><code>function node.vpack(\n  head: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  height: integer?,\n  info: (\"additional\"|\"exactly\")?,\n  dir: (DirectionSpecifier|DirectionSpecifierId)?\n)\n -&gt; new_head Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n -&gt; badness integer\n</code></pre> @param <code>height</code> - The additional (<code>\\vbox spread</code>) or exact (<code>\\vbox to</code>) height to be used.</p> <p>@param <code>info</code> - Must be either <code>additional</code> (<code>\\vbox spread</code>) or <code>exactly</code> (<code>\\vbox to</code>).</p> <p>@return <code>badness</code> - The second return value is the badness of the generated box.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Create a new <code>vlist</code> by packaging the list that begins at node <code>head</code> into a vertical box.</p> <p>With only a single argument, this box is created using the natural height of its components.</p> <p>Caveat: there can be unexpected side-effects to this function, like updating some of the <code>marks</code> and <code>\\inserts</code>. Also note that the content of <code>new_head</code> is the original node list <code>head</code>: if you call <code>node.free(new_head)</code> you will also free the node list itself, unless you explicitly set the <code>list</code> field to <code>nil</code> beforehand. And in a similar way, calling <code>node.free(head)</code> will invalidate <code>new_head</code> as well!</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L2673-L2716</li> </ul>"},{"location":"globals/node/#nodeprepend_prevdepth","title":"node.prepend_prevdepth","text":"<p><pre><code>function node.prepend_prevdepth(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  prevdepth: integer\n) -&gt; new_prevdepth integer\n</code></pre> @param <code>n</code> - vlist or hlist</p> <p>Add the interlinespace to a line keeping the baselineskip and lineskip into account.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L8763-L8801</li> </ul>"},{"location":"globals/node/#nodedimensions","title":"node.dimensions","text":"<pre><code>function node.dimensions(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  dir: DirectionSpecifier?\n)\n -&gt; width integer\n -&gt; height integer\n -&gt; depth integer\n</code></pre> <p>@return <code>width</code> - scaled points</p> <p>@return <code>height</code> - scaled points</p> <p>@return <code>depth</code> - scaled points</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Calculate the natural in-line dimensions of the end of the node list starting at node <code>n</code>.</p> <p>The return values are scaled points.</p> <p>You need to keep in mind that this is one of the few places in TeX where floats are used, which means that you can get small differences in rounding when you compare the width reported by <code>hpack</code> with <code>dimensions</code>.</p> <p>Reference:</p> <p>Source: luatex-nodes.tex#L1490-L1546 * Corresponding C source code: lnodelib.c#L2767-L2812</p>"},{"location":"globals/node/#nodedimensions_1","title":"node.dimensions","text":"<p><pre><code>function node.dimensions(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  t: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  dir: DirectionSpecifier?\n)\n -&gt; width integer\n -&gt; height integer\n -&gt; depth integer\n</code></pre> @param <code>t</code> - terminating node</p> <p>@return <code>width</code> - scaled points</p> <p>@return <code>height</code> - scaled points</p> <p>@return <code>depth</code> - scaled points</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Calculate the natural in-line dimensions of the node list starting at node <code>n</code> and terminating just before node <code>t</code>.</p> <p>Reference:</p> <p>Source: luatex-nodes.tex#L1490-L1546 * Corresponding C source code: lnodelib.c#L2767-L2812</p>"},{"location":"globals/node/#nodedimensions_2","title":"node.dimensions","text":"<pre><code>function node.dimensions(\n  glue_set: integer,\n  glue_sign: integer,\n  glue_order: integer,\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  dir: DirectionSpecifier?\n)\n -&gt; width integer\n -&gt; height integer\n -&gt; depth integer\n</code></pre> <p>@return <code>width</code> - scaled points</p> <p>@return <code>height</code> - scaled points</p> <p>@return <code>depth</code> - scaled points</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Calculates the natural in-line dimensions of the end of the node list starting at node <code>n</code>.</p> <p>This is an alternative format that starts with glue parameters as the first three arguments.</p> <p>This calling method takes glue settings into account and is especially useful for finding the actual width of a sublist of nodes that are already boxed, for example in code like this, which prints the width of the space in between the <code>a</code> and <code>b</code> as it would be if <code>\\box0</code> was used as-is:</p> <pre><code>\\setbox0 = \\hbox to 20pt {a b}\n\n\\directlua{print (node.dimensions(\n    tex.box[0].glue_set,\n    tex.box[0].glue_sign,\n    tex.box[0].glue_order,\n    tex.box[0].head.next,\n    node.tail(tex.box[0].head)\n)) }\n</code></pre> <p>Reference:</p> <p>Source: luatex-nodes.tex#L1490-L1546 * Corresponding C source code: lnodelib.c#L2838-L2880</p>"},{"location":"globals/node/#nodedimensions_3","title":"node.dimensions","text":"<p><pre><code>function node.dimensions(\n  glue_set: integer,\n  glue_sign: integer,\n  glue_order: integer,\n  d: integer,\n  t: integer,\n  dir: DirectionSpecifier?\n)\n -&gt; width integer\n -&gt; height integer\n -&gt; depth integer\n</code></pre> @param <code>d</code> - The index number of the node in the memory table for direct access.</p> <p>@param <code>t</code> - terminating node</p> <p>@return <code>width</code> - scaled points</p> <p>@return <code>height</code> - scaled points</p> <p>@return <code>depth</code> - scaled points</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Calculate the natural in-line dimensions of the node list starting at node <code>n</code> and terminating just before node <code>t</code>.</p> <p>This is an alternative format that starts with glue parameters as the first three arguments.</p> <p>Reference:</p> <p>Source: luatex-nodes.tex#L1490-L1546 * Corresponding C source code: lnodelib.c#L2767-L2812</p>"},{"location":"globals/node/#noderangedimensions","title":"node.rangedimensions","text":"<pre><code>function node.rangedimensions(\n  parent: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  first: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  last: Node?\n)\n -&gt; width integer\n -&gt; height integer\n -&gt; depth integer\n</code></pre> <p>@return <code>width</code> - scaled points</p> <p>@return <code>height</code> - scaled points</p> <p>@return <code>depth</code> - scaled points</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Calculate the natural in-line dimensions of the node list <code>parent</code> starting at node <code>first</code> and terminating just before node <code>last</code>.</p> <p>This functions saves a few lookups in comparison to <code>node.dimensions()</code> and can be more convenient in some cases.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L2814-L2834</li> </ul>"},{"location":"globals/node/#nodemlist_to_hlist","title":"node.mlist_to_hlist","text":"<pre><code>function node.mlist_to_hlist(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  display_type: string,\n  penalties: boolean\n) -&gt; h Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n</code></pre> <p>Run the internal <code>mlist</code> to <code>hlist</code> conversion, converting the math list in <code>n</code> into the horizontal list <code>h</code>.</p> <p>The interface is exactly the same as for the callback <code>mlist_to_hlist</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L2906-L2918</li> </ul>"},{"location":"globals/node/#nodetail","title":"node.tail","text":"<pre><code>function node.tail(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt; m Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n</code></pre> <p>Return the last node of the node list that starts at <code>n</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L3262-L3274</li> </ul>"},{"location":"globals/node/#nodelength","title":"node.length","text":"<pre><code>function node.length(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  m: Node?\n) -&gt; i integer\n</code></pre> <p>Return the number of nodes contained in the node list that starts at <code>n</code>.</p> <p>If <code>m</code> is also supplied it stops at <code>m</code> instead of at the end of the list. The node <code>m</code> is not counted.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L4374-L4386</li> </ul>"},{"location":"globals/node/#nodecount","title":"node.count","text":"<pre><code>function node.count(\n  id: (integer|string),\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  m: Node?\n) -&gt; i integer\n</code></pre> <p>Return the number of nodes contained in the node list that starts at <code>n</code> that have a matching <code>id</code> field.</p> <p>If <code>m</code> is also supplied, counting stops at <code>m</code> instead of at the end of the list. The node <code>m</code> is not counted. This function also accept string <code>id</code>\u2019s.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L4388-L4401</li> </ul>"},{"location":"globals/node/#nodeis_char","title":"node.is_char","text":"<pre><code>function node.is_char(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  font: integer?\n)\n -&gt;  (boolean|integer)?\n -&gt;  integer?\n</code></pre> <p>Signal if the glyph is already turned into a character reference or not by examining the subtype.</p> <p>Example:</p> <pre><code>assert.equals(node.is_char(node.new(\"glyph\")), 0)\nassert.equals(node.is_char(node.new(\"hlist\")), nil)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L3004-3024</li> </ul>"},{"location":"globals/node/#nodeis_glyph","title":"node.is_glyph","text":"<pre><code>function node.is_glyph(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n})\n -&gt; character (boolean|integer)\n -&gt; font integer\n</code></pre> <p>Signal if the glyph is already turned into a character reference or not by examining the subtype.</p> <p>Example:</p> <pre><code>local character, font = node.is_glyph(node.new(\"glyph\"))\nassert.equals(character, 0)\nassert.equals(font, 0)\nassert.is_false(node.is_glyph(node.new(\"hlist\")))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L3026-L3037</li> </ul>"},{"location":"globals/node/#nodetraverse","title":"node.traverse","text":"<pre><code>function node.traverse(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt;  fun() -&gt; (Node,integer,integer)\n</code></pre> <p>Return a Lua iterator that loops over the node list that starts at <code>n</code>.</p> <p>Example:</p> <pre><code>callback.register(\"post_linebreak_filter\", function(head)\n  for n, type, subtype in node.traverse(head.head) do\n    assert.is_type(n, \"userdata\")\n    assert.is_type(type, \"number\")\n    assert.is_type(subtype, \"number\")\n  end\n  return head\nend)\n</code></pre> <p>It should be clear from the definition of the function <code>f</code> that even though it is possible to add or remove nodes from the node list while traversing, you have to take great care to make sure all the <code>next</code> (and <code>prev</code>) pointers remain valid.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L4156-L4168</li> </ul>"},{"location":"globals/node/#nodetraverse_id","title":"node.traverse_id","text":"<pre><code>function node.traverse_id(\n  id: integer,\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n) -&gt;  fun() -&gt; (Node,integer)\n</code></pre> <p>Return an iterator that loops over all the nodes in the list that starts at <code>n</code> that have a matching <code>id</code> field.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L4196-L4209</li> </ul>"},{"location":"globals/node/#nodetraverse_char","title":"node.traverse_char","text":"<pre><code>function node.traverse_char(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt;  fun() -&gt; (Node,integer,integer)\n</code></pre> <p>Loop over the <code>glyph</code> nodes in a list.</p> <p>Only nodes with a subtype less than 256 are seen.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L4237-L4249</li> </ul>"},{"location":"globals/node/#nodetraverse_glyph","title":"node.traverse_glyph","text":"<pre><code>function node.traverse_glyph(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt;  fun() -&gt; (Node,integer,integer)\n</code></pre> <p>Loop over a list and return the list and filter all glyphs.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L4277-L4289</li> </ul>"},{"location":"globals/node/#nodetraverse_list","title":"node.traverse_list","text":"<pre><code>function node.traverse_list(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt;  fun() -&gt; (Node,integer,integer,Node)\n</code></pre> <p>Loop over the <code>hlist</code> and <code>vlist</code> nodes in a list.</p> <p>The four return values can save some time compared to fetching these fields.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L4318-L4330</li> </ul>"},{"location":"globals/node/#nodehas_glyph","title":"node.has_glyph","text":"<pre><code>function node.has_glyph(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt; n Node?\n</code></pre> <p>Return the first <code>glyph</code> or <code>disc</code> node in the given list.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L6368-L6382</li> </ul>"},{"location":"globals/node/#nodeend_of_math","title":"node.end_of_math","text":"<pre><code>function node.end_of_math(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt; t Node?\n</code></pre> <p>Look for and return the next <code>math</code> node following the start node <code>n</code>.</p> <p>If the given node is a math end node this helper returns that node, else it follows the list and returns the next math endnote. If no such node is found <code>nil</code> is returned.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L3293-L3313</li> </ul>"},{"location":"globals/node/#noderemove","title":"node.remove","text":"<p><pre><code>function node.remove(\n  head: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  current: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n)\n -&gt; head Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n -&gt; current Node?\n</code></pre> @param <code>current</code> - A node following the list <code>head</code>.</p> <p>@return <code>head</code> - The new <code>head</code></p> <p>@return <code>current</code> - The node following the <code>current</code> in the calling argument.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Remove the node <code>current</code> from the list following <code>head</code>.</p> <p>It is your responsibility to make sure it is really part of that list. The return values are the new <code>head</code> and <code>current</code> nodes. The returned <code>current</code> is the node following the <code>current</code> in the calling argument, and is only passed back as a convenience (or <code>nil</code>, if there is no such node). The returned <code>head</code> is more important, because if the function is called with <code>current</code> equal to <code>head</code>, it will be changed.</p> <p>Example:</p> <pre><code>local g1 = node.new(\"glyph\")\nlocal g2 = node.new(\"glyph\")\nlocal g3 = node.new(\"glyph\")\n\ng1.next = g2\ng2.next = g3\nassert.equals(g1.next, g2)\n\nlocal head, current = node.remove(g1, g2)\nassert.equals(g1.next, g3)\nassert.equals(head, g1)\nassert.equals(current, g3)\n</code></pre> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-nodes.tex#L1778-1794</li> <li>Corresponding C source code: lnodelib.c#L2176-L2215</li> </ul>"},{"location":"globals/node/#nodeinsert_before","title":"node.insert_before","text":"<pre><code>function node.insert_before(\n  head: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  current: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  new: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n)\n -&gt; head Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n -&gt; new Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n</code></pre> <p>Insert the node <code>new</code> before <code>current</code> into the list following <code>head</code>.</p> <p>It is your responsibility to make sure that <code>current</code> is really part of that list. The return values are the (potentially mutated) <code>head</code> and the node <code>new</code>, set up to be part of the list (with correct <code>next</code> field). If <code>head</code> is initially <code>nil</code>, it will become <code>new</code>.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-nodes.tex#L1793-L1807</li> <li>Corresponding C source code: lnodelib.c#L2271-L2315</li> </ul>"},{"location":"globals/node/#nodeinsert_after","title":"node.insert_after","text":"<pre><code>function node.insert_after(\n  head: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  current: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  new: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n)\n -&gt; head Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n -&gt; new Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n</code></pre> <p>Insert the node <code>new</code> after <code>current</code> into the list following <code>head</code>.</p> <p>It is your responsibility to make sure that <code>current</code> is really part of that list. The return values are the <code>head</code> and the node <code>new</code>, set up to be part of the list (with correct <code>next</code> field). If <code>head</code> is initially <code>nil</code>, it will become <code>new</code>.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-nodes.tex#L1809-L1822</li> <li>Corresponding C source code: lnodelib.c#L2361-L2395</li> </ul>"},{"location":"globals/node/#nodefirst_glyph","title":"node.first_glyph","text":"<pre><code>function node.first_glyph(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  m: Node?\n)\n -&gt; n Node?\n -&gt; success boolean\n</code></pre> <p>Return the first node in the list starting at <code>n</code> that is a glyph node with a subtype indicating it is a glyph, or <code>nil</code>.</p> <p>If <code>m</code> is given, processing stops at (but including) that node, otherwise processing stops at the end of the list.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L6312-L6337</li> </ul>"},{"location":"globals/node/#nodeligaturing","title":"node.ligaturing","text":"<pre><code>function node.ligaturing(\n  head: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  tail: Node?\n)\n -&gt; head Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n -&gt; tail Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n -&gt; success boolean\n</code></pre> <p>@return <code>head</code> - the new head</p> <p>@return <code>tail</code> - the new tail (both <code>head</code> and <code>tail</code> can change into a new ligature)</p> <p>Apply TeX-style ligaturing to the specified nodelist.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L5945-L5984</li> </ul>"},{"location":"globals/node/#nodekerning","title":"node.kerning","text":"<pre><code>function node.kerning(\n  head: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  tail: Node?\n)\n -&gt; head Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n -&gt; tail Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n -&gt; success boolean\n</code></pre> <p>@return <code>head</code> - the new head (can be an inserted kern node, because special kernings with word boundaries are possible).</p> <p>@return <code>tail</code> - the new tail (can be an inserted kern node, because special kernings with word boundaries are possible).</p> <p>Apply TeX-style kerning to the specified node list.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L6021-L6060</li> </ul>"},{"location":"globals/node/#nodeunprotect_glyph","title":"node.unprotect_glyph","text":"<pre><code>function node.unprotect_glyph(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n})\n</code></pre> <p>Convert from <code>characters</code> to <code>glyphs</code> during node processing by subtracting <code>256</code> from all glyph node subtypes.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L6217-L6223</li> </ul>"},{"location":"globals/node/#nodeunprotect_glyphs","title":"node.unprotect_glyphs","text":"<pre><code>function node.unprotect_glyphs(\n  head: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  tail: Node?\n)\n</code></pre> <p>Convert from <code>characters</code> to <code>glyphs</code> during node processing by subtracting <code>256</code> from the glyph node subtype.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L6243-L6259</li> </ul>"},{"location":"globals/node/#nodeprotect_glyph","title":"node.protect_glyph","text":"<pre><code>function node.protect_glyph(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n})\n</code></pre> <p>Add <code>256</code> to the <code>glyph</code> node subtype except that if the value is <code>1</code>, add only <code>255</code>.</p> <p>The special handling of <code>1</code> means that <code>characters</code> will become <code>glyphs</code> after subtraction of <code>256</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L6209-L6215</li> </ul>"},{"location":"globals/node/#nodeprotect_glyphs","title":"node.protect_glyphs","text":"<pre><code>function node.protect_glyphs(\n  head: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  tail: Node?\n)\n</code></pre> <p>Add <code>256</code> to all <code>glyph</code> node subtypes in the node list starting at <code>head</code>, except that if the value is <code>1</code>, add only <code>255</code>.</p> <p>The special handling of <code>1</code> means that <code>characters</code> will become <code>glyphs</code> after subtraction of <code>256</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L6225-L6241</li> </ul>"},{"location":"globals/node/#nodelast_node","title":"node.last_node","text":"<pre><code>function node.last_node() -&gt; n Node?\n</code></pre> <p>Pop the last node from TeX's \u201ccurrent list\u201d.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L2556-L2563</li> </ul>"},{"location":"globals/node/#nodewrite","title":"node.write","text":"<pre><code>function node.write(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n})\n</code></pre> <p>Append a node list to TeX's \u201ccurrent list\u201d.</p> <p>The node list is not deep-copied! There is no error checking either! You mignt need to enforce horizontal mode in order for this to work as expected.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-nodes.tex#L2518-L2521, luatex-nodes.tex#L1913-L1923</li> <li>Corresponding C source code: lnodelib.c#L2505-L2525</li> </ul>"},{"location":"globals/node/#nodeprotrusion_skippable","title":"node.protrusion_skippable","text":"<pre><code>function node.protrusion_skippable(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt; skippable boolean\n</code></pre> <p>Return <code>true</code> if, for the purpose of line boundary discovery when character protrusion is active, this node can be skipped.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L6488-L6493</li> </ul>"},{"location":"globals/node/#nodesetglue","title":"node.setglue","text":"<pre><code>function node.setglue(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  width: (integer|any),\n  stretch: (integer|any),\n  shrink: (integer|any),\n  stretch_order: (integer|any),\n  shrink_order: (integer|any)\n)\n</code></pre> <p>Set the five properties of a <code>glue</code> node in one go.</p> <p>Non-numeric values are equivalent to zero and reset a property.</p> <p>When you pass values, only arguments that are numbers are assigned so</p> <pre><code>node.setglue(n,655360,false,65536)\n</code></pre> <p>will only adapt the width and shrink.</p> <p>When a list node is passed, you set the glue, order and sign instead.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L3862-L3883</li> </ul>"},{"location":"globals/node/#nodegetglue","title":"node.getglue","text":"<pre><code>function node.getglue(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n})\n -&gt; width_or_glue_set (integer|number)?\n -&gt; stretch_or_glue_order integer?\n -&gt; shrink_or_glue_sign integer?\n -&gt; stretch_order integer?\n -&gt; shrink_order integer?\n</code></pre> <p>@return <code>width_or_glue_set</code> - When a list node (<code>vlist</code> or <code>hlist</code>) is passed, than the glue set is returned.</p> <p>@return <code>stretch_or_glue_order</code> - When a list node (<code>vlist</code> or <code>hlist</code>) is passed, than the glue order is returned.</p> <p>@return <code>shrink_or_glue_sign</code> - When a list node (<code>vlist</code> or <code>hlist</code>) is passed, than the glue sign is returned.</p> <p>Return 5 values or nothing when no glue is passed.</p> <p>When the second argument is false, only the width is returned (this is consistent with <code>tex.get</code>).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L3840-L3860</li> </ul>"},{"location":"globals/node/#nodeis_zero_glue","title":"node.is_zero_glue","text":"<pre><code>function node.is_zero_glue(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt; isglue boolean\n</code></pre> <p>Return <code>true</code> when the width, stretch and shrink properties are zero.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L3885-L3899</li> </ul>"},{"location":"globals/node/#nodehas_attribute","title":"node.has_attribute","text":"<pre><code>function node.has_attribute(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  id: integer,\n  value: integer?\n) -&gt; value integer?\n</code></pre> <p>Test if a node has the attribute with number <code>id</code> set.</p> <p>If <code>value</code> is also supplied, also tests if the value matches <code>value</code>. It returns the value, or, if no match is found, <code>nil</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L3339-L3353</li> </ul>"},{"location":"globals/node/#nodeget_attribute","title":"node.get_attribute","text":"<pre><code>function node.get_attribute(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  id: integer\n) -&gt; value integer?\n</code></pre> <p>Test if a node has an attribute with number <code>id</code> set.</p> <p>It returns the value, or, if no match is found, <code>nil</code>. If no <code>id</code> is given then the zero attributes is assumed.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L3375-L3406</li> </ul>"},{"location":"globals/node/#nodefind_attribute","title":"node.find_attribute","text":"<pre><code>function node.find_attribute(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  id: integer\n)\n -&gt; value integer?\n -&gt; n Node?\n</code></pre> <p>Find the first node that has attribute with number <code>id</code> set.</p> <p>It returns the value and the node if there is a match and otherwise nothing.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L3408-L3443</li> </ul>"},{"location":"globals/node/#nodeset_attribute","title":"node.set_attribute","text":"<pre><code>function node.set_attribute(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  id: integer,\n  value: integer?\n)\n</code></pre> <p>Set the attribute with number <code>id</code> to the value <code>value</code>.</p> <p>Duplicate assignments are ignored.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L3563-L3578</li> </ul>"},{"location":"globals/node/#nodeunset_attribute","title":"node.unset_attribute","text":"<pre><code>function node.unset_attribute(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  id: integer,\n  value: integer?\n) -&gt; value integer?\n</code></pre> <p>Unset the attribute with the number <code>id</code>.</p> <p>If <code>value</code> is also supplied, it will only perform this operation if the value matches <code>value</code>. Missing attributes or attribute-value pairs are ignored.</p> <p>If the attribute was actually deleted, returns its old value. Otherwise, returns <code>nil</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L3580-L3596</li> </ul>"},{"location":"globals/node/#nodeslide","title":"node.slide","text":"<pre><code>function node.slide(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt; tail Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n</code></pre> <p>Return the found tail node and make sure that the node lists is double linked.</p> <p>After some callbacks automatic sliding takes place. This feature can be turned off with <code>node.fix_node_lists(false)</code> but you better make sure then that you don't mess up lists. In most cases TeX itself only uses <code>next</code> pointers but your other callbacks might expect proper <code>prev</code> pointers too. Future versions of LuaTeX can add more checking but this will not influence usage.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L3226-L3241</li> </ul>"},{"location":"globals/node/#nodecheck_discretionaries","title":"node.check_discretionaries","text":"<pre><code>function node.check_discretionaries(head: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n})\n</code></pre> <p>Check all <code>disc</code> nodes in the node list.</p> <p>When you fool around with disc nodes you need to be aware of the fact that they have a special internal data structure. As long as you reassign the fields when you have extended the lists it\u2019s ok because then the tail pointers get updated, but when you add to list without reassigning you might end up in trouble when the linebreak routine kicks in.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L8615-L8627</li> </ul>"},{"location":"globals/node/#nodecheck_discretionary","title":"node.check_discretionary","text":"<pre><code>function node.check_discretionary(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n})\n</code></pre> <p>Check one <code>disc</code> node only and also check if the node is a <code>disc</code> node.</p> <p>When you fool around with disc nodes you need to be aware of the fact that they have a special internal data structure. As long as you reassign the fields when you have extended the lists it\u2019s ok because then the tail pointers get updated, but when you add to list without reassigning you might end up in trouble when the linebreak routine kicks in.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L8629-L8638</li> </ul>"},{"location":"globals/node/#nodeflatten_discretionaries","title":"node.flatten_discretionaries","text":"<pre><code>function node.flatten_discretionaries(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n})\n -&gt; head Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n -&gt; count integer\n</code></pre> <p>Remove the discretionaries in the list and inject the replace field when set.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L8640-L8679</li> </ul>"},{"location":"globals/node/#nodefamily_font","title":"node.family_font","text":"<p><pre><code>function node.family_font(fam: integer) -&gt; id integer\n</code></pre> @param <code>fam</code> - family identifier</p> <p>Return the font currently associated with the node.</p> <p>You can normally also access the font with the normal font field or getter because it will resolve the family automatically for noads.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L2922-L2932</li> </ul>"},{"location":"globals/node/#nodegetnext","title":"node.getnext","text":"<pre><code>function node.getnext(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt; next Node?\n</code></pre> <p>Return the next node of the current node.</p> <p>Example:</p> <pre><code>local n1 = node.new(\"glyph\")\nlocal n2 = node.new(\"glyph\")\nn1.next = n2\nassert.equals(node.getnext(n1), n2)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L1782-L1800</li> </ul> <p>@see node.getprev node.direct.getnext</p>"},{"location":"globals/node/#nodegetprev","title":"node.getprev","text":"<pre><code>function node.getprev(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt; prev Node?\n</code></pre> <p>Return the previous node of the current node.</p> <p>Example:</p> <pre><code>local n1 = node.new(\"glyph\")\nlocal n2 = node.new(\"glyph\")\nn1.prev = n2\nassert.equals(node.getprev(n1), n2)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L1831-L1846</li> </ul>"},{"location":"globals/node/#nodegetboth","title":"node.getboth","text":"<pre><code>function node.getboth(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n})\n -&gt; prev Node?\n -&gt; next Node?\n</code></pre> <p>Return the previous and next pointer of a node.</p> <p>Example:</p> <pre><code>local n1 = node.new(\"glyph\")\nlocal n2 = node.new(\"glyph\")\nlocal n3 = node.new(\"glyph\")\n\nn1.next = n2\nn2.next = n3\nnode.slide(n1) -- to set n2.prev\n\nlocal prev, next = node.getboth(n2)\nassert.equals(prev, n1)\nassert.equals(next, n3)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L1884-L1902</li> </ul> <p>@see node.direct.setboth</p>"},{"location":"globals/node/#nodegetid","title":"node.getid","text":"<pre><code>function node.getid(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt; id integer\n</code></pre> <p>Return the <code>id</code> (type) of a node.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L487-L496</li> </ul>"},{"location":"globals/node/#nodegetsubtype","title":"node.getsubtype","text":"<pre><code>function node.getsubtype(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt; subtype integer\n</code></pre> <p>Return the <code>subtype</code> of a node.</p> <p>Example:</p> <pre><code>local hlist = node.new(\"hlist\")\nhlist.subtype = 2\n\nassert.equals(node.getsubtype(hlist), 2)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L544-L558</li> </ul>"},{"location":"globals/node/#nodegetfont","title":"node.getfont","text":"<pre><code>function node.getfont(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt; font integer?\n</code></pre> <p>Return the font identifier of a <code>glyph</code>, <code>math_char</code>, <code>math_text_char</code> or <code>delim</code> node.</p> <p>Example:</p> <pre><code>local n = node.new(\"glyph\") --[[@as GlyphNode]]\nn.font = 1\nassert.equals(node.getfont(n), 29)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L636-L654</li> </ul>"},{"location":"globals/node/#nodegetchar","title":"node.getchar","text":"<pre><code>function node.getchar(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt; char integer?\n</code></pre> <p>Return the character index (<code>char</code>) in the font of <code>glyph</code>, <code>math_char</code>, <code>math_text_char</code> or <code>delim</code> nodes.</p> <p>Example:</p> <pre><code>local n = node.new(\"glyph\") --[[@as GlyphNode]]\nn.char = 1\nassert.equals(node.getchar(n), 1)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L739-L758</li> </ul> <p>@see node.direct.getchar node.direct.setchar</p>"},{"location":"globals/node/#nodegetwhd","title":"node.getwhd","text":"<pre><code>function node.getwhd(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  get_expansion_factor: boolean?\n)\n -&gt; width integer\n -&gt; height integer\n -&gt; depth integer\n -&gt; ex integer?\n</code></pre> <p>@return <code>ex</code> - If the node is a <code>glyph</code> and <code>get_ex</code> is true</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the <code>width</code>, <code>height</code> and <code>depth</code> of a list, rule or (unexpanded) <code>glyph</code> as well as <code>glue</code> (its spec is looked at) and <code>unset</code> node.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L1350-L1378</li> </ul>"},{"location":"globals/node/#nodegetdisc","title":"node.getdisc","text":"<pre><code>function node.getdisc(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  get_tail: boolean?\n)\n -&gt; pre Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n -&gt; post Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n -&gt; replace Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n -&gt; pre_tail Node?\n -&gt; post_tail Node?\n -&gt; replace_tail Node?\n</code></pre> <p>Return the <code>pre</code>, <code>post</code> and <code>replace</code> fields and optionally when true is passed also the tail fields.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L1236-L1253</li> </ul>"},{"location":"globals/node/#nodegetlist","title":"node.getlist","text":"<pre><code>function node.getlist(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt; list Node?\n</code></pre> <p>Get child node lists of parent <code>hlist</code>, <code>vlist</code>, <code>sub_box</code>, <code>sub_mlist</code>, <code>ins</code>, or <code>adjust</code> nodes.</p> <p>Example:</p> <pre><code>local hlist = node.new(\"hlist\")\nlocal glyph1 = node.new(\"glyph\")\nlocal glyph2 = node.new(\"glyph\")\n\nhlist.head = glyph1\nglyph1.next = glyph2\n\nlocal list = node.getlist(hlist)\nassert.equals(list, glyph1)\nassert.equals(list.next, glyph2)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L1440-L1458</li> </ul>"},{"location":"globals/node/#nodegetleader","title":"node.getleader","text":"<pre><code>function node.getleader(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt; leaders Node?\n</code></pre> <p>Get the leaders of <code>glue</code> nodes.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L1489-L1501</li> </ul>"},{"location":"globals/node/#nodesetfield","title":"node.setfield","text":"<pre><code>function node.setfield(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  field: string,\n  value: any\n)\n</code></pre> <p>Set the value of a generic node field.</p> <p>Example:</p> <pre><code>local n = node.new(\"glyph\")\nnode.setfield(n, \"char\", 2)\nassert.equals(node.getfield(n, \"char\"), 2)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L7348-L7364</li> </ul> <p>@see node.direct.setfield</p>"},{"location":"globals/node/#nodegetfield","title":"node.getfield","text":"<pre><code>function node.getfield(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  field: string\n) -&gt;  any?\n</code></pre> <p>Get the value of a generic node field.</p> <p>Other field names are often shared so a specific getter makes no sense.</p> <p>Example:</p> <pre><code>local n = node.new(\"glyph\") --[[@as GlyphNode]]\nn.char = 123\nassert.equals(node.getfield(n, \"char\"), 123)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L5189-L5207</li> </ul>"},{"location":"globals/node/#nodesetproperty","title":"node.setproperty","text":"<pre><code>function node.setproperty(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  value: any\n)\n</code></pre> <p>Assign values to the properties table.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: lnodelib.c#L8397-L8410</li> <li>Corresponding C source code: lnodelib.c#L8403-L8416</li> </ul>"},{"location":"globals/node/#nodegetproperty","title":"node.getproperty","text":"<pre><code>function node.getproperty(node: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt; value any\n</code></pre> <p>Each node also can have a properties table and you can get properties using the <code>getproperty</code> function.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-nodes.tex#L2520-L2523</li> <li>Corresponding C source code: lnodelib.c#L8379-L8389</li> </ul>"},{"location":"globals/node/#nodeset_properties_mode","title":"node.set_properties_mode","text":"<pre><code>function node.set_properties_mode(\n  enable: boolean,\n  use_metatable: boolean?\n)\n</code></pre> <p>Managing properties in the node (de)allocator functions is disabled by default and is enabled by:</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L8351-L8360</li> </ul>"},{"location":"globals/node/#nodeflush_properties_table","title":"node.flush_properties_table","text":"<pre><code>function node.flush_properties_table()\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L8364-L8375</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/node/#nodeget_properties_table","title":"node.get_properties_table","text":"<pre><code>function node.get_properties_table() -&gt;  table\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L8439-L8443</li> </ul>"},{"location":"globals/node/#nodefix_node_lists","title":"node.fix_node_lists","text":"<pre><code>function node.fix_node_lists()\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L366-L374</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/node/#nodehyphenating","title":"node.hyphenating","text":"<pre><code>function node.hyphenating(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  m: Node?\n)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L6104-L6122</li> </ul>"},{"location":"globals/node/#nodemake_extensible","title":"node.make_extensible","text":"<pre><code>function node.make_extensible(\n  fnt: integer,\n  chr: integer,\n  size: integer,\n  overlap: integer?,\n  horizontal: boolean?,\n  attlist: Node?\n)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L8842-L8868</li> </ul>"},{"location":"globals/node/#nodesubtypes","title":"node.subtypes","text":"<pre><code>function node.subtypes(subtype: (string|integer)) -&gt;  table&lt;integer,string&gt;\n</code></pre> <p>Example:</p> <pre><code>local subtypes = {}\n\nfor _, node_type in pairs(node.types()) do\n  local subtype = node.subtypes(node_type)\n  if subtype then\n    subtypes[node_type] = subtype\n  end\nend\n\nassert.same(subtypes, {\n  accent = {\n    \"fixedtop\",\n    \"fixedbottom\",\n    \"fixedboth\",\n    [0] = \"bothflexible\",\n  },\n  adjust = { \"pre\", [0] = \"normal\" },\n  boundary = { \"user\", \"protrusion\", \"word\", [0] = \"cancel\" },\n  dir = { \"cancel\", [0] = \"normal\" },\n  disc = {\n    \"explicit\",\n    \"automatic\",\n    \"regular\",\n    \"first\",\n    \"second\",\n    [0] = \"discretionary\",\n  },\n  fence = { \"left\", \"middle\", \"right\", \"no\", [0] = \"unset\" },\n  glue = {\n    \"lineskip\",\n    \"baselineskip\",\n    \"parskip\",\n    \"abovedisplayskip\",\n    \"belowdisplayskip\",\n    \"abovedisplayshortskip\",\n    \"belowdisplayshortskip\",\n    \"leftskip\",\n    \"rightskip\",\n    \"topskip\",\n    \"splittopskip\",\n    \"tabskip\",\n    \"spaceskip\",\n    \"xspaceskip\",\n    \"parfillskip\",\n    \"mathskip\",\n    \"thinmuskip\",\n    \"medmuskip\",\n    \"thickmuskip\",\n    [0] = \"userskip\",\n    [98] = \"conditionalmathskip\",\n    [99] = \"muglue\",\n    [100] = \"leaders\",\n    [101] = \"cleaders\",\n    [102] = \"xleaders\",\n    [103] = \"gleaders\",\n  },\n  glyph = {\n    \"character\",\n    \"ligature\",\n    [0] = \"unset\",\n    [4] = \"ghost\",\n    [8] = \"left\",\n    [16] = \"right\",\n  },\n  hlist = {\n    \"line\",\n    \"box\",\n    \"indent\",\n    \"alignment\",\n    \"cell\",\n    \"equation\",\n    \"equationnumber\",\n    \"math\",\n    \"mathchar\",\n    \"hextensible\",\n    \"vextensible\",\n    \"hdelimiter\",\n    \"vdelimiter\",\n    \"overdelimiter\",\n    \"underdelimiter\",\n    \"numerator\",\n    \"denominator\",\n    \"limits\",\n    \"fraction\",\n    \"nucleus\",\n    \"sup\",\n    \"sub\",\n    \"degree\",\n    \"scripts\",\n    \"over\",\n    \"under\",\n    \"accent\",\n    \"radical\",\n    [0] = \"unknown\",\n  },\n  kern = {\n    \"userkern\",\n    \"accentkern\",\n    \"italiccorrection\",\n    [0] = \"fontkern\",\n  },\n  math = { \"endmath\", [0] = \"beginmath\" },\n  noad = {\n    \"opdisplaylimits\",\n    \"oplimits\",\n    \"opnolimits\",\n    \"bin\",\n    \"rel\",\n    \"open\",\n    \"close\",\n    \"punct\",\n    \"inner\",\n    \"under\",\n    \"over\",\n    \"vcenter\",\n    [0] = \"ord\",\n  },\n  penalty = {\n    \"linebreakpenalty\",\n    \"linepenalty\",\n    \"wordpenalty\",\n    \"finalpenalty\",\n    \"noadpenalty\",\n    \"beforedisplaypenalty\",\n    \"afterdisplaypenalty\",\n    \"equationnumberpenalty\",\n    [0] = \"userpenalty\",\n  },\n  radical = {\n    \"uradical\",\n    \"uroot\",\n    \"uunderdelimiter\",\n    \"uoverdelimiter\",\n    \"udelimiterunder\",\n    \"udelimiterover\",\n    [0] = \"radical\",\n  },\n  rule = {\n    \"box\",\n    \"image\",\n    \"empty\",\n    \"user\",\n    \"over\",\n    \"under\",\n    \"fraction\",\n    \"radical\",\n    \"outline\",\n    [0] = \"normal\",\n  },\n  vlist = {\n    \"line\",\n    \"box\",\n    \"indent\",\n    \"alignment\",\n    \"cell\",\n    \"equation\",\n    \"equationnumber\",\n    \"math\",\n    \"mathchar\",\n    \"hextensible\",\n    \"vextensible\",\n    \"hdelimiter\",\n    \"vdelimiter\",\n    \"overdelimiter\",\n    \"underdelimiter\",\n    \"numerator\",\n    \"denominator\",\n    \"limits\",\n    \"fraction\",\n    \"nucleus\",\n    \"sup\",\n    \"sub\",\n    \"degree\",\n    \"scripts\",\n    \"over\",\n    \"under\",\n    \"accent\",\n    \"radical\",\n    [0] = \"unknown\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L3153-L3222</li> </ul>"},{"location":"globals/node/#nodetostring","title":"node.tostring","text":"<pre><code>function node.tostring(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}) -&gt;  string\n</code></pre> <p>@return  - For example <code>&lt;node    nil &lt;    234 &gt;    nil : glyph 0&gt;</code></p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Example:</p> <pre><code>assert.equals(\n  node.tostring(node.new(\"glyph\")),\n  \"&lt;node    nil &lt;    234 &gt;    nil : glyph 0&gt;\"\n)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L5913-L5918</li> </ul> <p>@see node.direct.tostring</p>"},{"location":"globals/node/#nodeusedlist","title":"node.usedlist","text":"<pre><code>function node.usedlist() -&gt; n Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n</code></pre> <p>Example:</p> <pre><code>assert.equals(\n  tostring(node.usedlist()),\n  \"&lt;node    nil &lt;    234 &gt;    239 : dir 0&gt;\"\n)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L6471-L6476</li> </ul> <p>@see node.direct.usedlist</p>"},{"location":"globals/node/#nodevalues","title":"node.values","text":"<pre><code>function node.values(type: (\"dir\"|\"direction\"|\"glue\"|\"pdf_literal\"|\"pdf_action\"|\"pdf_window\"|\"color_stack\"|\"pagestate\")) -&gt;  string[]?\n</code></pre> <p>Report some used values.</p> <p>Valid arguments are <code>dir</code>, <code>direction</code>, <code>glue</code>, <code>pdf_literal</code>, <code>pdf_action</code>, <code>pdf_window</code> and <code>color_stack</code>. Keep in mind that the setters normally expect a number, but this helper gives you a list of what numbers matter. For practical reason the <code>pagestate</code> values are also reported with this helper.</p> <p>Example:</p> <pre><code>assert.same(\n  node.values(\"dir\"),\n  { [0] = \"TLT\", [1] = \"TRT\", [2] = \"LTL\", [3] = \"RTT\" }\n)\nassert.same(\n  node.values(\"direction\"),\n  { [0] = \"TLT\", [1] = \"TRT\", [2] = \"LTL\", [3] = \"RTT\" }\n)\nassert.same(\n  node.values(\"glue\"),\n  { [0] = \"normal\", [1] = \"fi\", [2] = \"fil\", [3] = \"fill\", [4] = \"filll\" }\n)\nassert.same(\n  node.values(\"pdf_literal\"),\n  {\n    [0] = \"origin\",\n    [1] = \"page\",\n    [2] = \"always\",\n    [3] = \"raw\",\n    [4] = \"text\",\n    [5] = \"font\",\n    [6] = \"special\",\n  }\n)\nassert.same(\n  node.values(\"pdf_action\"),\n  { [0] = \"page\", [1] = \"goto\", [2] = \"thread\", [3] = \"user\" }\n)\nassert.same(\n  node.values(\"pdf_window\"),\n  { [0] = \"unset\", [1] = \"new\", [2] = \"nonew\" }\n)\nassert.same(\n  node.values(\"color_stack\"),\n  { [0] = \"set\", [1] = \"push\", [2] = \"pop\", [3] = \"current\" }\n)\nassert.same(\n  node.values(\"pagestate\"),\n  { [0] = \"empty\", [1] = \"box_there\", [2] = \"inserts_only\" }\n)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnodelib.c#L3117-L3151</li> </ul>"},{"location":"globals/node/#fields","title":"fields","text":""},{"location":"globals/node/#nodedirect","title":"node.direct","text":"<pre><code>node.direct: table\n</code></pre> <p>Deep down in TEX a node has a number which is a numeric entry in a memory table. In fact, this model, where TEX manages memory is real fast and one of the reasons why plugging in callbacks that operate on nodes is quite fast too. Each node gets a number that is in fact an index in the memory table and that number often is reported when you print node related information. You go from userdata nodes and there numeric references and back with:</p> <pre><code>&lt;integer&gt; d = node.todirect(&lt;node&gt; n)\n&lt;node&gt; n = node.tonode(&lt;integer&gt; d)\n</code></pre> <p>The userdata model is rather robust as it is a virtual interface with some additional checking while the more direct access which uses the node numbers directly. However, even with userdata you can get into troubles when you free nodes that are no longer allocated or mess up lists. if you apply tostring to a node you see its internal (direct) number and id.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/os/","title":"global os","text":"<p>Extra <code>os</code> library functions</p> <p>The <code>os</code> library has a few extra functions and variables: <code>os.selfdir</code>, <code>os.exec</code>, <code>os.spawn</code>, <code>os.setenv</code>, <code>os.env</code>, <code>os.gettimeofday</code>, <code>os.times</code>, <code>os.tmpdir</code>, <code>os.type</code>, <code>os.name</code> and <code>os.uname</code>, that we will discuss here.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/os/#methods","title":"methods","text":""},{"location":"globals/os/#osexec","title":"os.exec","text":"<pre><code>function os.exec(commandline: (string|table))\n -&gt; exit_status integer?\n -&gt; error string?\n</code></pre> <p>A variation on <code>os.execute</code>.</p> <p>Here <code>commandline</code> can be either a single string or a single table.</p> <ul> <li>If the argument is a table LuaTeX first checks if there is a value at integer index zero. If there is, this is the command to be executed. Otherwise, it will use the value at integer index one. If neither are present, nothing at all happens.</li> <li>The set of consecutive values starting at integer 1 in the table are the arguments that are passed on to the command (the value at index 1 becomes <code>arg[0]</code>). The command is searched for in the execution path, so there is normally no need to pass on a fully qualified path name.</li> <li>If the argument is a string, then it is automatically converted into a table by splitting on whitespace. In this case, it is impossible for the command and first argument to differ from each other.</li> <li>In the string argument format, whitespace can be protected by putting (part of) an argument inside single or double quotes. One layer of quotes is interpreted by LuaTeX, and all occurrences of <code>\\\"</code>, <code>\\'</code> or <code>\\\\</code> within the quoted text are unescaped. In the table format, there is no string handling taking place.</li> </ul> <p>This function normally does not return control back to the Lua script: the command will replace the current process. However, it will return the two values <code>nil</code> and <code>error</code> if there was a problem while attempting to execute the command.</p> <p>On MS Windows, the current process is actually kept in memory until after the execution of the command has finished. This prevents crashes in situations where TeXLua scripts are run inside integrated TeX environments.</p> <p>The original reason for this command is that it cleans out the current process before starting the new one, making it especially useful for use in TeXLUA.</p> <p>Example:</p> <pre><code>---@diagnostic disable-next-line\nlocal exit, err = os.exec(1, 2, 3)\nassert.is_nil(exit)\nassert.equals(err, \"invalid arguments passed\")\n\nos.exec(\"/usr/bin/uname -a\")\n\nos.exec({ \"/usr/bin/uname\", \"-a\" })\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: loslibext.c#L429-L501</li> </ul> <p>@see os.execute</p>"},{"location":"globals/os/#osspawn","title":"os.spawn","text":"<pre><code>function os.spawn(commandline: (string|table))\n -&gt; exit_status integer?\n -&gt; error string?\n</code></pre> <p>A returning version of <code>os.exec</code>, with otherwise identical calling conventions.</p> <p>If the command ran ok, then the return value is the exit status of the command. Otherwise, it will return the two values <code>nil</code> and <code>error</code>.</p> <p>Example:</p> <pre><code>---@diagnostic disable-next-line\nlocal exit, err = os.spawn(1, 2, 3)\nassert.is_nil(exit)\nassert.equals(err, \"invalid arguments passed\")\n\nos.spawn(\"/usr/bin/uname -a\")\nos.spawn({ \"/usr/bin/uname\", \"-a\" })\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: loslibext.c#L510-L596</li> </ul> <p>@see os.execute</p>"},{"location":"globals/os/#oskpsepopen","title":"os.kpsepopen","text":"<pre><code>function os.kpsepopen(\n  commandline: string,\n  mode: (\"r\"|\"w\")\n)\n -&gt; exit_status integer?\n -&gt; error string?\n</code></pre> <p>This function is similar to <code>io.popen</code> but with a preliminary check of the command by mean of <code>kpse.check_permission</code></p> <p>If the command ran ok, then the return value is the same of <code>io.popen</code>; otherwise it will return the two values <code>nil</code> and <code>error</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: loslibext.c#L1093-1121</li> </ul> <p>@see io.popen kpse.check_permission</p>"},{"location":"globals/os/#ossetenv","title":"os.setenv","text":"<pre><code>function os.setenv(\n  key: string,\n  value: string?\n)\n</code></pre> <p>Set a variable in the environment.</p> <p>Passing <code>nil</code> instead of a value string will remove the variable.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: loslibext.c#L600-L627</li> </ul>"},{"location":"globals/os/#ossleep","title":"os.sleep","text":"<p><pre><code>function os.sleep(\n  interval: number,\n  unit: number?\n)\n</code></pre> @param <code>interval</code> - By default seconds.</p> <p>@param <code>unit</code> - Sleep <code>interval / unit</code> seconds.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Example:</p> <pre><code>local start_time = os.gettimeofday()\nos.sleep(1)\nlocal end_time = os.gettimeofday()\n\nassert.is_true(end_time - start_time &gt; 1)\nos.sleep(1) -- second\nos.sleep(1, 10) -- decisecond\nos.sleep(1, 100) -- centisecond\nos.sleep(1, 1000) -- millisecond\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: loslibext.c#L663-L673</li> <li>Corresponding Lualibs source code: lualibs-os.lua#L580-L587</li> </ul>"},{"location":"globals/os/#osgettimeofday","title":"os.gettimeofday","text":"<pre><code>function os.gettimeofday() -&gt;  number\n</code></pre> <p>@return  - for example <code>1673390071.0893</code></p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the current \u201cUNIX time\u201d, but as a float.</p> <p>This function is not available on the SunOS platforms, so do not use this function for portable documents.</p> <p>Example:</p> <pre><code>local time = os.gettimeofday()\nassert.is_true(time &gt; 1682153121.3217)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: loslibext.c#L905-L927</li> </ul>"},{"location":"globals/os/#ostimes","title":"os.times","text":"<pre><code>function os.times() -&gt;  os.Times {\n    cstime = number,\n    cutime = number,\n    stime = number,\n    utime = number,\n}\n</code></pre> <p>Return the current process times according to the UNIX C library function \u201ctimes\u201d.</p> <p>This function is not available on the MS Windows and SunOS platforms, so do not use this function for portable documents.</p> <pre><code>{\n  cstime = 0.0,\n  cutime = 0.0,\n  stime = 0.01,\n  utime = 0.12\n}\n</code></pre> <p>Example:</p> <pre><code>local times = os.times()\nassert.is_type(times.cstime, \"number\")\nassert.is_type(times.cutime, \"number\")\nassert.is_type(times.stime, \"number\")\nassert.is_type(times.utime, \"number\")\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: loslibext.c#L872-L894</li> </ul>"},{"location":"globals/os/#ostmpdir","title":"os.tmpdir","text":"<p><pre><code>function os.tmpdir(template: string?)\n -&gt;  string?\n -&gt; error string?\n</code></pre> @param <code>template</code> - for example <code>luatex.XXXXXX</code></p> <p>Create a directory in the \u201ccurrent directory\u201d with the name <code>luatex.XXXXXX</code> where the <code>X</code>-es are replaced by a unique string.</p> <p>The function also returns this string, so you can <code>lfs.chdir()</code> into it, or <code>nil</code> if it failed to create the directory. The user is responsible for cleaning up at the end of the run, it does not happen automatically.</p> <p>Example:</p> <pre><code>lfs.chdir(\"/tmp\")\nlocal dir, err = os.tmpdir()\nassert.is_type(dir, \"string\")\nassert.is_true(lfs.isdir(\"/tmp/\" .. dir))\n\ndir, err = os.tmpdir(\"tmp.XXXXXX\")\nassert.is_type(dir, \"string\")\nassert.is_true(lfs.isdir(\"/tmp/\" .. dir))\n\ndir, err = os.tmpdir(\"tmp.X\")\nassert.is_nil(dir)\nassert.equals(err, \"Invalid argument to os.tmpdir()\")\n\ndir, err = os.tmpdir(\"tmp.XXXXXXX_suffix\")\nassert.is_nil(dir)\nassert.equals(err, \"Invalid argument to os.tmpdir()\")\n</code></pre> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-lua.tex#L531-L538</li> <li>Corresponding C source code: loslibext.c#L971-L997</li> </ul>"},{"location":"globals/os/#osuname","title":"os.uname","text":"<pre><code>function os.uname() -&gt;  os.Uname {\n    sysname = string,\n    machine = string,\n    release = string,\n    version = string,\n    nodename = string,\n}\n</code></pre> <p>Return a table with specific operating system information acquired at runtime.</p> <p>Example:</p> <pre><code>local uname = os.uname()\nassert.is_type(type(uname.machine), \"string\")\nassert.is_type(type(uname.nodename), \"string\")\nassert.is_type(type(uname.release), \"string\")\nassert.is_type(type(uname.sysname), \"string\")\nassert.is_type(type(uname.version), \"string\")\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: loslibext.c#L849-L868</li> </ul>"},{"location":"globals/os/#ossocketsleep","title":"os.socketsleep","text":"<p><pre><code>function os.socketsleep(time: integer)\n</code></pre> @param <code>time</code> - <code>time</code> is the number of seconds to sleep for. If <code>time</code> is negative, the function returns immediately.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Freeze the program execution during a given amount of time.</p> <p>This function is a duplicate of <code>socket.sleep()</code> and is always available. The socket library can be nil in some setups.</p> <p>Example:</p> <pre><code>local time = os.socketgettime()\nos.socketsleep(1)\nassert.is_true(os.socketgettime() - time &gt;= 1)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: loslibext.c#L1157-1170</li> </ul> <p>@see socket.sleep</p>"},{"location":"globals/os/#ossocketgettime","title":"os.socketgettime","text":"<pre><code>function os.socketgettime() -&gt; time number\n</code></pre> <p>@return <code>time</code> - for example <code>1683526723.1653</code></p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the UNIX time in seconds.</p> <p>You should subtract the values returned by this function to get meaningful values.</p> <p>This function is a duplicate of <code>socket.gettime()</code> and is always available. The socket library can be nil in some setups.</p> <p>Example:</p> <pre><code>local time = os.socketgettime()\nos.socketsleep(1)\nassert.is_true(os.socketgettime() - time &gt;= 1)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: loslibext.c#L1171-1179</li> </ul> <p>@see socket.gettime</p>"},{"location":"globals/os/#fields","title":"fields","text":""},{"location":"globals/os/#osselfdir","title":"os.selfdir","text":"<pre><code>os.selfdir: string = \"\"\n</code></pre> <p>A variable that holds the directory path of the actual executable.</p> <p>Example:</p> <pre><code>assert.is_type(os.selfdir, \"string\")\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: luainit.c#L169-L186</li> </ul> <p>For example <code>/usr/local/texlive/bin/x86_64-linux</code></p> <p>@string </p>"},{"location":"globals/os/#osenv","title":"os.env","text":"<pre><code>os.env : table&lt;string,string&gt;\n</code></pre> <p>A hash table containing a dump of the variables and values in the process environment at the start of the run.</p> <p>It is writeable, but the actual environment is <code>not</code> updated automatically.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: loslibext.c#L630-L661</li> </ul> <pre><code>{\n  HOME = \"/home/user\",\n  HOSTNAME = \"myhost\",\n  INFOPATH = \"/usr/local/texlive/texmf-dist/doc/info\",\n  LANG = \"en_US.UTF-8\",\n  LANGUAGE = \"en_US:en\",\n  OS = \"Linux\",\n  PAPERSIZE = \"a4\",\n  PATH = \"/bin:/sbin\",\n  TERM = \"xterm-256color\",\n  USER = \"user\",\n  USERNAME = \"user\",\n  ...\n}\n</code></pre>"},{"location":"globals/os/#ostype","title":"os.type","text":"<pre><code>os.type : string\n</code></pre> <p>A string that gives a global indication of the class of operating system.</p> <p>The possible values are currently <code>windows</code>, <code>unix</code>, and <code>msdos</code> (you are unlikely to find this value \u201cin the wild\u201d).</p> <p>Example:</p> <pre><code>assert.is_type(os.type, \"string\")\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: loslibext.c#L40-L91</li> </ul>"},{"location":"globals/os/#osname","title":"os.name","text":"<pre><code>os.name : string\n</code></pre> <p>A string that gives a more precise indication of the operating system.</p> <p>These possible values are not yet fixed, and for <code>os.type</code> values <code>windows</code> and <code>msdos</code>, the <code>os.name</code> values are simply <code>windows</code> and <code>msdos</code></p> <p>The list for the type <code>unix</code> is more precise: <code>linux</code>, <code>freebsd</code>, <code>kfreebsd</code>, <code>cygwin</code>, <code>openbsd</code>, <code>solaris</code>, <code>sunos</code> (pre-solaris), <code>hpux</code>, <code>irix</code>, <code>macosx</code>, <code>gnu</code> (hurd), <code>bsd</code> (unknown, but BSD-like), <code>sysv</code> (unknown, but SYSV-like), <code>generic</code> (unknown).</p> <p>Example:</p> <pre><code>assert.is_type(os.name, \"string\")\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: loslibext.c#L40-L91</li> </ul>"},{"location":"globals/pdf/","title":"global pdf","text":"<p>This library contains variables and functions that are related to the PDF backend.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/pdf/#methods","title":"methods","text":""},{"location":"globals/pdf/#pdfmapfile","title":"pdf.mapfile","text":"<p><pre><code>function pdf.mapfile(map_file: string)\n</code></pre> @param <code>map_file</code> - File name of map-file. The first character of  has a special meaning: * <code>'+'</code>  Add new entries, if they do not exist already. * <code>'='</code>  Replace existing entries. * <code>'-'</code>  Remove entries, if they exist. * <code>''</code>   Flush map file first, then insert new entries. <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Modify the map-file.</p> <p>This function modifies the map-file by adding, replacing, or removing all entries (lines) of ."},{"location":"globals/pdf/#pdfmapline","title":"pdf.mapline","text":"<p><pre><code>function pdf.mapline(map_line: string)\n</code></pre> @param <code>map_line</code> - Entry (line) to be added, replace, or removed. The first character of  has a special meaning: * <code>'+'</code>  Insert new entry, if it doesn't exist already. * <code>'='</code>  Replace existing entry. * <code>'-'</code>  Remove entry, if it exists. * <code>''</code>   Flush map file first, then insert new entry. <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Modify the map-file.</p> <p>This function modifies the map-file by adding, replacing, or removing exactly one entry (line).</p>"},{"location":"globals/pdf/#pdfsetcatalog","title":"pdf.setcatalog","text":"<p><pre><code>function pdf.setcatalog(catalog: string)\n</code></pre> @param <code>catalog</code> - String.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Insert string  into the <code>/Catalog</code> dictionary. <p>This function complements the corresponding PDF backend token lists dealing with metadata. The value is written to the PDF file directly after the token registers set at the TeX end are written.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdflib.c#L612</li> </ul> <p>@see pdf.getcatalog</p>"},{"location":"globals/pdf/#pdfgetcatalog","title":"pdf.getcatalog","text":"<pre><code>function pdf.getcatalog() -&gt; catalog string?\n</code></pre> <p>@return <code>catalog</code> - String.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return string  that was set by <code>pdf.setcatalog()</code>. <p>This function complements the corresponding PDF backend token lists dealing with metadata. The value is written to the PDF file directly after the token registers set at the TeX end are written.</p> <p>@see pdf.setcatalog</p>"},{"location":"globals/pdf/#pdfsetinfo","title":"pdf.setinfo","text":"<p><pre><code>function pdf.setinfo(info: string)\n</code></pre> @param <code>info</code> - String.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Insert string  into the <code>/Info</code> dictionary. <p>This function complements the corresponding PDF backend token lists dealing with metadata. The value is written to the PDF file directly after the token registers set at the TeX end are written.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdflib.c#L613</li> </ul> <p>@see pdf.getinfo</p>"},{"location":"globals/pdf/#pdfgetinfo","title":"pdf.getinfo","text":"<pre><code>function pdf.getinfo() -&gt; info string?\n</code></pre> <p>@return <code>info</code> - String.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return string  that was set by <code>pdf.setinfo()</code>. <p>This function complements the corresponding PDF backend token lists dealing with metadata. The value is written to the PDF file directly after the token registers set at the TeX end are written.</p> <p>@see pdf.setinfo</p>"},{"location":"globals/pdf/#pdfsetnames","title":"pdf.setnames","text":"<p><pre><code>function pdf.setnames(names: string)\n</code></pre> @param <code>names</code> - String.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Insert string  into the <code>/Names</code> dictionary of the <code>/Catalog</code>. <p>This function complements the corresponding PDF backend token lists dealing with metadata. The value is written to the PDF file directly after the token registers set at the TeX end are written.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdflib.c#L614</li> </ul> <p>@see pdf.getnames</p>"},{"location":"globals/pdf/#pdfgetnames","title":"pdf.getnames","text":"<pre><code>function pdf.getnames() -&gt; names string?\n</code></pre> <p>@return <code>names</code> - String.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return string  that was set by <code>pdf.setnames()</code>. <p>This function complements the corresponding PDF backend token lists dealing with metadata. The value is written to the PDF file directly after the token registers set at the TeX end are written.</p> <p>@see pdf.setnames</p>"},{"location":"globals/pdf/#pdfsettrailer","title":"pdf.settrailer","text":"<p><pre><code>function pdf.settrailer(trailer: string)\n</code></pre> @param <code>trailer</code> - String. FIXME: pdf.settrailer() not working. Bug?</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Insert string  into the <code>trailer</code> dictionary. <p>This function complements the corresponding PDF backend token lists dealing with metadata. The value is written to the PDF file directly after the token registers set at the TeX end are written.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdflib.c#L615</li> </ul> <p>@see pdf.gettrailer</p>"},{"location":"globals/pdf/#pdfgettrailer","title":"pdf.gettrailer","text":"<pre><code>function pdf.gettrailer() -&gt; trailer string?\n</code></pre> <p>@return <code>trailer</code> - String.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return string  that was set by <code>pdf.settrailer()</code>. <p>This function complements the corresponding PDF backend token lists dealing with metadata. The value is written to the PDF file directly after the token registers set at the TeX end are written.</p> <p>@see pdf.settrailer</p>"},{"location":"globals/pdf/#pdfsetpageattributes","title":"pdf.setpageattributes","text":"<p><pre><code>function pdf.setpageattributes(attributes: string)\n</code></pre> @param <code>attributes</code> - String.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Insert string  into the current <code>/Page</code> dictionary. <p>This function complements the corresponding PDF backend token lists dealing with page resources. The variables have no interaction with the corresponding PDF backend token register. They are written to the PDF file directly after the token registers set at the TeX end are written.</p> <p>---* Corresponding C source code: lpdflib.c#L610</p> <p>@see pdf.getpageattributes</p>"},{"location":"globals/pdf/#pdfgetpageattributes","title":"pdf.getpageattributes","text":"<pre><code>function pdf.getpageattributes() -&gt; attributes string?\n</code></pre> <p>@return <code>attributes</code> - String.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return string  that was set by <code>pdf.setpageattributes()</code>. <p>This function complements the corresponding PDF backend token lists dealing with page resources. The variables have no interaction with the corresponding PDF backend token register. They are written to the PDF file directly after the token registers set at the TeX end are written.</p> <p>@see pdf.setpageattributes</p>"},{"location":"globals/pdf/#pdfsetpageresources","title":"pdf.setpageresources","text":"<p><pre><code>function pdf.setpageresources(resources: string)\n</code></pre> @param <code>resources</code> - String.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Insert string  into the <code>/Resources</code> dictionary of the current page. <p>This function complements the corresponding PDF backend token lists dealing with page resources. The variables have no interaction with the corresponding PDF backend token register. They are written to the PDF file directly after the token registers set at the TeX end are written.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdflib.c#L609</li> </ul> <p>@see pdf.getpageresources</p>"},{"location":"globals/pdf/#pdfgetpageresources","title":"pdf.getpageresources","text":"<pre><code>function pdf.getpageresources() -&gt; resources string?\n</code></pre> <p>@return <code>resources</code> - String.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return string  that was set by <code>pdf.setpageresources()</code>. <p>This function complements the corresponding PDF backend token lists dealing with page resources. The variables have no interaction with the corresponding PDF backend token register. They are written to the PDF file directly after the token registers set at the TeX end are written.</p> <p>@see pdf.setpageresources</p>"},{"location":"globals/pdf/#pdfsetpagesattributes","title":"pdf.setpagesattributes","text":"<p><pre><code>function pdf.setpagesattributes(attributes: string)\n</code></pre> @param <code>attributes</code> - String.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Insert string  into the <code>/Pages</code> dictionary of the <code>/Catalog</code>. <p>This function complements the corresponding PDF backend token lists dealing with page resources. The variables have no interaction with the corresponding PDF backend token register. They are written to the PDF file directly after the token registers set at the TeX end are written.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdflib.c#L611</li> </ul> <p>@see pdf.setpageattributes</p>"},{"location":"globals/pdf/#pdfgetpagesattributes","title":"pdf.getpagesattributes","text":"<pre><code>function pdf.getpagesattributes() -&gt; attributes string?\n</code></pre> <p>@return <code>attributes</code> - String.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return string  that was set by <code>pdf.setpageattributes()</code>. <p>This function complements the corresponding PDF backend token lists dealing with page resources. The variables have no interaction with the corresponding PDF backend token register. They are written to the PDF file directly after the token registers set at the TeX end are written.</p> <p>@see pdf.setpageattributes</p>"},{"location":"globals/pdf/#pdfsetxformattributes","title":"pdf.setxformattributes","text":"<pre><code>function pdf.setxformattributes()\n</code></pre> <p>This function complements the corresponding PDF backend token lists dealing with reuseable boxes and images. The variables have no interaction with the corresponding PDF backend token register. They are written to the PDF file directly after the token registers set at the TeX end are written.</p> <p>@see pdf.getxformattributes</p>"},{"location":"globals/pdf/#pdfgetxformattributes","title":"pdf.getxformattributes","text":"<pre><code>function pdf.getxformattributes()\n</code></pre> <p>This function complements the corresponding PDF backend token lists dealing with reuseable boxes and images. The variables have no interaction with the corresponding PDF backend token register. They are written to the PDF file directly after the token registers set at the TeX end are written.</p> <p>@see pdf.setxformattributes</p>"},{"location":"globals/pdf/#pdfsetxformresources","title":"pdf.setxformresources","text":"<pre><code>function pdf.setxformresources()\n</code></pre> <p>This function complements the corresponding PDF backend token lists dealing with reuseable boxes and images. The variables have no interaction with the corresponding PDF backend token register. They are written to the PDF file directly after the token registers set at the TeX end are written.</p> <p>@see pdf.getxformresources</p>"},{"location":"globals/pdf/#pdfgetxformresources","title":"pdf.getxformresources","text":"<pre><code>function pdf.getxformresources()\n</code></pre> <p>This function complements the corresponding PDF backend token lists dealing with reuseable boxes and images. The variables have no interaction with the corresponding PDF backend token register. They are written to the PDF file directly after the token registers set at the TeX end are written.</p> <p>@see pdf.setxformresources</p>"},{"location":"globals/pdf/#pdfsetmajorversion","title":"pdf.setmajorversion","text":"<p><pre><code>function pdf.setmajorversion(n: integer)\n</code></pre> @param <code>n</code> - Major version number.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set major version number of the PDF file format.</p> <p>Note: This function sets the version number of the file header. It does not set the <code>/Version</code> key of the <code>/Catalog</code> as recommended for PDF-1.4 and later.</p> <p>The major version is normally 1 but when set to 2 some data will not be written to the file in order to comply with the standard. What minor version you set depends on what PDF features you use. This is out of control of LuaTeX.</p> <p>One can set the major version number to 2 but we cannot guarantee that the engine adapts itself correctly, because there is no public and free specification that we know of. Also, user constructed annotations are not checked and just passed to the file. On the other hand, the PDF that the engine generated is rather simple and not that version depending.</p> <p>@see pdf.getmajorversion</p>"},{"location":"globals/pdf/#pdfgetmajorversion","title":"pdf.getmajorversion","text":"<pre><code>function pdf.getmajorversion() -&gt; n integer\n</code></pre> <p>@return <code>n</code> - Major version number.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return major version number of the PDF file format.</p> <p>@see pdf.setmajorversion</p>"},{"location":"globals/pdf/#pdfsetminorversion","title":"pdf.setminorversion","text":"<p><pre><code>function pdf.setminorversion(n: integer)\n</code></pre> @param <code>n</code> - Minor version number.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set minor version number of the PDF file format.</p> <p>Note: This function sets the version number of the file header. It does not set the <code>/Version</code> key of the <code>/Catalog</code> as recommended for PDF-1.4 and later.</p> <p>@see pdf.getmajorversion</p>"},{"location":"globals/pdf/#pdfgetminorversion","title":"pdf.getminorversion","text":"<pre><code>function pdf.getminorversion() -&gt; n integer\n</code></pre> <p>@return <code>n</code> - Minor version number.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return minor version number of the PDF file format.</p> <p>@see pdf.setminorversion</p>"},{"location":"globals/pdf/#pdfgetcreationdate","title":"pdf.getcreationdate","text":"<pre><code>function pdf.getcreationdate() -&gt;  string\n</code></pre> <p>Return the <code>/CreationDate</code> string of the <code>/Info</code> dictionary.</p>"},{"location":"globals/pdf/#pdfsetinclusionerrorlevel","title":"pdf.setinclusionerrorlevel","text":"<pre><code>function pdf.setinclusionerrorlevel(level: integer)\n</code></pre> <p>Set error level for inserting PDF files.</p> <p>A warning/error is issued if the inserted PDF file has a newer version number than the main PDF file. * <code>level &lt;= 0</code>: Issue a warning. * <code>level &gt; 0</code>: Issue an error.</p>"},{"location":"globals/pdf/#pdfgetinclusionerrorlevel","title":"pdf.getinclusionerrorlevel","text":"<pre><code>function pdf.getinclusionerrorlevel() -&gt; level integer\n</code></pre> <p>@return <code>level</code> - Error level.</p> <p>Return value set by <code>pdf.setinclusionerrorlevel()</code>.</p> <p>@see pdf.setinclusionerrorlevel</p>"},{"location":"globals/pdf/#pdfsetignoreunknownimages","title":"pdf.setignoreunknownimages","text":"<p><pre><code>function pdf.setignoreunknownimages(ignore: integer)\n</code></pre> @param <code>ignore</code> - Ignore image.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set  status for inserting images. * <code>ignore ~= 0</code>: Issue a warning if image file type is unknown. * <code>ignore == 0</code>: Issue an error if image file type is unknown. LuaTeX can handle these file types: pdf, png, jpg, jbig2"},{"location":"globals/pdf/#pdfgetignoreunknownimages","title":"pdf.getignoreunknownimages","text":"<pre><code>function pdf.getignoreunknownimages() -&gt; ignore integer\n</code></pre> <p>@return <code>ignore</code> - Ignor image.</p> <p>Return  status. <p>@see pdf.setignoreunknownimages</p>"},{"location":"globals/pdf/#pdfsetsuppressoptionalinfo","title":"pdf.setsuppressoptionalinfo","text":"<p><pre><code>function pdf.setsuppressoptionalinfo(flags: integer)\n</code></pre> @param <code>flags</code> - Bit field.</p> <p>Bit  Meaning</p> <p>1  <code>/PTEX.FullBanner</code> in <code>/Info</code> dictionary of the trailer. 2  <code>/PTEX.FileName</code> in <code>/XObject</code> dictionary of an image. (1) 4  <code>/PTEX.PageNumber</code> in <code>/XObject</code> dictionary of an image. 8  <code>/PTEX.InfoDict</code> in <code>/XObject</code> dictionary of an image. 16  <code>/Creator</code> in <code>/Info</code> dictionary of the trailer. 32  <code>/CreationDate</code> in <code>/Info</code> dictionary of the trailer. 64  <code>/ModDate</code> in <code>/Info</code> dictionary of the trailer. 128  <code>/Producer</code> in <code>/Info</code> dictionary of the trailer. 256  <code>/Trapped</code> in <code>/Info</code> dictionary of the trailer. 512  <code>/ID</code> of the trailer.</p> <p>(1) Seems to work only if '\\pdfvariable imageaddfilename = 1'</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set bit field suppressing certain informational keys in the PDF file.</p>"},{"location":"globals/pdf/#pdfgetsuppressoptionalinfo","title":"pdf.getsuppressoptionalinfo","text":"<pre><code>function pdf.getsuppressoptionalinfo() -&gt; flags integer\n</code></pre> <p>@return <code>flags</code> - Bit field.</p> <p>Return bit field set by <code>pdf.setsuppressoptionalinfo()</code>.</p> <p>@see pdf.setsuppressoptionalinfo</p>"},{"location":"globals/pdf/#pdfsettrailerid","title":"pdf.settrailerid","text":"<p><pre><code>function pdf.settrailerid(id: string)\n</code></pre> @param <code>id</code> - Trailer ID.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set <code>/ID</code> of the trailer.</p>"},{"location":"globals/pdf/#pdfgettrailerid","title":"pdf.gettrailerid","text":"<pre><code>function pdf.gettrailerid() -&gt; id string\n</code></pre> <p>@return <code>id</code> - Trailer ID.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return <code>/ID</code> of the trailer.</p>"},{"location":"globals/pdf/#pdfsetomitcidset","title":"pdf.setomitcidset","text":"<pre><code>function pdf.setomitcidset(n: integer)\n</code></pre> <p>Add or remove <code>/CIDSet</code> entry in <code>/FontDescriptor</code>. * <code>n ~= 0</code>: Remove <code>/CIDSet</code> entry. * <code>n == 0</code>: Add <code>/CIDSet</code> entry.</p>"},{"location":"globals/pdf/#pdfgetomitcidset","title":"pdf.getomitcidset","text":"<pre><code>function pdf.getomitcidset() -&gt; flag integer\n</code></pre> <p>Return  set by <code>pdf.setomitcidset()</code>. <p>@see pdf.setomitcidset</p>"},{"location":"globals/pdf/#pdfsetomitcharset","title":"pdf.setomitcharset","text":"<pre><code>function pdf.setomitcharset(n: integer)\n</code></pre> <p>Add or remove <code>/CharSet</code> entry in <code>/FontDescriptor</code>. * <code>n ~= 0</code>: Remove <code>/CharSet</code> entry. * <code>n == 0</code>: Add <code>/CharSet</code> entry.</p>"},{"location":"globals/pdf/#pdfgetomitcharset","title":"pdf.getomitcharset","text":"<pre><code>function pdf.getomitcharset() -&gt; n integer\n</code></pre> <p>Return value set by <code>pdf.setomitcharset()</code>.</p> <p>@see pdf.setomitcharset</p>"},{"location":"globals/pdf/#pdfsetcompresslevel","title":"pdf.setcompresslevel","text":"<p><pre><code>function pdf.setcompresslevel(level: integer)\n</code></pre> @param <code>level</code> - Minimum: 0, Maximum: 9</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set compression level of streams.</p>"},{"location":"globals/pdf/#pdfgetcompresslevel","title":"pdf.getcompresslevel","text":"<pre><code>function pdf.getcompresslevel() -&gt; level integer\n</code></pre> <p>@return <code>level</code> - Compression level.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return compression level of streams.</p>"},{"location":"globals/pdf/#pdfsetobjcompresslevel","title":"pdf.setobjcompresslevel","text":"<p><pre><code>function pdf.setobjcompresslevel(level: integer)\n</code></pre> @param <code>level</code> - Minimum: 0, Maximum: 9</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set compression level of objects.</p>"},{"location":"globals/pdf/#pdfgetobjcompresslevel","title":"pdf.getobjcompresslevel","text":"<pre><code>function pdf.getobjcompresslevel() -&gt; level integer\n</code></pre> <p>@return <code>level</code> - Compression level.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return compression level of objects.</p>"},{"location":"globals/pdf/#pdfsetrecompress","title":"pdf.setrecompress","text":"<p><pre><code>function pdf.setrecompress(switch: integer)\n</code></pre> @param <code>switch</code> - 0: don't recompress, 1: do recompress. FIXME: pdf.setrecompress() not working. Bug?</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Switch for recompressing streams of <code>/XObject</code>s.</p>"},{"location":"globals/pdf/#pdfgetrecompress","title":"pdf.getrecompress","text":"<pre><code>function pdf.getrecompress() -&gt; switch integer\n</code></pre> <p>@return <code>switch</code> - 0: don't recompress, 1: do recompress.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return value set by <code>pdf.setrecompress()</code>.</p>"},{"location":"globals/pdf/#pdfsetgentounicode","title":"pdf.setgentounicode","text":"<pre><code>function pdf.setgentounicode(n: integer)\n</code></pre> <p>Add or remove <code>/ToUnicode</code> entry in a font dictionary.</p>"},{"location":"globals/pdf/#pdfgetgentounicode","title":"pdf.getgentounicode","text":"<pre><code>function pdf.getgentounicode() -&gt; n integer\n</code></pre> <p>Return value set by <code>pdf.setgentounicode()</code>.</p> <p>@see pdf.setgentounicode</p>"},{"location":"globals/pdf/#pdfsetdecimaldigits","title":"pdf.setdecimaldigits","text":"<p><pre><code>function pdf.setdecimaldigits(ndigits: integer)\n</code></pre> @param <code>ndigits</code> - Number of decimal digits.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set number of decimal digits used for writing numbers (floats) in the PDF file.</p>"},{"location":"globals/pdf/#pdfgetdecimaldigits","title":"pdf.getdecimaldigits","text":"<pre><code>function pdf.getdecimaldigits() -&gt; ndigits integer\n</code></pre> <p>@return <code>ndigits</code> - Number of digits.</p> <p>Return value set by <code>pdf.setdecimaldigits()</code>.</p> <p>@see pdf.setdecimaldigits</p>"},{"location":"globals/pdf/#pdfsetpkresolution","title":"pdf.setpkresolution","text":"<pre><code>function pdf.setpkresolution(\n  resolution: integer,\n  fixed_dpi: integer\n)\n</code></pre> <p>Set resolution of PK fonts.</p>"},{"location":"globals/pdf/#pdfgetpkresolution","title":"pdf.getpkresolution","text":"<pre><code>function pdf.getpkresolution()\n -&gt; resolution integer\n -&gt; fixed_dpi integer\n</code></pre> <p>Return resolution of PK fonts.</p>"},{"location":"globals/pdf/#pdfgetlastobj","title":"pdf.getlastobj","text":"<pre><code>function pdf.getlastobj() -&gt; objnum integer\n</code></pre> <p>@return <code>objnum</code> - Number of latest created object.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return object number of latest created objects.</p>"},{"location":"globals/pdf/#pdfgetlastlink","title":"pdf.getlastlink","text":"<pre><code>function pdf.getlastlink() -&gt; objnum integer\n</code></pre> <p>@return <code>objnum</code> - Object number.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return object number of latest created <code>/Annot</code> object (subtype <code>/Link</code>) that was created by <code>/pdfextension startlink</code>.</p>"},{"location":"globals/pdf/#pdfgetlastannot","title":"pdf.getlastannot","text":"<pre><code>function pdf.getlastannot() -&gt; objnum integer\n</code></pre> <p>@return <code>objnum</code> - Number of latest created object.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return object number of latest created <code>/Annot</code> object that was created by <code>pdf.reserveobj('annot')</code>.</p>"},{"location":"globals/pdf/#pdfgetretval","title":"pdf.getretval","text":"<pre><code>function pdf.getretval()\n</code></pre> <p>Warning! Undocumented code!<p> TODO: Please contribute https://github.com/Josef-Friedrich/LuaTeX_Lua-API#how-to-contribute</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/pdf/#pdfgetmaxobjnum","title":"pdf.getmaxobjnum","text":"<pre><code>function pdf.getmaxobjnum() -&gt; objnum integer\n</code></pre> <p>@return <code>objnum</code> - Object number.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the object number of the latest created pdf object.</p>"},{"location":"globals/pdf/#pdfgetobjtype","title":"pdf.getobjtype","text":"<p><pre><code>function pdf.getobjtype(objnum: integer)\n</code></pre> @param <code>objnum</code> - Object number.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return a string describing the object type.</p>"},{"location":"globals/pdf/#pdfgetfontname","title":"pdf.getfontname","text":"<p><pre><code>function pdf.getfontname(id: integer) -&gt;  integer\n</code></pre> @param <code>id</code> - Font ID.</p> <p>Return the number of the font resource name. The <code>/Font</code> entry of a <code>/Resource</code> dictionary maps resource names to font dictionaries. LuaTeX uses resource names like <code>/F36</code> or <code>/F52</code>, where the number corresponds to the font ID.</p>"},{"location":"globals/pdf/#pdfgetfontobjnum","title":"pdf.getfontobjnum","text":"<p><pre><code>function pdf.getfontobjnum(id: integer) -&gt; objnum integer\n</code></pre> @param <code>id</code> - Font ID.</p> <p>@return <code>objnum</code> - Object number.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the object number of the <code>/Font</code> dictionary.</p>"},{"location":"globals/pdf/#pdfgetfontsize","title":"pdf.getfontsize","text":"<p><pre><code>function pdf.getfontsize(id: integer) -&gt;  integer\n</code></pre> @param <code>id</code> - Font ID.</p> <p>@return  - Font size.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the font size in scaled points.</p>"},{"location":"globals/pdf/#pdfgetxformname","title":"pdf.getxformname","text":"<pre><code>function pdf.getxformname()\n</code></pre> <p>Warning! Undocumented code!<p> TODO: Please contribute https://github.com/Josef-Friedrich/LuaTeX_Lua-API#how-to-contribute</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/pdf/#pdfsetorigin","title":"pdf.setorigin","text":"<p><pre><code>function pdf.setorigin(\n  h: integer,\n  v: integer\n)\n</code></pre> @param <code>h</code> - Horizontal offset in scaled points.</p> <p>@param <code>v</code> - Vertical offset in scaled points.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set horizontal and vertical offset from the top left corner of the page.</p>"},{"location":"globals/pdf/#pdfgetorigin","title":"pdf.getorigin","text":"<pre><code>function pdf.getorigin()\n -&gt; h integer\n -&gt; v integer\n</code></pre> <p>@return <code>h</code> - Horizontal offset in scaled points.</p> <p>@return <code>v</code> - Vertical offset in scaled points.</p> <p>Return values set by <code>pdf.setorigin()</code>.</p> <p>@see pdf.setorigin</p>"},{"location":"globals/pdf/#pdfsetimageresolution","title":"pdf.setimageresolution","text":"<p><pre><code>function pdf.setimageresolution(dpi: integer)\n</code></pre> @param <code>dpi</code> - Resolution. LuaTeX determines the size of an image as follows: 1. It uses  and  parameter of <code>\\useimageresource</code>. 2. If (1) is missing, it uses the resolution given in the metadata of the image. 3. If (2) is missing, it uses the resolution given by this function. 4. If (3) is missing, it uses a resolution of 72 dpi. <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set default resolution of a bitmap image.</p>"},{"location":"globals/pdf/#pdfgetimageresolution","title":"pdf.getimageresolution","text":"<pre><code>function pdf.getimageresolution() -&gt; dpi integer\n</code></pre> <p>@return <code>dpi</code> - Resolution.</p> <p>Return value set by <code>pdf.setimageresolution()</code>.</p> <p>@see pdf.setimageresolution</p>"},{"location":"globals/pdf/#pdfsetlinkmargin","title":"pdf.setlinkmargin","text":"<p><pre><code>function pdf.setlinkmargin(margin: integer)\n</code></pre> @param <code>margin</code> - Margin in scaled points.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set margin size of hyperlinks.</p>"},{"location":"globals/pdf/#pdfgetlinkmargin","title":"pdf.getlinkmargin","text":"<pre><code>function pdf.getlinkmargin() -&gt; margin integer\n</code></pre> <p>@return <code>margin</code> - Margin in scaled points.</p> <p>Return value set by <code>pdf.setlinkmargin()</code>.</p> <p>@see pdf.setlinkmargin</p>"},{"location":"globals/pdf/#pdfsetdestmargin","title":"pdf.setdestmargin","text":"<p><pre><code>function pdf.setdestmargin(margin: integer)\n</code></pre> @param <code>margin</code> - Margin in scaled points. FIXME pdf.setdestmargin() is not working. Bug?</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set margin size of destination.</p>"},{"location":"globals/pdf/#pdfgetdestmargin","title":"pdf.getdestmargin","text":"<pre><code>function pdf.getdestmargin() -&gt; margin integer\n</code></pre> <p>@return <code>margin</code> - Margin in scaled points.</p> <p>Return value set by <code>pdf.setdestmargin()</code>.</p> <p>@see pdf.setdestmargin</p>"},{"location":"globals/pdf/#pdfsetthreadmargin","title":"pdf.setthreadmargin","text":"<p><pre><code>function pdf.setthreadmargin(margin: integer)\n</code></pre> @param <code>margin</code> - Margin in scaled points.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set size of margin for threads.</p>"},{"location":"globals/pdf/#pdfgetthreadmargin","title":"pdf.getthreadmargin","text":"<pre><code>function pdf.getthreadmargin() -&gt; margin integer\n</code></pre> <p>@return <code>margin</code> - Margin in scaled points.</p> <p>Return value set by <code>pdf.setthreadmargin()</code>.</p> <p>@see pdf.setthreadmargin</p>"},{"location":"globals/pdf/#pdfsetxformmargin","title":"pdf.setxformmargin","text":"<pre><code>function pdf.setxformmargin()\n</code></pre> <p>Warning! Undocumented code!<p> TODO: Please contribute https://github.com/Josef-Friedrich/LuaTeX_Lua-API#how-to-contribute</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/pdf/#pdfgetxformmargin","title":"pdf.getxformmargin","text":"<pre><code>function pdf.getxformmargin()\n</code></pre> <p>Warning! Undocumented code!<p> TODO: Please contribute https://github.com/Josef-Friedrich/LuaTeX_Lua-API#how-to-contribute</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/pdf/#pdfgetpos","title":"pdf.getpos","text":"<pre><code>function pdf.getpos()\n -&gt; h integer\n -&gt; v integer\n</code></pre> <p>@return <code>h</code> - Horizontal position in scaled points.</p> <p>@return <code>v</code> - Vertical position in scaled points.</p> <p>Note: This function is mainly used inside <code>\\latelua</code> calls.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return coordinates of the current position. The origin of the coordinate system is at the lower left corner of the page.</p>"},{"location":"globals/pdf/#pdfgethpos","title":"pdf.gethpos","text":"<pre><code>function pdf.gethpos() -&gt; h integer\n</code></pre> <p>@return <code>h</code> - Horizontal position in scaled points. Note: This function is mainly used inside <code>\\latelua</code> calls.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return horizontal coordinate of the current position. The origin of the coordinate system is at the lower left corner of the page.</p>"},{"location":"globals/pdf/#pdfgetvpos","title":"pdf.getvpos","text":"<pre><code>function pdf.getvpos() -&gt; v integer\n</code></pre> <p>@return <code>v</code> - Vertical position in scaled points.</p> <p>Note: This function is mainly used inside <code>\\latelua</code> calls.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return vertical coordinate of the current position. The origin of the coordinate system is at the lower left corner of the page.</p>"},{"location":"globals/pdf/#pdfhasmatrix","title":"pdf.hasmatrix","text":"<pre><code>function pdf.hasmatrix() -&gt; Note boolean\n</code></pre> <p>@return <code>Note</code> - : This function is mainly used inside <code>\\latelua</code> calls.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Returns <code>true</code> is a CTM is currently used.</p>"},{"location":"globals/pdf/#pdfgetmatrix","title":"pdf.getmatrix","text":"<pre><code>function pdf.getmatrix()\n -&gt; a integer\n -&gt; b integer\n -&gt; c integer\n -&gt; d integer\n -&gt; e integer\n -&gt; f integer\n</code></pre> <p>Return the CTM (current transformation matrix) at the current position. \u250c         \u2510 \u2502 a  b  0 \u2502 \u2502 c  d  0 \u2502 \u2502 e  f  1 \u2502 \u2514         \u2518</p>"},{"location":"globals/pdf/#pdfprint","title":"pdf.print","text":"<p><pre><code>function pdf.print(str: string)\n</code></pre> @param <code>str</code> - String.</p> <p>Note: This function is mainly used inside <code>\\latelua</code> calls.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Write a string into the contents stream of the current page. If LuaTeX is currently inside a text block (BT...ET), close the text block first.</p>"},{"location":"globals/pdf/#pdfprint_1","title":"pdf.print","text":"<p><pre><code>function pdf.print(\n  type: string,\n  str: string\n)\n</code></pre> @param <code>type</code> - Type.</p> <p>@param <code>str</code> - String. Parameter  determines how the string is written: * <code>text</code>: String  is written inside a text block (BT...ET). * <code>page</code>: String  is written outside a text block (BT...ET). * <code>origin</code>: Like <code>page</code> but the CTM is inserted just before the string . * <code>direct</code>: String  is written directly, independ of whether this is inside or outside a text block. * <code>raw</code>: Like <code>direct</code>. -Note: This function is mainly used inside <code>\\latelua</code> calls. <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Write a string into the contents stream of the current page.</p>"},{"location":"globals/pdf/#pdfimmediateobj","title":"pdf.immediateobj","text":"<p><pre><code>function pdf.immediateobj(str: string) -&gt; objnum integer\n</code></pre> @param <code>str</code> - Contents of the object.</p> <p>@return <code>objnum</code> - Object number.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Create an object and write it immediately to the pdf file.</p> <p>The created object looks like this:</p> <p> 0 obj      endobj"},{"location":"globals/pdf/#pdfimmediateobj_1","title":"pdf.immediateobj","text":"<p><pre><code>function pdf.immediateobj(\n  objnum: integer?,\n  file: string,\n  filename: string\n) -&gt; objnum integer\n</code></pre> @param <code>objnum</code> - Object number (optional argument).</p> <p>@param <code>file</code> - Literal string <code>\"file\"</code>.</p> <p>@param <code>filename</code> - File name.</p> <p>@return <code>objnum</code> - Object number.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Create an object and write it immediately to the pdf file. The created object looks like this:</p> <p> 0 obj    &gt;  endobj"},{"location":"globals/pdf/#pdfimmediateobj_2","title":"pdf.immediateobj","text":"<p><pre><code>function pdf.immediateobj(\n  stream: string,\n  streamcontents: string,\n  streamdict: string\n) -&gt; objnum integer\n</code></pre> @param <code>stream</code> - Literal string <code>\"stream\"</code>.</p> <p>@param <code>streamcontents</code> - Contents of the stream.</p> <p>@param <code>streamdict</code> - Stream dictionary.</p> <p>@return <code>objnum</code> - Object number.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Create an object and write it immediately to the pdf file.</p> <p>The created object looks like this:</p> <p> 0 obj   &lt;&lt;      /Length 123 &gt;&gt;   stream      endstream   endobj"},{"location":"globals/pdf/#pdfimmediateobj_3","title":"pdf.immediateobj","text":"<p><pre><code>function pdf.immediateobj(\n  streamfile: string,\n  filename: string,\n  streamdict: string\n) -&gt; objnum integer\n</code></pre> @param <code>streamfile</code> - Literal string <code>\"streamfile\"</code>.</p> <p>@param <code>filename</code> - File name.</p> <p>@param <code>streamdict</code> - Stream dictionary.</p> <p>@return <code>objnum</code> - Object number.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Create an object and write it immediately to the pdf file.</p> <p>The created object looks like this:</p> <p> 0 obj   &lt;&lt;   file \\&gt;   /Length 123 &gt;&gt;   stream      endstream   endobj"},{"location":"globals/pdf/#pdfobj","title":"pdf.obj","text":"<p><pre><code>function pdf.obj(str: string) -&gt; objnum integer\n</code></pre> @param <code>str</code> - Contents of the object.</p> <p>@return <code>objnum</code> - Object number.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Create an object.</p> <p>This object is written to the pdf file only if it is referenced later by <code>pdf.refobj()</code> The created object looks like this:</p> <p> 0 obj      endobj"},{"location":"globals/pdf/#pdfobj_1","title":"pdf.obj","text":"<p><pre><code>function pdf.obj(\n  objnum: integer?,\n  file: string,\n  filename: string\n) -&gt; objnum integer\n</code></pre> @param <code>objnum</code> - Object number (optional argument).</p> <p>@param <code>file</code> - Literal string <code>\"file\"</code>.</p> <p>@param <code>filename</code> - File name.</p> <p>@return <code>objnum</code> - Object number.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Create an object.</p> <p>This object is written to the pdf file only if it is referenced later by <code>pdf.refobj()</code> The created object looks like this:</p> <p> 0 obj    &gt;  endobj"},{"location":"globals/pdf/#pdfobj_2","title":"pdf.obj","text":"<p><pre><code>function pdf.obj(\n  stream: string,\n  streamcontents: string,\n  streamdict: string\n) -&gt; objnum integer\n</code></pre> @param <code>stream</code> - Literal string <code>\"stream\"</code>.</p> <p>@param <code>streamcontents</code> - Contents of the stream.</p> <p>@param <code>streamdict</code> - Stream dictionary.</p> <p>@return <code>objnum</code> - Object number.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Create an object.</p> <p>This object is written to the pdf file only if it is referenced later by <code>pdf.refobj()</code> The created object looks like this:</p> <p> 0 obj   &lt;&lt;      /Length 123 &gt;&gt;   stream      endstream   endobj"},{"location":"globals/pdf/#pdfobj_3","title":"pdf.obj","text":"<p><pre><code>function pdf.obj(\n  streamfile: string,\n  filename: string,\n  streamdict: string\n) -&gt; objnum integer\n</code></pre> @param <code>streamfile</code> - Literal string <code>\"streamfile\"</code>.</p> <p>@param <code>filename</code> - File name.</p> <p>@param <code>streamdict</code> - Stream dictionary.</p> <p>@return <code>objnum</code> - Object number.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Create an object.</p> <p>This object is written to the pdf file only if it is referenced later by <code>pdf.refobj()</code> The created object looks like this:</p> <p> 0 obj   &lt;&lt;   file \\&gt;   /Length 123 &gt;&gt;   stream      endstream   endobj"},{"location":"globals/pdf/#pdfobj_4","title":"pdf.obj","text":"<p><pre><code>function pdf.obj(keyvals: table) -&gt; objnum integer\n</code></pre> @param <code>keyvals</code> - Object specification.</p> <p>keyvals = {    type           = , -- <code>'stream'</code> (stream object), <code>'raw'</code> (non-stream object)    immediate      = ,    objnum         = , -- object number    attr           = , -- stream dictionary    compresslevel  = ,    objcompression = ,    file           = , -- contents of object/stream    string         = , -- contents of object/stream    nolength       = , -- omit <code>/Length</code> entry of stream dictionary } Keys <code>string</code> and <code>file</code> are mutual exclusive. Key <code>nolength</code> omits <code>/Length</code> entry of the stream dictionary only if a <code>/Length</code> entry is given in the <code>attr</code> key. <p>@return <code>objnum</code> - Object number.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Create an object.</p>"},{"location":"globals/pdf/#pdfrefobj","title":"pdf.refobj","text":"<p><pre><code>function pdf.refobj(objnum: integer)\n</code></pre> @param <code>objnum</code> - Object number.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Write referenced object to pdf file.</p>"},{"location":"globals/pdf/#pdfreserveobj","title":"pdf.reserveobj","text":"<pre><code>function pdf.reserveobj() -&gt; objnum integer\n</code></pre> <p>@return <code>objnum</code> - Object number.</p> <p>Create an empty object.</p> <p>Use <code>pdf.obj()</code> or <code>pdf.immediateobj()</code> to define this object.</p> <p>@see pdf.obj pdf.immediateobj</p>"},{"location":"globals/pdf/#pdfreserveobj_1","title":"pdf.reserveobj","text":"<p><pre><code>function pdf.reserveobj(annot: string) -&gt; objnum integer\n</code></pre> @param <code>annot</code> - Literal string <code>'annot'</code>.</p> <p>@return <code>objnum</code> - Object number.</p> <p>Create a annotation object.</p> <p>Annotation object are not written to file directly but must be registered with <code>pdf.registerannot()</code>.</p> <p>@see pdf.registerannot</p>"},{"location":"globals/pdf/#pdfgetpageref","title":"pdf.getpageref","text":"<p><pre><code>function pdf.getpageref(pagenum: integer) -&gt; objnum integer\n</code></pre> @param <code>pagenum</code> - Page number.</p> <p>@return <code>objnum</code> - Object number.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return object number of page . <p>This can be a forwar reference, i.e. page  doesn't have to be created yet."},{"location":"globals/pdf/#pdfregisterannot","title":"pdf.registerannot","text":"<p><pre><code>function pdf.registerannot(objnum: integer)\n</code></pre> @param <code>objnum</code> - Object number of <code>/Annot</code> object.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Add an <code>/Annot</code> object to the <code>/Annots</code> dictionary.</p>"},{"location":"globals/pdf/#pdfnewcolorstack","title":"pdf.newcolorstack","text":"<pre><code>function pdf.newcolorstack(\n  s: string,\n  literal_mode: (\"page\"|\"direct\"|\"origin\"|\"text\"|\"raw\"),\n  page_start: boolean\n) -&gt; color_stack_id integer\n</code></pre> <p>Allocate a new color stack and returns it's id. The arguments are the same as for the similar backend extension primitive.</p> <pre><code>pdf.newcolorstack(\"0 g\",\"page\",true) --\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdflib.c#L1166-L1199</li> </ul>"},{"location":"globals/pdf/#pdfsetfontattributes","title":"pdf.setfontattributes","text":"<pre><code>function pdf.setfontattributes(\n  font_id: integer,\n  pdf_code: integer\n)\n</code></pre> <p>Force some additional code into the font resource.</p> <p>It can for instance be used to add a custom <code>ToUnicode</code> vector to a bitmap file.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdflib.c#L1202-L1216</li> </ul>"},{"location":"globals/pdf/#pdffontname","title":"pdf.fontname","text":"<pre><code>function pdf.fontname()\n</code></pre> <p>@deprecated Deprecated</p> <p>@see pdf.getfontname</p>"},{"location":"globals/pdf/#pdffontsize","title":"pdf.fontsize","text":"<pre><code>function pdf.fontsize()\n</code></pre> <p>@deprecated Deprecated</p> <p>@see pdf.getpdffontsize</p>"},{"location":"globals/pdf/#pdfmaxobjnum","title":"pdf.maxobjnum","text":"<pre><code>function pdf.maxobjnum() -&gt; n integer\n</code></pre> <p>@return <code>n</code> - Number of objects.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return how many objects were created so far.</p>"},{"location":"globals/pdf/#pdfgetnofobjects","title":"pdf.getnofobjects","text":"<pre><code>function pdf.getnofobjects()\n -&gt; written_obj integer\n -&gt; not_written_obj integer\n</code></pre> <p>@return <code>written_obj</code> - Object written to file.</p> <p>@return <code>not_written_obj</code> - Object not yet written to file.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return number of object that are written or not yet written to file.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdflib.c#L1270-L1285</li> </ul>"},{"location":"globals/pdf/#pdfincludechar","title":"pdf.includechar","text":"<pre><code>function pdf.includechar()\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdflib.c#L1218-L1235</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/pdf/#pdfincludefont","title":"pdf.includefont","text":"<pre><code>function pdf.includefont()\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdflib.c#L1237-L1242</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/pdf/#pdfincludeimage","title":"pdf.includeimage","text":"<pre><code>function pdf.includeimage()\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdflib.c#L1244-L1268</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/pdf/#pdfobjtype","title":"pdf.objtype","text":"<pre><code>function pdf.objtype()\n</code></pre> <p>@deprecated Deprecated</p> <p>@see pdf.getobjtype</p>"},{"location":"globals/pdf/#pdfpageref","title":"pdf.pageref","text":"<pre><code>function pdf.pageref()\n</code></pre> <p>@deprecated Deprecated</p> <p>@see pdf.getpageref</p>"},{"location":"globals/pdf/#pdfsetforcefile","title":"pdf.setforcefile","text":"<pre><code>function pdf.setforcefile(force: boolean)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdflib.c#L871-L879</li> </ul>"},{"location":"globals/pdf/#pdfsettypeonewidemode","title":"pdf.settypeonewidemode","text":"<pre><code>function pdf.settypeonewidemode()\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdflib.c#L1294-L1298</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/pdf/#pdfxformname","title":"pdf.xformname","text":"<pre><code>function pdf.xformname()\n</code></pre> <p>@deprecated Deprecated</p> <p>@see pdf.getxformname</p>"},{"location":"globals/pdfe/","title":"global pdfe","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/pdfe/#methods","title":"methods","text":""},{"location":"globals/pdfe/#pdfeopen","title":"pdfe.open","text":"<p><pre><code>function pdfe.open(filename: string) -&gt; doc PdfeDocument {\n    catalog = any,\n    Catalog = any,\n    info = any,\n    Info = any,\n    trailer = any,\n    Trailer = any,\n    pages = any,\n    Pages = any,\n}\n</code></pre> @param <code>filename</code> - File name.</p> <p>@return <code>doc</code> - Pdfe document.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L834-L851</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Open a pdf file.</p>"},{"location":"globals/pdfe/#pdfenew","title":"pdfe.new","text":"<p><pre><code>function pdfe.new(\n  contents: string,\n  size: integer\n) -&gt; __Reference PdfeDocument {\n    catalog = any,\n    Catalog = any,\n    info = any,\n    Info = any,\n    trailer = any,\n    Trailer = any,\n    pages = any,\n    Pages = any,\n}\n</code></pre> @param <code>contents</code> - A string containing a complete pdf file.</p> <p>@param <code>size</code> - Size of contents in bytes.</p> <p>@return <code>__Reference</code> - :__</p> <ul> <li>Corresponding C source code: lpdfelib.c#L853-L917</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Open a pseudo (in-memory) pdf file.</p>"},{"location":"globals/pdfe/#pdfegetstatus","title":"pdfe.getstatus","text":"<p><pre><code>function pdfe.getstatus(doc: PdfeDocument {\n    catalog = any,\n    Catalog = any,\n    info = any,\n    Info = any,\n    trailer = any,\n    Trailer = any,\n    pages = any,\n    Pages = any,\n}) -&gt; status integer\n</code></pre> @param <code>doc</code> - Pdfe document.</p> <p>@return <code>status</code> - Encryption status. - -2   is encrypted - -1   is encrypted and decryption with <code>pdfe.unencrypt()</code> failed -  0   is not encrypted -  1   successfully unencrypted with <code>pdfe.unencrypt()</code> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L1031-L1038</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the encryption status of a pdfe document.</p>"},{"location":"globals/pdfe/#pdfeclose","title":"pdfe.close","text":"<p><pre><code>function pdfe.close(doc: PdfeDocument {\n    catalog = any,\n    Catalog = any,\n    info = any,\n    Info = any,\n    trailer = any,\n    Trailer = any,\n    pages = any,\n    Pages = any,\n})\n</code></pre> @param <code>doc</code> - Pdfe document.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L945-L948</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Close a pdfe document.</p>"},{"location":"globals/pdfe/#pdfeunencrypt","title":"pdfe.unencrypt","text":"<p><pre><code>function pdfe.unencrypt(\n  doc: PdfeDocument {\n    catalog = any,\n    Catalog = any,\n    info = any,\n    Info = any,\n    trailer = any,\n    Trailer = any,\n    pages = any,\n    Pages = any,\n},\n  userpassword: string?,\n  ownerpassword: string?\n)\n</code></pre> @param <code>doc</code> - Pdfe document.</p> <p>@param <code>userpassword</code> - User password.</p> <p>@param <code>ownerpassword</code> - Owner password.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L963-L991</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Unencrypt a pdfe document.</p>"},{"location":"globals/pdfe/#pdfegetsize","title":"pdfe.getsize","text":"<p><pre><code>function pdfe.getsize(doc: PdfeDocument {\n    catalog = any,\n    Catalog = any,\n    info = any,\n    Info = any,\n    trailer = any,\n    Trailer = any,\n    pages = any,\n    Pages = any,\n}) -&gt; size integer\n</code></pre> @param <code>doc</code> - Pdfe document.</p> <p>@return <code>size</code> - Size of pdf document is bytes.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L1008-L1015</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the size of a pdfe document in bytes.</p>"},{"location":"globals/pdfe/#pdfegetversion","title":"pdfe.getversion","text":"<pre><code>function pdfe.getversion(doc: PdfeDocument {\n    catalog = any,\n    Catalog = any,\n    info = any,\n    Info = any,\n    trailer = any,\n    Trailer = any,\n    pages = any,\n    Pages = any,\n})\n -&gt; major integer\n -&gt; minor integer\n</code></pre> <p>@return <code>major</code> - major version number</p> <p>@return <code>minor</code> - minor version number</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L1017-L1029</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the version number of the pdf document.</p>"},{"location":"globals/pdfe/#pdfegetnofobjects","title":"pdfe.getnofobjects","text":"<p><pre><code>function pdfe.getnofobjects(doc: PdfeDocument {\n    catalog = any,\n    Catalog = any,\n    info = any,\n    Info = any,\n    trailer = any,\n    Trailer = any,\n    pages = any,\n    Pages = any,\n}) -&gt; nobj integer\n</code></pre> @param <code>doc</code> - Pdf document.</p> <p>@return <code>nobj</code> - Number of objects.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L1040-L1047</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return number of objects referenced in the XREF table.</p>"},{"location":"globals/pdfe/#pdfegetnofpages","title":"pdfe.getnofpages","text":"<p><pre><code>function pdfe.getnofpages(document: PdfeDocument {\n    catalog = any,\n    Catalog = any,\n    info = any,\n    Info = any,\n    trailer = any,\n    Trailer = any,\n    pages = any,\n    Pages = any,\n}) -&gt; npages integer\n</code></pre> @param <code>document</code> - Pdfe document.</p> <p>@return <code>npages</code> - Number of pages.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L1049-L1056</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the number of pages of the pdf document.</p>"},{"location":"globals/pdfe/#pdfegetmemoryusage","title":"pdfe.getmemoryusage","text":"<p><pre><code>function pdfe.getmemoryusage(doc: PdfeDocument {\n    catalog = any,\n    Catalog = any,\n    info = any,\n    Info = any,\n    trailer = any,\n    Trailer = any,\n    pages = any,\n    Pages = any,\n})\n -&gt; used integer\n -&gt; waste integer\n</code></pre> @param <code>doc</code> - Pdfe document.</p> <p>@return <code>used</code> - Used memory including waste.</p> <p>@return <code>waste</code> - Waste (E.g. optional keys of pdf objects that are not used.)</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L1058-L1069</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return memory usage of pplib library in bytes.</p>"},{"location":"globals/pdfe/#pdfegetcatalog","title":"pdfe.getcatalog","text":"<p><pre><code>function pdfe.getcatalog(doc: PdfeDocument {\n    catalog = any,\n    Catalog = any,\n    info = any,\n    Info = any,\n    trailer = any,\n    Trailer = any,\n    pages = any,\n    Pages = any,\n}) -&gt; catalog PdfeDictionary\n</code></pre> @param <code>doc</code> - Pdfe document.</p> <p>@return <code>catalog</code> - Catalog of the pdf.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L465-L471</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return pdf catalog.</p>"},{"location":"globals/pdfe/#pdfegettrailer","title":"pdfe.gettrailer","text":"<p><pre><code>function pdfe.gettrailer(doc: PdfeDocument {\n    catalog = any,\n    Catalog = any,\n    info = any,\n    Info = any,\n    trailer = any,\n    Trailer = any,\n    pages = any,\n    Pages = any,\n}) -&gt; trailor PdfeDictionary\n</code></pre> @param <code>doc</code> - Pdfe document</p> <p>@return <code>trailor</code> - Trailer of the pdf.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L473-L479</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return pdf trailer.</p>"},{"location":"globals/pdfe/#pdfegetinfo","title":"pdfe.getinfo","text":"<p><pre><code>function pdfe.getinfo(doc: PdfeDocument {\n    catalog = any,\n    Catalog = any,\n    info = any,\n    Info = any,\n    trailer = any,\n    Trailer = any,\n    pages = any,\n    Pages = any,\n}) -&gt; info PdfeDictionary\n</code></pre> @param <code>doc</code> - Pdfe document</p> <p>@return <code>info</code> - Info of the pdf.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L481-L487</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return pdf info.</p>"},{"location":"globals/pdfe/#pdfegetpage","title":"pdfe.getpage","text":"<p><pre><code>function pdfe.getpage(\n  doc: PdfeDocument {\n    catalog = any,\n    Catalog = any,\n    info = any,\n    Info = any,\n    trailer = any,\n    Trailer = any,\n    pages = any,\n    Pages = any,\n},\n  page: integer\n) -&gt; page PdfeDictionary\n</code></pre> @param <code>doc</code> - Pdfe document.</p> <p>@param <code>page</code> - Page number.</p> <p>@return <code>page</code> - Page object.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L1091-L1099</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return a specific pdf page.</p>"},{"location":"globals/pdfe/#pdfegetpages","title":"pdfe.getpages","text":"<p><pre><code>function pdfe.getpages(doc: PdfeDocument {\n    catalog = any,\n    Catalog = any,\n    info = any,\n    Info = any,\n    trailer = any,\n    Trailer = any,\n    pages = any,\n    Pages = any,\n}) -&gt; table table&lt;PdfeDictionary&gt;\n</code></pre> @param <code>doc</code> - Pdfe document.</p> <p>@return <code>table</code> - Lua table. Each item of the returned table is a PdfeDictionary of one page of the pdf.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L1114-L1122</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return a table of pages.</p>"},{"location":"globals/pdfe/#pdfegetbox","title":"pdfe.getbox","text":"<p><pre><code>function pdfe.getbox(\n  page: PdfeDictionary,\n  bbox_name: (\"MediaBox\"|\"CropBox\"|\"BleedBox\"|\"TrimBox\"|\"ArtBox\")\n) -&gt; bbox number[]\n</code></pre> @param <code>page</code> - Pdfe dictionary.</p> <p>@param <code>bbox_name</code> - Name of bounding box.</p> <p>@return <code>bbox</code> - [llx lly urx ury]</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L1136-L1161</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return bounding box of a pdf page.</p>"},{"location":"globals/pdfe/#pdfegetstring","title":"pdfe.getstring","text":"<p><pre><code>function pdfe.getstring(\n  dict_or_array: (PdfeDictionary|PdfeArray),\n  key_or_index: integer\n) -&gt; string string\n</code></pre> @param <code>dict_or_array</code> - Pdfe dictionary or array.</p> <p>@param <code>key_or_index</code> - Key or index.</p> <p>@return <code>string</code> - If the pdf string is hex encoded then the returned string is hex encoded too.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L1342-L1369</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return a pdf string object as a string.</p>"},{"location":"globals/pdfe/#pdfegetstring_1","title":"pdfe.getstring","text":"<p><pre><code>function pdfe.getstring(\n  dict_or_array: (PdfeDictionary|PdfeArray),\n  key_or_index: (string|integer),\n  decode: boolean\n)\n -&gt; string string\n -&gt; was_encoded boolean\n</code></pre> @param <code>dict_or_array</code> - Pdfe dictionary or array.</p> <p>@param <code>key_or_index</code> - Key or index.</p> <p>@param <code>decode</code> - <code>True</code>, if a hex encoded string shall be decoded.</p> <p>@return <code>was_encoded</code> - <code>True</code>, if string was hex encoded. Return value <code>was_encoded</code> is only available if <code>decode</code> is <code>false</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L1342-L1369</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return a pdf string object as a string.</p>"},{"location":"globals/pdfe/#pdfegetinteger","title":"pdfe.getinteger","text":"<p><pre><code>function pdfe.getinteger(\n  dict_or_array: (PdfeDictionary|PdfeArray),\n  key_or_index: (string|integer)\n) -&gt; value integer\n</code></pre> @param <code>dict_or_array</code> - Pdfe dictionary or array.</p> <p>@param <code>key_or_index</code> - Key or index.</p> <p>@return <code>value</code> - Integer.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L1371-L1383</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return a pdf integer object as integer.</p>"},{"location":"globals/pdfe/#pdfegetnumber","title":"pdfe.getnumber","text":"<p><pre><code>function pdfe.getnumber(\n  dict_or_array: (PdfeDictionary|PdfeArray),\n  key_or_index: (string|integer)\n) -&gt; value number\n</code></pre> @param <code>dict_or_array</code> - Pdfe dictionary or array.</p> <p>@param <code>key_or_index</code> - Key or index.</p> <p>Return a pdf number object as number.</p>"},{"location":"globals/pdfe/#pdfegetboolean","title":"pdfe.getboolean","text":"<p><pre><code>function pdfe.getboolean(\n  dict_or_array: (PdfeDictionary|PdfeArray),\n  key_or_index: (string|integer)\n) -&gt; value boolean\n</code></pre> @param <code>dict_or_array</code> - Pdfe dictionary or array.</p> <p>@param <code>key_or_index</code> - Key or index.</p> <p>Return a pdf boolean value as boolean.</p>"},{"location":"globals/pdfe/#pdfegetname","title":"pdfe.getname","text":"<p><pre><code>function pdfe.getname(\n  dict_or_array: (PdfeDictionary|PdfeArray),\n  key_or_index: (string|integer)\n) -&gt; value string\n</code></pre> @param <code>dict_or_array</code> - Pdfe dictionary or array.</p> <p>@param <code>key_or_index</code> - Key or index.</p> <p>@return <code>value</code> - Name.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L1413-L1425</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return a pdf name object as string.</p>"},{"location":"globals/pdfe/#pdfetype","title":"pdfe.type","text":"<pre><code>function pdfe.type(pdfe_obj: (PdfeDocument|PdfeDictionary|PdfeArray|PdfeStream|PdfeReference)) -&gt; pdfe_type string?\n</code></pre> <p>@return <code>pdfe_type</code> - Type of pdfe object.</p> <p>Note: Returns <code>nil</code> for all other objects like integer, string, etc.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L224-L235</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return a string representing the pdfe type of . returned string type of <code>&lt;pdfe_obj&gt;</code> pdfe PdfeDocument pdfe.dictionary PdfeDictionary pdfe.array PdfeArray pdfe.stream PdfeStream pdfe.reference PdfeReference"},{"location":"globals/pdfe/#pdfegetdictionary","title":"pdfe.getdictionary","text":"<p><pre><code>function pdfe.getdictionary(\n  dict_or_array: (PdfeDictionary|PdfeArray),\n  key_or_index: (string|integer)\n) -&gt; dict PdfeDictionary\n</code></pre> @param <code>dict_or_array</code> - Pdfe dictionary or array.</p> <p>@param <code>key_or_index</code> - Key or index.</p> <p>@return <code>dict</code> - Pdfe dictionary.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L1427-L1437</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return a pdf dictionary as a pdfe dictionary.</p>"},{"location":"globals/pdfe/#pdfegetarray","title":"pdfe.getarray","text":"<p><pre><code>function pdfe.getarray(\n  dict_or_array: (PdfeDictionary|PdfeArray),\n  key_or_index: (string|integer)\n) -&gt; array PdfeArray\n</code></pre> @param <code>dict_or_array</code> - Pdfe dictionary or array.</p> <p>@param <code>key_or_index</code> - Key or index.</p> <p>@return <code>array</code> - Pdfe array.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L1439-L1449</li> </ul> <p>Return a pdf array as a pdfe array.</p>"},{"location":"globals/pdfe/#pdfegetstream","title":"pdfe.getstream","text":"<p><pre><code>function pdfe.getstream(\n  dict_or_array: (PdfeDictionary|PdfeArray),\n  key_or_index: (string|integer)\n)\n -&gt; stream PdfeStream\n -&gt; dict PdfeDictionary\n</code></pre> @param <code>dict_or_array</code> - Pdfe dictionary or array.</p> <p>@param <code>key_or_index</code> - Key or index.</p> <p>@return <code>stream</code> - Pdfe stream.</p> <p>@return <code>dict</code> - Pdfe dictionary of the stream.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L1451-L1461</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return a pdf stream as a pdfe stream.</p> <p>The corresponding dictionary of the stream is returned too.</p>"},{"location":"globals/pdfe/#pdfegetfromstream","title":"pdfe.getfromstream","text":"<pre><code>function pdfe.getfromstream(\n  stream: PdfeStream,\n  key: integer\n)\n -&gt; type integer\n -&gt; value any\n -&gt; details any\n</code></pre> <p>@return <code>type</code> - Integer representing the type of a value. (See table below.)</p> <p>@return <code>value</code> - The value itself.</p> <p>@return <code>details</code> - Details about this value. (See table below.)</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L544-L570</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return a value of a pdf stream dictionary, including low level details about this value.</p> <p>Like <code>pdfe.getfromdictionary()</code> except that this functions works on a 'dictionary of a stream'.</p> Type PDF type Lua type Details 0 <code>none</code> <code>nil</code> 1 <code>null</code> <code>nil</code> 2 <code>boolean</code> <code>boolean</code> 3 <code>integer</code> <code>integer</code> 4 <code>number</code> <code>number</code> 5 <code>name</code> <code>string</code> 6 <code>string</code> <code>string</code> Is_hex? (1) 7 <code>array</code> <code>PdfeArray</code> Size of array 8 <code>dictionary</code> <code>PdfeDictionary</code> Size of dictionary 9 <code>stream</code> <code>PdfeStream</code> PdfeDictionary 10 <code>reference</code> <code>PdfeReference</code> Number of reference <p>(1) <code>true</code>, for hexadecimal string, <code>false</code> for normal string</p>"},{"location":"globals/pdfe/#pdfeopenstream","title":"pdfe.openstream","text":"<p><pre><code>function pdfe.openstream(\n  stream: PdfeStream,\n  decode: boolean?\n) -&gt; okay boolean\n</code></pre> @param <code>stream</code> - Pdfe stream object.</p> <p>@param <code>decode</code> - <code>True</code>, if stream should be decompressed.</p> <p>@return <code>okay</code> - <code>True</code>, if reading the stream was successful.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L764-L778</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Open a stream.</p>"},{"location":"globals/pdfe/#pdfeclosestream","title":"pdfe.closestream","text":"<p><pre><code>function pdfe.closestream(stream: PdfeStream)\n</code></pre> @param <code>stream</code> - Pdfe stream object</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L780-L791</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Close a stream.</p>"},{"location":"globals/pdfe/#pdfereadfromstream","title":"pdfe.readfromstream","text":"<p><pre><code>function pdfe.readfromstream(stream: PdfeStream)\n -&gt; contents string\n -&gt; size integer\n</code></pre> @param <code>stream</code> - Pdfe stream object.</p> <p>@return <code>contents</code> - Contents of stream.</p> <p>@return <code>size</code> - Length of stream.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L793-L812</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a stream object in chunks.</p>"},{"location":"globals/pdfe/#pdfereadwholestream","title":"pdfe.readwholestream","text":"<p><pre><code>function pdfe.readwholestream(\n  stream: PdfeStream,\n  decode: boolean\n)\n -&gt; contents string\n -&gt; size integer\n</code></pre> @param <code>stream</code> - Pdfe stream object.</p> <p>@param <code>decode</code> - <code>True</code>, if stream should be decompressed.</p> <p>@return <code>contents</code> - Contents of stream.</p> <p>@return <code>size</code> - Length of stream.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L728-L750</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read stream object as a whole. Opening and closing the stream with <code>pdfe.openstream()</code> and <code>pdfe.closestream()</code> is not necessary.</p>"},{"location":"globals/pdfe/#pdfepagestotable","title":"pdfe.pagestotable","text":"<p><pre><code>function pdfe.pagestotable(doc: PdfeDocument {\n    catalog = any,\n    Catalog = any,\n    info = any,\n    Info = any,\n    trailer = any,\n    Trailer = any,\n    pages = any,\n    Pages = any,\n}) -&gt; table table\n</code></pre> @param <code>doc</code> - Pdfe document.</p> <p>@return <code>table</code> - Lua table. Each item (page) of the returned table is a table itself like this: <code>{ page, size, objnum }</code> * <code>page</code> - pdfe dictionary of a page * <code>size</code> - number of keys of the <code>page</code> dictionary * <code>objnum</code> - pdf object number of the page object</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L686-L716</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return a table in which each item represents one page of a pdf.</p>"},{"location":"globals/pdfe/#pdfegetfromdictionary","title":"pdfe.getfromdictionary","text":"<pre><code>function pdfe.getfromdictionary(\n  dict: PdfeDictionary,\n  key: string\n)\n -&gt; type integer\n -&gt; value any\n -&gt; details any\n</code></pre> <p>@return <code>type</code> - Integer representing the type of a value. (See table below.)</p> <p>@return <code>value</code> - The value itself.</p> <p>@return <code>details</code> - Details about this value. (See table below.)</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L517-L542</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return a value of a pdf dictionary, including low level details about this value.</p> Type PDF type Lua type Details 0 <code>none</code> <code>nil</code> 1 <code>null</code> <code>nil</code> 2 <code>boolean</code> <code>boolean</code> 3 <code>integer</code> <code>integer</code> 4 <code>number</code> <code>number</code> 5 <code>name</code> <code>string</code> 6 <code>string</code> <code>string</code> Is_hex? (1) 7 <code>array</code> <code>PdfeArray</code> Size of array 8 <code>dictionary</code> <code>PdfeDictionary</code> Size of dictionary 9 <code>stream</code> <code>PdfeStream</code> PdfeDictionary 10 <code>reference</code> <code>PdfeReference</code> Number of reference <p>(1) <code>true</code>, for hexadecimal string, <code>false</code> for normal string</p>"},{"location":"globals/pdfe/#pdfegetfromarray","title":"pdfe.getfromarray","text":"<pre><code>function pdfe.getfromarray(\n  array: PdfeArray,\n  index: integer\n)\n -&gt; type integer\n -&gt; value any\n -&gt; details any\n</code></pre> <p>@return <code>type</code> - Integer representing the type of a value. (See table below.)</p> <p>@return <code>value</code> - The value itself.</p> <p>@return <code>details</code> - Details about this value. (See table below.)</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L501-L515</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return a value of a pdf dictionary, including low level details about this value.</p> Type PDF type Lua type Details 0 <code>none</code> <code>nil</code> 1 <code>null</code> <code>nil</code> 2 <code>boolean</code> <code>boolean</code> 3 <code>integer</code> <code>integer</code> 4 <code>number</code> <code>number</code> 5 <code>name</code> <code>string</code> 6 <code>string</code> <code>string</code> Is_hex? (1) 7 <code>array</code> <code>PdfeArray</code> Size of array 8 <code>dictionary</code> <code>PdfeDictionary</code> Size of dictionary 9 <code>stream</code> <code>PdfeStream</code> PdfeDictionary 10 <code>reference</code> <code>PdfeReference</code> Number of reference <p>(1) <code>true</code>, for hexadecimal string, <code>false</code> for normal string</p>"},{"location":"globals/pdfe/#pdfedictionarytotable","title":"pdfe.dictionarytotable","text":"<p><pre><code>function pdfe.dictionarytotable(dict: PdfeDictionary) -&gt; table table&lt;string,table&lt;integer,any,any&gt;&gt;\n</code></pre> @param <code>dict</code> - Pdfe dictionary.</p> <p>@return <code>table</code> - Lua table This function returns a lua table. Its keys are the keys of the pdfe dictionary and its values are what <code>pdfe.getfromdictionary(dict, key)</code> returns.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L651-L674</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Convert a pdfe dictionary into a lua table.</p>"},{"location":"globals/pdfe/#pdfearraytotable","title":"pdfe.arraytotable","text":"<p><pre><code>function pdfe.arraytotable(array: PdfeArray) -&gt; table table&lt;integer,table&lt;integer,any,any&gt;&gt;\n</code></pre> @param <code>array</code> - Pdfe array.</p> <p>@return <code>table</code> - Lua table This function returns a lua table. Its indices are the indices of the pdfe array and its values are what <code>pdfe.getfromarray(array, index)</code> returns.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L628-L649</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Convert a pdfe array into a lua table.</p>"},{"location":"globals/pdfe/#pdfegetfromreference","title":"pdfe.getfromreference","text":"<pre><code>function pdfe.getfromreference(ref: PdfeReference)\n -&gt; type integer\n -&gt; value any\n -&gt; details any\n</code></pre> <p>@return <code>type</code> - Type of value. (See table below.)</p> <p>@return <code>value</code> - The value itself.</p> <p>@return <code>details</code> - Details about this value. (See table below.)</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L1174-L1188</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the value of a reference, including low level details about this value.</p> Type PDF type Lua type Details 0 <code>none</code> <code>nil</code> 1 <code>null</code> <code>nil</code> 2 <code>boolean</code> <code>boolean</code> 3 <code>integer</code> <code>integer</code> 4 <code>number</code> <code>number</code> 5 <code>name</code> <code>string</code> 6 <code>string</code> <code>string</code> Is_hex? (1) 7 <code>array</code> <code>PdfeArray</code> Size of array 8 <code>dictionary</code> <code>PdfeDictionary</code> Size of dictionary 9 <code>stream</code> <code>PdfeStream</code> PdfeDictionary 10 <code>reference</code> <code>PdfeReference</code> Number of reference <p>(1) <code>true</code>, for hexadecimal string, <code>false</code> for normal string</p>"},{"location":"globals/pdfscanner/","title":"global pdfscanner","text":"<p>The <code>pdfscanner</code> library allows interpretation of PDF content streams and <code>/ToUnicode</code> (cmap) streams. You can get those streams from the <code>pdfe</code> library.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/pdfscanner/#methods","title":"methods","text":""},{"location":"globals/pdfscanner/#pdfscannerscan","title":"pdfscanner.scan","text":"<pre><code>function pdfscanner.scan(\n  pdf: (string|PdfeStream|PdfeArray),\n  operatortable: Operatorable,\n  info: table\n)\n</code></pre> <p>The first argument should be a Lua string or a stream or array object coming from the <code>pdfe</code> library. The second argument, <code>operatortable</code>, should be a Lua table where the keys are PDF operator name strings and the values are Lua functions (defined by you) that are used to process those operators. The functions are called whenever the scanner finds one of these PDF operators in the content stream(s). The functions are called with two arguments: the <code>scanner</code> object itself, and the <code>info</code> table that was passed are the third argument to <code>pdfscanner.scan</code>.</p> <p>Internally, <code>pdfscanner.scan</code> loops over the PDF operators in the stream(s), collecting operands on an internal stack until it finds a PDF operator. If that PDF operator's name exists in <code>operatortable</code>, then the associated function is executed. After the function has run (or when there is no function to execute) the internal operand stack is cleared in preparation for the next operator, and processing continues.</p> <p>The <code>scanner</code> argument to the processing functions is needed because it offers various methods to get the actual operands from the internal operand stack.</p> <pre><code>local operatortable = { }\n\noperatortable.Do = function(scanner,info)\n    local resources = info.resources\n    if resources then\n        local val     = scanner:pop()\n        local name    = val[2]\n        local xobject = resources.XObject\n        print(info.space .. \"Uses XObject \" .. name)\n        local resources = xobject.Resources\n        if resources then local newinfo =  { space     = info.space .. \"  \", resources = resources, } pdfscanner.scan(entry, operatortable, newinfo)\n        end\n    end\nend\n\nlocal function Analyze(filename)\n    local doc = pdfe.open(filename)\n    if doc then\n        local pages = doc.Pages\n        for i=1,#pages do local page = pages[i] local info = { space     = \"  \" , resources = page.Resources, } print(\"Page \" .. i)\n         -- pdfscanner.scan(page.Contents,operatortable,info) pdfscanner.scan(page.Contents(),operatortable,info)\n        end\n    end\nend\n\nAnalyze(\"foo.pdf\")\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfscannerlib.c#L680-L828</li> </ul>"},{"location":"globals/sha2/","title":"global sha2","text":"<p>Hashes conform <code>sha2</code></p> <p>This library is a side effect of the <code>pdfe</code> library that needs such helpers. The <code>sha2.digest256</code>, <code>sha2.digest384</code> and <code>sha2.digest512</code> functions accept a string and return a string with the hash.</p> <p>https://github.com/contextgarden/pplib https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/libs/pplib/pplib-src/src/util/utilsha.c</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/sha2/#methods","title":"methods","text":""},{"location":"globals/sha2/#sha2digest256","title":"sha2.digest256","text":"<pre><code>function sha2.digest256(data: string) -&gt;  string\n</code></pre> <p>@return  - binary string</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Example:</p> <pre><code>local function to_hex(str)\n  return (str:gsub('.', function (c)\n      return string.format('%02x', string.byte(c))\n  end))\nend\n\nprint(to_hex(sha2.digest256('test')))\n -- 9f86d081... (length 64)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: md5lib.c#L199-L210</li> </ul>"},{"location":"globals/sha2/#sha2digest384","title":"sha2.digest384","text":"<pre><code>function sha2.digest384(data: string) -&gt;  string\n</code></pre> <p>@return  - binary string</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Example:</p> <pre><code>local function to_hex(str)\n  return (str:gsub('.', function (c)\n      return string.format('%02x', string.byte(c))\n  end))\nend\n\nprint(to_hex(sha2.digest384('test')))\n -- 76841232... (length 96)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: md5lib.c#L212-L223</li> </ul>"},{"location":"globals/sha2/#sha2digest512","title":"sha2.digest512","text":"<pre><code>function sha2.digest512(data: string) -&gt;  string\n</code></pre> <p>@return  - binary string</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Example:</p> <pre><code>local function to_hex(str)\n  return (str:gsub('.', function (c)\n      return string.format('%02x', string.byte(c))\n  end))\nend\n\nprint(to_hex(sha2.digest512('test')))\n -- ee26b0dd ... (length 128)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: md5lib.c#L225-L236</li> </ul>"},{"location":"globals/sio/","title":"global sio","text":"<p>Binary input from strings with <code>sio</code> (string input-output)</p> <p>This library provides a set of functions for reading numbers from a string and in addition to the regular <code>io</code> library functions.</p> <p>There are eight additional little endian variants for the <code>cardinal[1-4]</code> and <code>integer[1-4]</code> readers: <code>cardinal[1-4]le</code> and <code>integer[1-4]le</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c</li> <li>Source file of the <code>LuaTeX</code> manual: luatex-lua.tex#L701-714</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/sio/#methods","title":"methods","text":""},{"location":"globals/sio/#sioreadcardinal1","title":"sio.readcardinal1","text":"<p><pre><code>function sio.readcardinal1(\n  text: string,\n  position: integer\n) -&gt;  integer?\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>@return  - A 1 byte unsigned integer.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a 1 byte unsigned integer (8-bit) from a string.</p> <p>Example:</p> <pre><code>assert.is_nil(sio.readcardinal1(\"test\", 0))\n-- t: decimal=116 hexadecimal=74 binary=01110100\nassert.equals(sio.readcardinal1(\"test\", 1), 116)\n-- e: decimal=101 hexadecimal=65 binary=01100101\nassert.equals(sio.readcardinal1(\"test\", 2), 101)\n-- s: decimal=115 hexadecimal=73 binary=01110011\nassert.equals(sio.readcardinal1(\"test\", 3), 115)\n-- t: decimal=116 hexadecimal=74 binary=01110100\nassert.equals(sio.readcardinal1(\"test\", 4), 116)\nassert.is_nil(sio.readcardinal1(\"test\", 5))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L124-L135</li> </ul> <p>@see fio.readcardinal1</p>"},{"location":"globals/sio/#sioreadcardinal2","title":"sio.readcardinal2","text":"<p><pre><code>function sio.readcardinal2(\n  text: string,\n  position: integer\n) -&gt;  integer?\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>@return  - A 2 byte unsigned integer.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a 2 byte unsigned integer (16-bit) from a string.</p> <p>Example:</p> <pre><code>assert.equals(sio.readcardinal2(\"test\", 0), 116)\n-- t.e: decimal=29797 hexadecimal=74.65 binary=01110100.01100101\nassert.equals(sio.readcardinal2(\"test\", 1), 29797)\n-- s.t: decimal=29556 hexadecimal=73.74 binary=01110011.01110100\nassert.equals(sio.readcardinal2(\"test\", 3), 29556)\nassert.is_nil(sio.readcardinal2(\"test\", 4))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L160-L172</li> </ul> <p>@see fio.readcardinal2</p>"},{"location":"globals/sio/#sioreadcardinal3","title":"sio.readcardinal3","text":"<p><pre><code>function sio.readcardinal3(\n  text: string,\n  position: integer\n) -&gt;  integer?\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>@return  - A 3 byte unsigned integer.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a 3 byte unsigned integer (24-bit) from a string.</p> <p>Example:</p> <pre><code>assert.equals(sio.readcardinal3(\"test\", 0), 29797)\n-- l.u.a: decimal=7107937 hexadecimal=6C.75.61 binary=01101100.01110101.01100001\nassert.equals(sio.readcardinal3(\"luatex\", 1), 7107937)\n-- t.e.x: decimal=7628152 hexadecimal=74.65.78 binary=01110100.01100101.01111000\nassert.equals(sio.readcardinal3(\"luatex\", 4), 7628152)\nassert.is_nil(sio.readcardinal3(\"test\", 5))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L212-L225</li> </ul> <p>@see fio.readcardinal3</p>"},{"location":"globals/sio/#sioreadcardinal4","title":"sio.readcardinal4","text":"<p><pre><code>function sio.readcardinal4(\n  text: string,\n  position: integer\n) -&gt;  integer?\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>@return  - A 4 byte unsigned integer.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a 4 byte unsigned integer (32-bit) from a string.</p> <p>Example:</p> <pre><code>assert.equals(sio.readcardinal4(\"test\", 0), 7628147)\n-- t.e.s.t:\n-- decimal=1952805748\n-- hexadecimal=74.65.73.74\n-- binary=01110100.01100101.01110011.01110100\nassert.equals(sio.readcardinal4(\"test\", 1), 1952805748)\nassert.is_nil(sio.readcardinal4(\"test\", 2))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L268-L282</li> </ul> <p>@see fio.readcardinal4</p>"},{"location":"globals/sio/#sioreadcardinaltable","title":"sio.readcardinaltable","text":"<p><pre><code>function sio.readcardinaltable(\n  text: string,\n  position: integer,\n  number: integer,\n  bytes: (1|2|3|4)\n) -&gt;  table&lt;integer,integer&gt;\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>@param <code>number</code> - The number of integers in the resulting table.</p> <p>@param <code>bytes</code> - Specify 1 for 1 byte unsigned integers, 2 for a 2 byte unsigned integers.</p> <p>Read <code>number</code> unsigned integers of <code>bytes</code> as a table from a string.</p> <p>Example:</p> <pre><code>local t = sio.readcardinaltable(\"test\", 1, 4, 1)\n-- t: decimal=116 hexadecimal=74 binary=01110100\nassert.equals(t[1], 116)\n-- e: decimal=101 hexadecimal=65 binary=01100101\nassert.equals(t[2], 101)\n-- s: decimal=115 hexadecimal=73 binary=01110011\nassert.equals(t[3], 115)\n-- t: decimal=116 hexadecimal=74 binary=01110100\nassert.equals(t[4], 116)\n</code></pre> <p>@see fio.readcardinaltable</p>"},{"location":"globals/sio/#sioreadcardinal1le","title":"sio.readcardinal1le","text":"<p><pre><code>function sio.readcardinal1le(\n  text: string,\n  position: integer\n) -&gt;  integer\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>Read a 1 byte unsigned little endian integer (8-bit) from a string.</p> <p>Example:</p> <pre><code>assert.is_nil(sio.readinteger1le(\"test\", 0))\n-- t: decimal=116 hexadecimal=74 binary=01110100\nassert.equals(sio.readinteger1le(\"test\", 1), 116)\n-- e: decimal=101 hexadecimal=65 binary=01100101\nassert.equals(sio.readinteger1le(\"test\", 2), 101)\n-- s: decimal=115 hexadecimal=73 binary=01110011\nassert.equals(sio.readinteger1le(\"test\", 3), 115)\n-- t: decimal=116 hexadecimal=74 binary=01110100\nassert.equals(sio.readinteger1le(\"test\", 4), 116)\nassert.is_nil(sio.readinteger1le(\"test\", 5))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L124-L135</li> </ul> <p>little endian variant</p> <p>@see fio.readcardinal1le</p>"},{"location":"globals/sio/#sioreadcardinal2le","title":"sio.readcardinal2le","text":"<p><pre><code>function sio.readcardinal2le(\n  text: string,\n  position: integer\n) -&gt;  integer\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>Read a 2 byte unsigned little endian integer (16-bit) from a string.</p> <p>Example:</p> <pre><code>assert.equals(sio.readinteger2le(\"test\", 0), 29696)\nassert.equals(sio.readinteger2le(\"test\", 1), 25972)\nassert.equals(sio.readinteger2le(\"test\", 2), 29541)\nassert.equals(sio.readinteger2le(\"test\", 3), 29811)\nassert.is_nil(sio.readinteger2le(\"test\", 4))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L173-L185</li> </ul> <p>little endian variant</p> <p>@see fio.readcardinal2le</p>"},{"location":"globals/sio/#sioreadcardinal3le","title":"sio.readcardinal3le","text":"<p><pre><code>function sio.readcardinal3le(\n  text: string,\n  position: integer\n) -&gt;  integer\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>Read a 3 byte unsigned little endian integer (24-bit) from a string.</p> <p>Example:</p> <pre><code>assert.equals(sio.readinteger3le(\"test\", 0), 6648832)\nassert.equals(sio.readinteger3le(\"test\", 1), 7562612)\nassert.equals(sio.readinteger3le(\"test\", 2), 7631717)\nassert.is_nil(sio.readinteger3le(\"test\", 3))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L226-L239</li> </ul> <p>little endian variant</p> <p>@see fio.readcardinal3le</p>"},{"location":"globals/sio/#sioreadcardinal4le","title":"sio.readcardinal4le","text":"<p><pre><code>function sio.readcardinal4le(\n  text: string,\n  position: integer\n) -&gt;  integer\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>Read a 4 byte unsigned little endian integer (32-bit) from a string.</p> <p>Example:</p> <pre><code>assert.equals(sio.readinteger4le(\"test\", 0), 1936028672)\nassert.equals(sio.readinteger4le(\"test\", 1), 1953719668)\nassert.equals(sio.readinteger4le(\"test\", 2), nil)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L283-L297</li> </ul> <p>little endian variant</p> <p>@see fio.readcardinal4le</p>"},{"location":"globals/sio/#sioreadinteger1","title":"sio.readinteger1","text":"<p><pre><code>function sio.readinteger1(\n  text: string,\n  position: integer\n) -&gt;  integer\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>@return  - a 1 byte signed integer</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a 1 byte signed integer (8-bit) from a string.</p> <p>Example:</p> <pre><code>assert.is_nil(sio.readinteger1(\"test\", 0))\n-- t: decimal=116 hexadecimal=74 binary=01110100\nassert.equals(sio.readinteger1(\"test\", 1), 116)\n-- e: decimal=101 hexadecimal=65 binary=01100101\nassert.equals(sio.readinteger1(\"test\", 2), 101)\n-- s: decimal=115 hexadecimal=73 binary=01110011\nassert.equals(sio.readinteger1(\"test\", 3), 115)\n-- t: decimal=116 hexadecimal=74 binary=01110100\nassert.equals(sio.readinteger1(\"test\", 4), 116)\nassert.is_nil(sio.readinteger1(\"test\", 5))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L444-L458</li> </ul> <p>@see fio.readinteger1</p>"},{"location":"globals/sio/#sioreadinteger2","title":"sio.readinteger2","text":"<p><pre><code>function sio.readinteger2(\n  text: string,\n  position: integer\n) -&gt;  integer\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>@return  - a 2 byte signed integer</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a 2 byte signed integer (16-bit) from a string.</p> <p>Example:</p> <pre><code>assert.equals(sio.readinteger2(\"test\", 0), 116)\nassert.equals(sio.readinteger2(\"test\", 1), 29797)\nassert.equals(sio.readinteger2(\"test\", 2), 25971)\nassert.equals(sio.readinteger2(\"test\", 3), 29556)\nassert.is_nil(sio.readinteger2(\"test\", 4))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L485-L500</li> </ul> <p>@see fio.readinteger2</p>"},{"location":"globals/sio/#sioreadinteger3","title":"sio.readinteger3","text":"<p><pre><code>function sio.readinteger3(\n  text: string,\n  position: integer\n) -&gt;  integer\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>@return  - a 3 byte signed integer</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a 3 byte signed integer (24-bit) from a string.</p> <p>Example:</p> <pre><code>assert.equals(sio.readinteger3(\"test\", 0), 29797)\nassert.equals(sio.readinteger3(\"test\", 1), 7628147)\nassert.equals(sio.readinteger3(\"test\", 2), 6648692)\nassert.is_nil(sio.readinteger3(\"test\", 3))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L545-561</li> </ul> <p>@see fio.readinteger3</p>"},{"location":"globals/sio/#sioreadinteger4","title":"sio.readinteger4","text":"<p><pre><code>function sio.readinteger4(\n  text: string,\n  position: integer\n) -&gt;  integer\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>@return  - a 4 byte signed integer</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Read a 4 byte signed integer (32-bit) from a file.</p> <p>Example:</p> <pre><code>assert.equals(sio.readinteger4(\"test\", 0), 7628147)\nassert.equals(sio.readinteger4(\"test\", 1), 1952805748)\nassert.is_nil(sio.readinteger4(\"test\", 2))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L609-626</li> </ul> <p>@see fio.readinteger4</p>"},{"location":"globals/sio/#sioreadintegertable","title":"sio.readintegertable","text":"<p><pre><code>function sio.readintegertable(\n  text: string,\n  position: integer,\n  number: integer,\n  bytes: (1|2|3|4)\n) -&gt;  table&lt;integer,integer&gt;\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>@param <code>number</code> - The number of integers in the resulting table.</p> <p>@param <code>bytes</code> - Specify 1 for 1 byte signed integers, 2 for a 2 byte signed integers, and so on.</p> <p>Read <code>number</code> signed integers of <code>bytes</code> as a table from a string.</p> <p>Example:</p> <pre><code>local t = sio.readintegertable(\"test\", 1, 4, 1)\n-- t: decimal=116 hexadecimal=74 binary=01110100\nassert.equals(t[1], 116)\n-- e: decimal=101 hexadecimal=65 binary=01100101\nassert.equals(t[2], 101)\n-- s: decimal=115 hexadecimal=73 binary=01110011\nassert.equals(t[3], 115)\n-- t: decimal=116 hexadecimal=74 binary=01110100\nassert.equals(t[4], 116)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L717-798</li> </ul> <p>@see fio.readintegertable</p>"},{"location":"globals/sio/#sioreadinteger1le","title":"sio.readinteger1le","text":"<p><pre><code>function sio.readinteger1le(\n  text: string,\n  position: integer\n) -&gt;  integer\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>Read a 1 byte signed little endian integer (8-bit) from a string.</p> <p>Example:</p> <pre><code>assert.is_nil(sio.readinteger1le(\"test\", 0))\n-- t: decimal=116 hexadecimal=74 binary=01110100\nassert.equals(sio.readinteger1le(\"test\", 1), 116)\n-- e: decimal=101 hexadecimal=65 binary=01100101\nassert.equals(sio.readinteger1le(\"test\", 2), 101)\n-- s: decimal=115 hexadecimal=73 binary=01110011\nassert.equals(sio.readinteger1le(\"test\", 3), 115)\n-- t: decimal=116 hexadecimal=74 binary=01110100\nassert.equals(sio.readinteger1le(\"test\", 4), 116)\nassert.is_nil(sio.readinteger1le(\"test\", 5))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L444-L458 little endian variant</li> </ul> <p>@see fio.readinteger1le</p>"},{"location":"globals/sio/#sioreadinteger2le","title":"sio.readinteger2le","text":"<p><pre><code>function sio.readinteger2le(\n  text: string,\n  position: integer\n) -&gt;  integer\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>Read a 2 byte signed little endian integer (16-bit) from a string.</p> <p>Example:</p> <pre><code>assert.equals(sio.readinteger2le(\"test\", 0), 29696)\nassert.equals(sio.readinteger2le(\"test\", 1), 25972)\nassert.equals(sio.readinteger2le(\"test\", 2), 29541)\nassert.equals(sio.readinteger2le(\"test\", 3), 29811)\nassert.is_nil(sio.readinteger2le(\"test\", 4))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L501-L516</li> </ul> <p>little endian variant</p> <p>@see fio.readinteger2le</p>"},{"location":"globals/sio/#sioreadinteger3le","title":"sio.readinteger3le","text":"<p><pre><code>function sio.readinteger3le(\n  text: string,\n  position: integer\n) -&gt;  integer\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>Read a 3 byte signed little endian integer (24-bit) from a string.</p> <p>Example:</p> <pre><code>assert.equals(sio.readinteger3le(\"test\", 0), 6648832)\nassert.equals(sio.readinteger3le(\"test\", 1), 7562612)\nassert.equals(sio.readinteger3le(\"test\", 2), 7631717)\nassert.is_nil(sio.readinteger3le(\"test\", 3))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L562-578</li> </ul> <p>little endian variant</p> <p>@see fio.readinteger3le</p>"},{"location":"globals/sio/#sioreadinteger4le","title":"sio.readinteger4le","text":"<p><pre><code>function sio.readinteger4le(\n  text: string,\n  position: integer\n) -&gt;  integer\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>Read a 4 byte signed little endian integer (32-bit) from a string.</p> <p>Example:</p> <pre><code>assert.equals(sio.readinteger4le(\"test\", 0), 1936028672)\nassert.equals(sio.readinteger4le(\"test\", 1), 1953719668)\nassert.equals(sio.readinteger4le(\"test\", 2), nil)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L627-644</li> </ul> <p>little endian variant</p> <p>@see fio.readinteger4le</p>"},{"location":"globals/sio/#sioreadfixed2","title":"sio.readfixed2","text":"<p><pre><code>function sio.readfixed2(\n  text: string,\n  position: integer\n) -&gt;  number?\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>Read a 2 byte float (used in font files) from a string.</p> <p>Example:</p> <pre><code>assert.numbers(sio.readfixed2(\"test\", 0), 0.453125)\nassert.numbers(sio.readfixed2(\"test\", 1), 116.39453125)\nassert.is_nil(sio.readfixed2(\"test\", 2))\nassert.is_nil(sio.readfixed2(\"test\", 3))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L815-828</li> </ul> <p>@see fio.readfixed2</p>"},{"location":"globals/sio/#sioreadfixed4","title":"sio.readfixed4","text":"<p><pre><code>function sio.readfixed4(\n  text: string,\n  position: integer\n) -&gt;  number?\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>Read a 4 byte float (used in font files) from a string.</p> <p>Example:</p> <pre><code>assert.numbers(sio.readfixed4(\"test\", 0), 116.39628601074)\nassert.numbers(sio.readfixed4(\"test\", 1), 29797.45098877)\nassert.is_nil(sio.readfixed4(\"test\", 2))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L845-860</li> </ul> <p>@see fio.readfixed4</p>"},{"location":"globals/sio/#sioread2dot14","title":"sio.read2dot14","text":"<p><pre><code>function sio.read2dot14(\n  text: string,\n  position: integer\n) -&gt;  number?\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>Read a 2 byte float (used in font files) from a string.</p> <p>Example:</p> <pre><code>assert.numbers(sio.read2dot14(\"test\", 1), 1.8186645507812)\nassert.numbers(sio.read2dot14(\"test\", 2), 1.5851440429688)\nassert.numbers(sio.read2dot14(\"test\", 3), 1.803955078125)\nassert.is_nil(sio.read2dot14(\"test\", 4))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L876-889</li> <li>Corresponding fontforge C source code: mem.c#L101-L107</li> <li>Corresponding fontforge C source code: ttf2eps.c#L418-L424</li> </ul> <p>@see fio.read2dot14</p>"},{"location":"globals/sio/#sioreadbytes","title":"sio.readbytes","text":"<p><pre><code>function sio.readbytes(\n  text: string,\n  position: integer,\n  number: integer\n) -&gt;  integer ...\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>@param <code>number</code> - The number of bytes to be read.</p> <p>Read <code>number</code> bytes from a string.</p> <p>Example:</p> <pre><code>local b1, b2, b3, b4 = sio.readbytes(\"test\", 1, 4)\n-- t: decimal=116 hexadecimal=74 binary=01110100\nassert.equals(b1, 116)\n-- e: decimal=101 hexadecimal=65 binary=01100101\nassert.equals(b2, 101)\n-- s: decimal=115 hexadecimal=73 binary=01110011\nassert.equals(b3, 115)\n-- t: decimal=116 hexadecimal=74 binary=01110100\nassert.equals(b4, 116)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L982-1001</li> </ul> <p>@see fio.readbytes</p>"},{"location":"globals/sio/#sioreadbytetable","title":"sio.readbytetable","text":"<p><pre><code>function sio.readbytetable(\n  text: string,\n  position: integer,\n  number: integer\n) -&gt;  table&lt;integer,integer&gt;\n</code></pre> @param <code>text</code> - A string to read from.</p> <p>@param <code>position</code> - The position in bytes from which to read. <code>1</code> and not <code>0</code> reads from the first byte.</p> <p>@param <code>number</code> - The number of bytes to be read.</p> <p>Read <code>number</code> bytes as a table from a string.</p> <p>Example:</p> <pre><code>local t = sio.readbytetable(\"test\", 1, 4)\n-- t: decimal=116 hexadecimal=74 binary=01110100\nassert.equals(t[1], 116)\n-- e: decimal=101 hexadecimal=65 binary=01100101\nassert.equals(t[2], 101)\n-- s: decimal=115 hexadecimal=73 binary=01110011\nassert.equals(t[3], 115)\n-- t: decimal=116 hexadecimal=74 binary=01110100\nassert.equals(t[4], 116)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: liolibext.c#L945-965</li> </ul> <p>@see fio.readbytetable</p>"},{"location":"globals/status/","title":"global status","text":"<p>This library contains a number of run-time configuration items that you may find useful in message reporting, as well as an iterator function that gets all of the names and values as a <code>table</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/status/#methods","title":"methods","text":""},{"location":"globals/status/#statuslist","title":"status.list","text":"<pre><code>function status.list() -&gt;  StatusInfo {\n    output_active = boolean,\n    best_page_break = Node,\n    filename = string,\n    inputid = integer,\n    linenumber = integer,\n    lasterrorstring = string,\n    lastluaerrorstring = string,\n    lastwarningtag = string,\n    lastwarningstring = string,\n    lasterrorcontext = string,\n    pdf_gone = integer,\n    pdf_ptr = integer,\n    ...(+65)\n}\n</code></pre> <p>The keys in the table are the known items, the value is the current value. Almost all of the values in <code>status</code> are fetched through a metatable at run-time whenever they are accessed, so you cannot use <code>pairs</code> on <code>status</code>, but you can use <code>pairs</code> on <code>info</code>, of course. If you do not need the full list, you can also ask for a single item by using its name as an index into <code>status</code>.</p> <p>Example:</p> <pre><code>\\catcode`_=12\n\\directlua{\n  info = status.list()\n  for key, value in pairs(info) do\n    tex.print('\"' .. key .. '\": '.. tostring(value), '\\string\\\\par')\n  end\n}\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lstatslib.c#L476-L488</li> </ul>"},{"location":"globals/status/#statusresetmessages","title":"status.resetmessages","text":"<pre><code>function status.resetmessages()\n</code></pre> <p>Wipe error and warning messages.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lstatslib.c#L490-L501</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/status/#statussetexitcode","title":"status.setexitcode","text":"<pre><code>function status.setexitcode(code: integer)\n</code></pre> <p>Set the exit code.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lstatslib.c#L503-L506</li> </ul>"},{"location":"globals/string/","title":"global string","text":"<p>The <code>string</code> library has a few extra functions.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/string/#methods","title":"methods","text":""},{"location":"globals/string/#stringexplode","title":"string.explode","text":"<p><pre><code>function string.explode(\n  text: string,\n  separator: string?\n) -&gt;  string[]\n</code></pre> @param <code>text</code> - A text that is to be divided into several substrings.</p> <p>@param <code>separator</code> - A separator that is used to split the string (default <code>+</code>).</p> <p>Break a string into pieces.</p> <p>This functions splits a stringa into sub-strings based on the value of the string argument <code>separator</code>. The second argument is a string that is either empty (this splits the string into characters), a single character (this splits on each occurrence of that character, possibly introducing empty strings), or a single character followed by the plus sign <code>+</code> (this special version does not create empty sub-strings). The default value for <code>separator</code> is <code>+</code> (multiple spaces). Note: <code>separator</code> is not hidden by surrounding braces as it would be if this function was written in TeX macros.</p> <p>Example:</p> <pre><code>for _, word in ipairs(string.explode(\"one  two three\")) do\n  print(word)\nend\n-- one\n-- two\n-- three\n\nfor _, word in ipairs(string.explode(\"one,,two,three\", ',')) do\n  print(word)\nend\n\n-- one\n--\n-- two\n-- three\n\nfor _, word in ipairs(string.explode(\"one,,two,three\", ',+')) do\n  print(word)\nend\n-- one\n-- two\n-- three\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lstrlibext.c#L247-309</li> <li>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/4f2b914d365bab8a2747afe6e8c86d0f1c8475f7/manual/luatex-lua.tex#L399-409</li> </ul>"},{"location":"globals/string/#stringutfvalue","title":"string.utfvalue","text":"<p><pre><code>function string.utfvalue(text: string)\n -&gt;  integer\n -&gt;  integer ...\n</code></pre> @param <code>text</code> - The input string.</p> <p>@return  - The Unicode codepoints of the characters in the given string.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - The Unicode codepoints of the characters in the given string.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the Unicode codepoints of the characters in the given string.</p> <p>Example:</p> <pre><code>local a = string.utfvalue(\"abc\")\nprint(a) -- 97\n\nlocal a, b, c = string.utfvalue(\"abc\")\nprint(a, b, c) -- 97 98 99\n\nprint(string.utfvalue(\"abc\")) -- 97 98 99\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lstrlibext.c#L421-L461</li> <li>Source file of the <code>LuaTeX</code> manual: luatex-lua.tex#L418</li> </ul> <p>@see string.utfvalues</p>"},{"location":"globals/string/#stringutfvalues","title":"string.utfvalues","text":"<p><pre><code>function string.utfvalues(text: string) -&gt; code_point fun() -&gt; integer\n</code></pre> @param <code>text</code> - The input string.</p> <p>@return <code>code_point</code> - an integer value in the Unicode range \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Provide an iterator function that iterates over each character of the string by returning an integer value in the Unicode range.</p> <p>Example:</p> <p><pre><code>for code_point in string.utfvalues(\"abc\") do\n  print(code_point)\nend\n-- 97\n-- 98\n-- 99\n</code></pre> Reference:</p> <ul> <li>Corresponding C source code: lstrlibext.c#L183-L189</li> <li>Source file of the <code>LuaTeX</code> manual: luatex-lua.tex#L418</li> </ul> <p>@see string.utfvalue</p>"},{"location":"globals/string/#stringutfcharacter","title":"string.utfcharacter","text":"<p><pre><code>function string.utfcharacter(\n  code_point: integer,\n  ...: integer\n) -&gt;  string\n</code></pre> @param <code>code_point</code> - A Unicode code point</p> <p>@param <code>...</code> - For each character a integer argument</p> <p>@return  - A string with the characters of the given code points.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Convert multiple unicode code points into a string.</p> <p>Example:</p> <pre><code>print(string.utfcharacter(97, 98, 99)) -- abc\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lstrlibext.c#L402-L412</li> <li>Source file of the <code>LuaTeX</code> manual: luatex-lua.tex#L421</li> </ul>"},{"location":"globals/string/#stringutfcharacters","title":"string.utfcharacters","text":"<p><pre><code>function string.utfcharacters(text: string) -&gt; character fun() -&gt; string\n</code></pre> @param <code>text</code> - The input string.</p> <p>@return <code>character</code> - a string with a single UTF-8 token in it</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Provide an iterator function that iterates over each character of the string by returning a string with a single UTF-8 token in it.</p> <p>Example:</p> <pre><code>for character in string.utfcharacters(\"\\u{61}\\u{62}\\u{63}\") do\n  print(character)\nend\n-- a\n-- b\n-- c\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lstrlibext.c#L128-L134</li> <li>Source file of the <code>LuaTeX</code> manual: luatex-lua.tex#L469-470</li> </ul>"},{"location":"globals/string/#stringutflength","title":"string.utflength","text":"<p><pre><code>function string.utflength(text: string) -&gt;  integer\n</code></pre> @param <code>text</code> - The input string.</p> <p>@return  - The length of the given string</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the length of the given string.</p> <p>Example:</p> <pre><code>print(string.len(\"\u00e4\u00f6\u00fc\"))\nprint(string.utflength(\"\u00e4\u00f6\u00fc\"))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lstrlibext.c#L465-L488</li> <li>Source file of the <code>LuaTeX</code> manual: luatex-lua.tex#L473</li> </ul>"},{"location":"globals/string/#stringcharacters","title":"string.characters","text":"<p><pre><code>function string.characters(text: string) -&gt;  fun() -&gt; string\n</code></pre> @param <code>text</code> - The input string.</p> <p>@return  - A string containing one byte.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Provide an iterator function that iterates over each character of the string by returning a string containing one byte.</p> <p>Example:</p> <pre><code>for character in string.characters('abc') do\n  print(character)\nend\n-- a\n-- b\n-- c\n\nfor character in string.characters('\u00e4\u00f6\u00fc') do\n  print(character)\nend\n-- \ufffd\n-- \ufffd\n-- \ufffd\n-- \ufffd\n-- \ufffd\n-- \ufffd\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lstrlibext.c#L239-L245</li> <li>Source file of the <code>LuaTeX</code> manual: luatex-lua.tex#L424</li> </ul> <p>@see string.bytes</p>"},{"location":"globals/string/#stringcharacterpairs","title":"string.characterpairs","text":"<p><pre><code>function string.characterpairs(text: string) -&gt;  fun() -&gt; (string,string)\n</code></pre> @param <code>text</code> - The input string.</p> <p>@return  - Two strings of one byte each, or an empty second string if the string length was odd.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Provide an iterator function that iterates over each character of the string by returning two strings.</p> <p>Each of these returned strings contains one byte or an empty second string if the input string length was odd.</p> <p>Example:</p> <pre><code>for c1, c2 in string.characterpairs('\u00e4\u00f6\u00fc') do\n  print(c1, c2)\n  print(c1 .. c2)\nend\n-- \ufffd    \ufffd\n-- \u00e4\n-- \ufffd    \ufffd\n-- \u00f6\n-- \ufffd    \ufffd\n-- \u00fc\n\nfor c1, c2 in string.characterpairs('a') do\n  print(\"'\" .. c1 .. \"'\", \"'\" .. c2 .. \"'\")\nend\n-- 'a'  ''\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lstrlibext.c#L216-L222</li> <li>Source file of the <code>LuaTeX</code> manual: luatex-lua.tex#L427-428</li> </ul> <p>@see string.bytepairs</p>"},{"location":"globals/string/#stringbytes","title":"string.bytes","text":"<p><pre><code>function string.bytes(text: string) -&gt;  fun() -&gt; integer\n</code></pre> @param <code>text</code> - The input string.</p> <p>@return  - A single byte value.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Provide an iterator function that iterates over each character of the string by returning a single byte value.</p> <p>Example:</p> <pre><code>for byte in string.bytes('abc') do\n  print(byte)\nend\n-- 97\n-- 98\n-- 99\n\nfor byte in string.bytes('\u00e4\u00f6\u00fc') do\n  print(byte)\nend\n-- 195\n-- 164\n-- 195\n-- 182\n-- 195\n-- 188\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lstrlibext.c#L85-L91</li> <li>Source file of the <code>LuaTeX</code> manual: luatex-lua.tex#L431</li> </ul> <p>@see string.characters</p>"},{"location":"globals/string/#stringbytepairs","title":"string.bytepairs","text":"<p><pre><code>function string.bytepairs(text: string) -&gt;  fun() -&gt; (integer,integer?)\n</code></pre> @param <code>text</code> - The input string.</p> <p>@return  - Two byte values or <code>nil</code> as the second return value if the input string length was odd.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Provide an iterator function that iterates over each character of the string by returning two byte values or <code>nil</code>.</p> <p>If the input string has an odd length, <code>nil</code> is returned.</p> <p>Example:</p> <pre><code>for b1, b2 in string.bytepairs('abc') do\n  print(b1, b2)\nend\n-- 97   98\n-- 99   nil\n\nfor b1, b2 in string.bytepairs('\u00e4\u00f6\u00fc') do\n  print(b1, b2)\nend\n-- 195  164\n-- 195  182\n-- 195  188\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lstrlibext.c#L62-L68</li> <li>Source file of the <code>LuaTeX</code> manual: luatex-lua.tex#L434-435</li> </ul> <p>@see string.characterpairs</p>"},{"location":"globals/tex/","title":"global tex","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#methods","title":"methods","text":""},{"location":"globals/tex/#texset","title":"tex.set","text":"<p><pre><code>function tex.set(\n  global: \"global\",\n  parameter: InternalParameter,\n  ...: any\n)\n</code></pre> @param <code>global</code> - It is possible to use <code>global</code> as the first argument to <code>tex.set</code>; this makes the assignment global instead of local.</p> <p>@param <code>parameter</code> - The name of the TeX parameter.</p> <p>Set the given TeX parameter globally.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1714-1813</li> </ul>"},{"location":"globals/tex/#texset_1","title":"tex.set","text":"<p><pre><code>function tex.set(\n  parameter: InternalParameter,\n  ...: any\n)\n</code></pre> @param <code>parameter</code> - The name of the TeX parameter.</p> <p>Set the given TeX parameter.</p> <p>When you set a glue quantity you can either pass a <code>glue_spec</code> or upto five numbers.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1714-1813</li> </ul>"},{"location":"globals/tex/#texset_2","title":"tex.set","text":"<p><pre><code>function tex.set(\n  global: \"global\",\n  parameter: GlueParameter,\n  width: integer,\n  stretch: integer?,\n  stretch_order: integer?,\n  shrink: integer?,\n  shrink_order: integer?\n)\n</code></pre> @param <code>global</code> - It is possible to use <code>global</code> as the first argument to <code>tex.set</code>; this makes the assignment global instead of local.</p> <p>@param <code>parameter</code> - The name of the glue parameter.</p> <p>@param <code>width</code> - The horizontal or vertical displacement.</p> <p>@param <code>stretch</code> - An extra (positive) displacement or stretch amount.</p> <p>@param <code>stretch_order</code> - Factor applied to stretch amount.</p> <p>@param <code>shrink</code> - An extra (negative) displacement or shrink amount.</p> <p>@param <code>shrink_order</code> - Factor applied to shrink amount.</p> <p>Set the given glue parameter globally by specifying the <code>width</code>, <code>stretch</code>, <code>stretch_order</code>, <code>shrink</code> and <code>shrink_order</code> of the glue.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1714-1813</li> </ul>"},{"location":"globals/tex/#texset_3","title":"tex.set","text":"<p><pre><code>function tex.set(\n  parameter: GlueParameter,\n  width: integer,\n  stretch: integer?,\n  stretch_order: integer?,\n  shrink: integer?,\n  shrink_order: integer?\n)\n</code></pre> @param <code>parameter</code> - The name of the glue parameter.</p> <p>@param <code>width</code> - The horizontal or vertical displacement.</p> <p>@param <code>stretch</code> - An extra (positive) displacement or stretch amount.</p> <p>@param <code>stretch_order</code> - Factor applied to stretch amount.</p> <p>@param <code>shrink</code> - An extra (negative) displacement or shrink amount.</p> <p>@param <code>shrink_order</code> - Factor applied to shrink amount.</p> <p>Set the given glue parameter by specifying the <code>width</code>, <code>stretch</code>, <code>stretch_order</code>, <code>shrink</code> and <code>shrink_order</code> of the glue.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1714-1813</li> </ul>"},{"location":"globals/tex/#texset_4","title":"tex.set","text":"<p><pre><code>function tex.set(\n  global: \"global\",\n  parameter: GlueParameter,\n  glue_spec: GlueSpecNode {\n    width = integer,\n    stretch = integer,\n    stretch_order = integer,\n    shrink = integer,\n    shrink_order = integer,\n}\n)\n</code></pre> @param <code>global</code> - It is possible to use <code>global</code> as the first argument to <code>tex.set</code>; this makes the assignment global instead of local.</p> <p>@param <code>parameter</code> - The name of the glue parameter.</p> <p>@param <code>glue_spec</code> - A glue spec node.</p> <p>Set the given glue parameter globally using a <code>glue_spec</code> node.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1714-1813</li> </ul>"},{"location":"globals/tex/#texset_5","title":"tex.set","text":"<p><pre><code>function tex.set(\n  parameter: GlueParameter,\n  glue_spec: GlueSpecNode {\n    width = integer,\n    stretch = integer,\n    stretch_order = integer,\n    shrink = integer,\n    shrink_order = integer,\n}\n)\n</code></pre> @param <code>parameter</code> - The name of the glue parameter.</p> <p>@param <code>glue_spec</code> - A glue spec node.</p> <p>Set the given glue parameter using a <code>glue_spec</code> node.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1714-1813</li> </ul>"},{"location":"globals/tex/#texget","title":"tex.get","text":"<pre><code>function tex.get(\n  parameter: InternalParameter,\n  opts: boolean?\n) -&gt;  any ...\n</code></pre> <p>Query the given TeX parameter.</p> <p>The exact return values differ depending on the actual parameter.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L2120-L2200</li> </ul>"},{"location":"globals/tex/#texget_1","title":"tex.get","text":"<pre><code>function tex.get(parameter: GlueParameter) -&gt;  GlueSpecNode {\n    width = integer,\n    stretch = integer,\n    stretch_order = integer,\n    shrink = integer,\n    shrink_order = integer,\n}\n</code></pre>"},{"location":"globals/tex/#texget_2","title":"tex.get","text":"<pre><code>function tex.get(\n  parameter: GlueParameter,\n  all: true\n)\n -&gt; width integer\n -&gt; stretch integer\n -&gt; stretch_order integer\n -&gt; shrink integer\n -&gt; shrink_order integer\n</code></pre> <p>@return <code>width</code> - The horizontal or vertical displacement.</p> <p>@return <code>stretch</code> - An extra (positive) displacement or stretch amount.</p> <p>@return <code>stretch_order</code> - Factor applied to stretch amount.</p> <p>@return <code>shrink</code> - An extra (negative) displacement or shrink amount.</p> <p>@return <code>shrink_order</code> - Factor applied to shrink amount.</p> <p>Query the given glue parameter.</p> <p>The exact return values differ depending on the actual parameter.</p> <p>Glue is kind of special: The return value is a <code>glue_spec</code> node but when you pass <code>false</code> as last argument to <code>tex.get</code> you get the width of the glue and when you pass <code>true</code> you get all five values. Otherwise you get a node which is a copy of the internal value so you are responsible for its freeing at the Lua end.</p> <p>If you pass <code>true</code> to <code>get</code> you get 5 values returned for a glue and when you pass <code>false</code> you only get the width returned.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L2120-L2200</li> </ul>"},{"location":"globals/tex/#texget_3","title":"tex.get","text":"<pre><code>function tex.get(\n  parameter: GlueParameter,\n  all: false\n) -&gt; width integer\n</code></pre> <p>@return <code>width</code> - The horizontal or vertical displacement.</p> <p>Query the given glue parameter.</p> <p>The exact return values differ depending on the actual parameter.</p> <p>Glue is kind of special: The return value is a <code>glue_spec</code> node but when you pass <code>false</code> as last argument to <code>tex.get</code> you get the width of the glue and when you pass <code>true</code> you get all five values. Otherwise you get a node which is a copy of the internal value so you are responsible for its freeing at the Lua end.</p> <p>If you pass <code>true</code> to <code>get</code> you get 5 values returned for a glue and when you pass <code>false</code> you only get the width returned.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L2120-L2200</li> </ul>"},{"location":"globals/tex/#texsetattribute","title":"tex.setattribute","text":"<p><pre><code>function tex.setattribute(\n  global: \"global\",\n  register: (string|integer),\n  value: integer\n)\n</code></pre> @param <code>global</code> - It is possible to define values globally by using the string <code>global</code> as the first function argument.</p> <p>@param <code>register</code> - A register number or a predefined csname string from <code>\\attributedef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L1087-L1102</li> </ul>"},{"location":"globals/tex/#texsetattribute_1","title":"tex.setattribute","text":"<p><pre><code>function tex.setattribute(\n  register: (string|integer),\n  value: integer\n)\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\attributedef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L1087-L1102</li> </ul>"},{"location":"globals/tex/#texgetattribute","title":"tex.getattribute","text":"<p><pre><code>function tex.getattribute(register: (string|integer)) -&gt; value integer\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\attributedef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L1104-L1114</li> </ul>"},{"location":"globals/tex/#texisattribute","title":"tex.isattribute","text":"<p><pre><code>function tex.isattribute(register: (string|integer)) -&gt;  (false|integer)\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\attributedef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L1080-L1083</li> <li>Corresponding C source code: ltexlib.c#L350-L358</li> </ul>"},{"location":"globals/tex/#texsetcount","title":"tex.setcount","text":"<p><pre><code>function tex.setcount(\n  global: \"global\",\n  register: (string|integer),\n  value: integer\n)\n</code></pre> @param <code>global</code> - It is possible to define values globally by using the string <code>global</code> as the first function argument.</p> <p>@param <code>register</code> - A register number or a predefined csname string from <code>\\countdef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L1051-L1066</li> </ul>"},{"location":"globals/tex/#texsetcount_1","title":"tex.setcount","text":"<p><pre><code>function tex.setcount(\n  register: (string|integer),\n  value: integer\n)\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\countdef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L1051-L1066</li> </ul>"},{"location":"globals/tex/#texgetcount","title":"tex.getcount","text":"<p><pre><code>function tex.getcount(register: (string|integer)) -&gt; value integer\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\countdef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L1068-L1078</li> </ul>"},{"location":"globals/tex/#texiscount","title":"tex.iscount","text":"<p><pre><code>function tex.iscount(register: (string|integer)) -&gt;  (false|integer)\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\countdef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L1046-L1049</li> <li>Corresponding C source code: ltexlib.c#L350-L358</li> </ul>"},{"location":"globals/tex/#texsetdimen","title":"tex.setdimen","text":"<p><pre><code>function tex.setdimen(\n  global: \"global\",\n  register: (string|integer),\n  value: (integer|string)\n)\n</code></pre> @param <code>global</code> - It is possible to define values globally by using the string <code>global</code> as the first function argument.</p> <p>@param <code>register</code> - A register number or a predefined csname string from <code>\\dimendef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L818-L834</li> </ul>"},{"location":"globals/tex/#texgetdimen","title":"tex.getdimen","text":"<p><pre><code>function tex.getdimen(register: (string|integer)) -&gt; value integer\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\dimendef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L836-L846</li> </ul>"},{"location":"globals/tex/#texisdimen","title":"tex.isdimen","text":"<p><pre><code>function tex.isdimen(register: (string|integer)) -&gt;  (false|integer)\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\dimendef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L813-L816</li> <li>Corresponding C source code: ltexlib.c#L350-L358</li> </ul>"},{"location":"globals/tex/#texsetglue","title":"tex.setglue","text":"<p><pre><code>function tex.setglue(\n  global: \"global\",\n  register: (string|integer),\n  width: number?,\n  stretch: number?,\n  shrink: number?,\n  stretch_order: integer?,\n  shrink_order: integer?\n)\n</code></pre> @param <code>global</code> - It is possible to define values globally by using the string <code>global</code> as the first function argument.</p> <p>@param <code>register</code> - A register number or a predefined csname string from <code>\\skipdef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L884-L903</li> </ul>"},{"location":"globals/tex/#texsetglue_1","title":"tex.setglue","text":"<p><pre><code>function tex.setglue(\n  register: (string|integer),\n  width: number?,\n  stretch: number?,\n  shrink: number?,\n  stretch_order: integer?,\n  shrink_order: integer?\n)\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\skipdef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L884-L903</li> </ul>"},{"location":"globals/tex/#texgetglue","title":"tex.getglue","text":"<p><pre><code>function tex.getglue(register: (string|integer))\n -&gt; width integer\n -&gt; stretch integer\n -&gt; shrink integer\n -&gt; stretch_order integer\n -&gt; shrink_order integer\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\skipdef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L905-L949</li> </ul>"},{"location":"globals/tex/#texisglue","title":"tex.isglue","text":"<p><pre><code>function tex.isglue(register: (string|integer)) -&gt;  (false|integer)\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\skipdef</code>.</p> <p>Alias of tex.isskip()</p> <ul> <li> <p>Corresponding C source code: ltexlib.c#L848-L851</p> </li> <li> <p>Corresponding C source code: ltexlib.c#L350-L358</p> </li> </ul>"},{"location":"globals/tex/#texsetmuglue","title":"tex.setmuglue","text":"<p><pre><code>function tex.setmuglue(\n  global: \"global\",\n  register: (string|integer),\n  width: number?,\n  stretch: number?,\n  shrink: number?,\n  stretch_order: integer?,\n  shrink_order: integer?\n)\n</code></pre> @param <code>global</code> - It is possible to define values globally by using the string <code>global</code> as the first function argument.</p> <p>@param <code>register</code> - A register number or a predefined csname string from <code>\\muskipdef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L979-L998</li> </ul>"},{"location":"globals/tex/#texsetmuglue_1","title":"tex.setmuglue","text":"<p><pre><code>function tex.setmuglue(\n  register: (string|integer),\n  width: number?,\n  stretch: number?,\n  shrink: number?,\n  stretch_order: integer?,\n  shrink_order: integer?\n)\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\muskipdef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L979-L998</li> </ul>"},{"location":"globals/tex/#texgetmuglue","title":"tex.getmuglue","text":"<p><pre><code>function tex.getmuglue(register: (string|integer))\n -&gt; width integer\n -&gt; stretch integer\n -&gt; shrink integer\n -&gt; stretch_order integer\n -&gt; shrink_order integer\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\muskipdef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L1000-L1044</li> </ul>"},{"location":"globals/tex/#texismuglue","title":"tex.ismuglue","text":"<p><pre><code>function tex.ismuglue(register: (string|integer)) -&gt;  (false|integer)\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\muskipdef</code>.</p> <p>Alias of tex.ismuskip()</p> <ul> <li>Corresponding C source code: ltexlib.c#L951-L954</li> <li>Corresponding C source code: ltexlib.c#L350-L358</li> </ul>"},{"location":"globals/tex/#texsetmuskip","title":"tex.setmuskip","text":"<p><pre><code>function tex.setmuskip(\n  global: \"global\",\n  register: (string|integer),\n  value: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n)\n</code></pre> @param <code>global</code> - It is possible to define values globally by using the string <code>global</code> as the first function argument.</p> <p>@param <code>register</code> - A register number or a predefined csname string from <code>\\muskipdef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L956-L965</li> </ul>"},{"location":"globals/tex/#texsetmuskip_1","title":"tex.setmuskip","text":"<p><pre><code>function tex.setmuskip(\n  register: (string|integer),\n  value: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n)\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\muskipdef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L956-L965</li> </ul>"},{"location":"globals/tex/#texgetmuskip","title":"tex.getmuskip","text":"<p><pre><code>function tex.getmuskip(register: (string|integer)) -&gt; value Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\muskipdef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L967-L977</li> </ul>"},{"location":"globals/tex/#texismuskip","title":"tex.ismuskip","text":"<p><pre><code>function tex.ismuskip(register: (string|integer)) -&gt;  (false|integer)\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\muskipdef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L951-L954</li> <li>Corresponding C source code: ltexlib.c#L350-L358</li> </ul>"},{"location":"globals/tex/#texsetskip","title":"tex.setskip","text":"<p><pre><code>function tex.setskip(\n  global: \"global\",\n  register: (string|integer),\n  skip: GlueSpecNode {\n    width = integer,\n    stretch = integer,\n    stretch_order = integer,\n    shrink = integer,\n    shrink_order = integer,\n}\n)\n</code></pre> @param <code>global</code> - It is possible to define values globally by using the string <code>global</code> as the first function argument.</p> <p>@param <code>register</code> - A register number or a predefined csname string from <code>\\skipdef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L853-L866</li> </ul>"},{"location":"globals/tex/#texsetskip_1","title":"tex.setskip","text":"<p><pre><code>function tex.setskip(\n  register: (string|integer),\n  skip: GlueSpecNode {\n    width = integer,\n    stretch = integer,\n    stretch_order = integer,\n    shrink = integer,\n    shrink_order = integer,\n}\n)\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\skipdef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L853-L866</li> </ul>"},{"location":"globals/tex/#texgetskip","title":"tex.getskip","text":"<p><pre><code>function tex.getskip(register: (string|integer)) -&gt;  GlueSpecNode {\n    width = integer,\n    stretch = integer,\n    stretch_order = integer,\n    shrink = integer,\n    shrink_order = integer,\n}\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\skipdef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L868-L882</li> </ul>"},{"location":"globals/tex/#texisskip","title":"tex.isskip","text":"<p><pre><code>function tex.isskip(register: (string|integer)) -&gt;  (false|integer)\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\skipdef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L848-L851</li> <li>Corresponding C source code: ltexlib.c#L350-L358</li> </ul>"},{"location":"globals/tex/#texsettoks","title":"tex.settoks","text":"<p><pre><code>function tex.settoks(\n  global: \"global\",\n  register: (string|integer),\n  toks: string\n)\n</code></pre> @param <code>global</code> - It is possible to define values globally by using the string <code>global</code> as the first function argument.</p> <p>@param <code>register</code> - A register number or a predefined csname string from <code>\\toksdef</code>.</p> <p>Set a toks register. Also accepts a predefined csname string.</p> <ul> <li>Corresponding C source code: ltexlib.c#L1125-L1158</li> </ul>"},{"location":"globals/tex/#texgettoks","title":"tex.gettoks","text":"<p><pre><code>function tex.gettoks(register: (string|integer)) -&gt; toks string\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\toksdef</code>.</p> <p>Get a toks register. Also accepts a predefined csname string.</p> <ul> <li>Corresponding C source code: ltexlib.c#L1197-L1209</li> </ul>"},{"location":"globals/tex/#texistoks","title":"tex.istoks","text":"<p><pre><code>function tex.istoks(register: (string|integer)) -&gt;  (false|integer)\n</code></pre> @param <code>register</code> - A register number or a predefined csname string from <code>\\toksdef</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L1120-L1123</li> <li>Corresponding C source code: ltexlib.c#L350-L358</li> </ul>"},{"location":"globals/tex/#texscantoks","title":"tex.scantoks","text":"<pre><code>function tex.scantoks(\n  global: \"global\",\n  register: integer,\n  catcodetable: integer,\n  toks: string\n)\n</code></pre> <p>For tokens registers we have an alternative where a catcode table is specified:</p> <pre><code>tex.scantoks(0,3,\"$e=mc^2$\")\ntex.scantoks(\"global\",0,\"$\\\\int\\\\limits^1_2$\")\n</code></pre> <ul> <li>Corresponding C source code: ltexlib.c#L1160-L1195</li> </ul>"},{"location":"globals/tex/#texgetmark","title":"tex.getmark","text":"<p><pre><code>function tex.getmark(\n  position: (\"top\"|\"bottom\"|\"first\"|\"splitbottom\"|\"splitfirst\")?,\n  class: integer?\n) -&gt;  (integer|string)\n</code></pre> @param <code>position</code> - one of top, bottom, first, splitbottom or splitfirst</p> <p>@param <code>class</code> - marks class number.</p> <p>When no arguments are given the current maximum number of classes is returned.</p> <ul> <li>Corresponding C source code: ltexlib.c#L1211-L1242</li> </ul>"},{"location":"globals/tex/#texsetlccode","title":"tex.setlccode","text":"<p><pre><code>function tex.setlccode(\n  global: \"global\",\n  char_code: integer,\n  lower_case: integer,\n  upper_case: integer?\n)\n</code></pre> @param <code>global</code> - It is possible to define values globally by using the string <code>global</code> as the first function argument.</p> <p>@param <code>char_code</code> - A Unicode code point for which a lowercase variant of the character is to be set, for example <code>65</code> stands for an uppercase <code>A</code> and <code>97</code> for a lowercase <code>a</code>.</p> <p>@param <code>lower_case</code> - The Unicode code point for the lowercase variant of the character.</p> <p>@param <code>upper_case</code> - The Unicode code point for the uppercase variant of the character.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set the <code>lccode</code> (lower case code) and additionally the associated sibling for a character code at the same time.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1369-L1397</li> <li>Corresponding plain TeX control sequence: \\lccode</li> </ul>"},{"location":"globals/tex/#texsetlccode_1","title":"tex.setlccode","text":"<p><pre><code>function tex.setlccode(\n  char_code: integer,\n  lower_case: integer,\n  upper_case: integer?\n)\n</code></pre> @param <code>char_code</code> - A Unicode code point for which a lowercase variant of the character is to be set, for example <code>65</code> stands for an uppercase <code>A</code> and <code>97</code> for a lowercase <code>a</code>.</p> <p>@param <code>lower_case</code> - The Unicode code point for the lowercase variant of the character.</p> <p>@param <code>upper_case</code> - The Unicode code point for the uppercase variant of the character.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set the <code>lccode</code> (lower case code) and additionally the associated sibling for a character code at the same time.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1369-L1397</li> <li>Corresponding plain TeX control sequence: \\lccode</li> </ul>"},{"location":"globals/tex/#texgetlccode","title":"tex.getlccode","text":"<p><pre><code>function tex.getlccode(char_code: integer) -&gt; lower_case integer\n</code></pre> @param <code>char_code</code> - A Unicode code point for which a lowercase variant of the character should be returned, for example <code>65</code> stands for an uppercase <code>A</code> and <code>97</code> for a lowercase <code>a</code>.</p> <p>@return <code>lower_case</code> - The Unicode code point for the lowercase variant of the character. \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1404-L1410</li> <li>Corresponding plain TeX control sequence: \\lccode</li> </ul>"},{"location":"globals/tex/#texsetuccode","title":"tex.setuccode","text":"<p><pre><code>function tex.setuccode(\n  global: \"global\",\n  char_code: integer,\n  upper_case: integer,\n  lower_case: integer?\n)\n</code></pre> @param <code>global</code> - It is possible to define values globally by using the string <code>global</code> as the first function argument.</p> <p>@param <code>char_code</code> - A Unicode code point for which a uppercase variant of the character is to be set, for example <code>65</code> stands for an uppercase <code>A</code> and <code>97</code> for a lowercase <code>a</code>.</p> <p>@param <code>upper_case</code> - The Unicode code point for the uppercase variant of the character.</p> <p>@param <code>lower_case</code> - The Unicode code point for the lowercase variant of the character.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>The function call interface for <code>uccode</code> (upper case code) additionally allows you to set the associated sibling at the same time.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1369-L1397</li> <li>Corresponding plain TeX control sequence: \\uccode</li> </ul>"},{"location":"globals/tex/#texsetuccode_1","title":"tex.setuccode","text":"<p><pre><code>function tex.setuccode(\n  char_code: integer,\n  upper_case: integer,\n  lower_case: integer?\n)\n</code></pre> @param <code>char_code</code> - A Unicode code point for which a uppercase variant of the character is to be set, for example <code>65</code> stands for an uppercase <code>A</code> and <code>97</code> for a lowercase <code>a</code>.</p> <p>@param <code>upper_case</code> - The Unicode code point for the uppercase variant of the character.</p> <p>@param <code>lower_case</code> - The Unicode code point for the lowercase variant of the character.</p> <p>The function call interface for <code>uccode</code> (upper case code) additionally allows you to set the associated sibling at the same time.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1369-L1397</li> <li>Corresponding plain TeX control sequence: \\uccode</li> </ul> <p>@see tex.getuccode tex.setlccode</p>"},{"location":"globals/tex/#texgetuccode","title":"tex.getuccode","text":"<p><pre><code>function tex.getuccode(char_code: integer) -&gt; upper_case integer\n</code></pre> @param <code>char_code</code> - A Unicode code point for which a uppercase variant of the character should be returned, for example <code>65</code> stands for an uppercase <code>A</code> and <code>97</code> for a lowercase <code>a</code>.</p> <p>@return <code>upper_case</code> - The Unicode code point for the uppercase variant of the character. \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Corresponding plain TeX control sequence: \\uccode</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1417-L1423</li> <li>Corresponding plain TeX control sequence: \\uccode</li> </ul>"},{"location":"globals/tex/#texsetsfcode","title":"tex.setsfcode","text":"<p><pre><code>function tex.setsfcode(\n  global: \"global\",\n  char_code: integer,\n  space_factor: integer\n)\n</code></pre> @param <code>global</code> - It is possible to define values globally by using the string <code>global</code> as the first function argument.</p> <p>@param <code>char_code</code> - A Unicode code point, for example <code>65</code> stands for an uppercase <code>A</code> and <code>97</code> for a lowercase <code>a</code>.</p> <p>@param <code>space_factor</code> - The code (between <code>0</code> and <code>32767</code>) to adjust the space factor in a horizontal list. The uppercase letters <code>A-Z</code> have space factor code <code>999</code>. Most other characters have code <code>1000</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set the space factor code for a character globally.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1425-L1428</li> <li>Corresponding plain TeX control sequence: \\sfcode</li> </ul>"},{"location":"globals/tex/#texsetsfcode_1","title":"tex.setsfcode","text":"<p><pre><code>function tex.setsfcode(\n  char_code: integer,\n  space_factor: integer\n)\n</code></pre> @param <code>char_code</code> - A Unicode code point, for example <code>65</code> stands for an uppercase <code>A</code> and <code>97</code> for a lowercase <code>a</code>.</p> <p>@param <code>space_factor</code> - The code (between <code>0</code> and <code>32767</code>) to adjust the space factor in a horizontal list. The uppercase letters <code>A-Z</code> have space factor code <code>999</code>. Most other characters have code <code>1000</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set the space factor code for a character.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1425-L1428</li> <li>Corresponding plain TeX control sequence: \\sfcode</li> </ul>"},{"location":"globals/tex/#texgetsfcode","title":"tex.getsfcode","text":"<p><pre><code>function tex.getsfcode(char_code: integer) -&gt; space_factor integer\n</code></pre> @param <code>char_code</code> - A Unicode code point, for example <code>65</code> stands for an uppercase <code>A</code> and <code>97</code> for a lowercase <code>a</code>.</p> <p>@return <code>space_factor</code> - The code (between <code>0</code> and <code>32767</code>) to adjust the space factor in a horizontal list. The uppercase letters <code>A-Z</code> have space factor code <code>999</code>. Most other characters have code <code>1000</code>. \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Get the space factor code of a character.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1430-L1436</li> <li>Corresponding plain TeX control sequence: \\sfcode</li> </ul>"},{"location":"globals/tex/#texsetcatcode","title":"tex.setcatcode","text":"<p><pre><code>function tex.setcatcode(\n  global: \"global\",\n  char_code: integer,\n  cat_code: integer\n)\n</code></pre> @param <code>global</code> - It is possible to define values globally by using the string <code>global</code> as the first function argument.</p> <p>@param <code>char_code</code> - The character code, for example ASCII or UNICODE character code.</p> <p>@param <code>cat_code</code> - The category code (<code>0</code> stands for the escape character, normally <code>\\</code>, <code>1</code> stands for begin grouping, normally <code>{</code> and so on).</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Specify a category table to use on assignment or on query (default in both cases is the current one).</p> <ul> <li>Corresponding C source code: ltexlib.c#L1438-L1464</li> </ul>"},{"location":"globals/tex/#texsetcatcode_1","title":"tex.setcatcode","text":"<p><pre><code>function tex.setcatcode(\n  char_code: integer,\n  cat_code: integer\n)\n</code></pre> @param <code>char_code</code> - The character code, for example ASCII or UNICODE character code.</p> <p>@param <code>cat_code</code> - The category code (<code>0</code> stands for the escape character, normally <code>\\</code>, <code>1</code> stands for begin grouping, normally <code>{</code> and so on). \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Specify a category table to use on assignment or on query (default in both cases is the current one).</p>"},{"location":"globals/tex/#category-codes","title":"Category codes:","text":"<ul> <li><code>0</code>: Escape character, normally <code>\\</code></li> <li><code>1</code>: Begin grouping, normally <code>{</code></li> <li><code>2</code>: End grouping, normally <code>}</code></li> <li><code>3</code>: Math shift, normally <code>$</code></li> <li><code>4</code>: Alignment tab, normally <code>&amp;</code></li> <li><code>5</code>: End of line, normally <code>&lt;return&gt;</code></li> <li><code>6</code>: Parameter, normally <code>#</code></li> <li><code>7</code>: Superscript, normally <code>^</code></li> <li><code>8</code>: Subscript, normally <code>_</code></li> <li><code>9</code>: Ignored character, normally <code>&lt;null&gt;</code></li> <li><code>10</code>: Space, normally <code>&lt;space&gt;</code> and <code>&lt;tab&gt;</code></li> <li><code>11</code>: Letter, normally only contains the letters <code>a,...,z</code> and <code>A,...,Z</code>. These characters can be used in command names</li> <li><code>12</code>: Other, normally everything else not listed in the other categories</li> <li><code>13</code>: Active character, for example <code>~</code></li> <li><code>14</code>: Comment character, normally <code>%</code></li> <li><code>15</code>: Invalid character, normally <code>&lt;delete&gt;</code></li> </ul> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1438-L1464</li> </ul>"},{"location":"globals/tex/#texsetcatcode_2","title":"tex.setcatcode","text":"<p><pre><code>function tex.setcatcode(\n  global: \"global\",\n  cat_table: integer,\n  char_code: integer,\n  cat_code: integer\n)\n</code></pre> @param <code>global</code> - It is possible to define values globally by using the string <code>global</code> as the first function argument.</p> <p>@param <code>char_code</code> - The character code, for example ASCII or UNICODE character code.</p> <p>@param <code>cat_code</code> - The category code (<code>0</code> stands for the escape character, normally <code>\\</code>, <code>1</code> stands for begin grouping, normally <code>{</code> and so on). \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Specify a category table to use on assignment or on query (default in both cases is the current one).</p>"},{"location":"globals/tex/#category-codes_1","title":"Category codes:","text":"<ul> <li><code>0</code>: Escape character, normally <code>\\</code></li> <li><code>1</code>: Begin grouping, normally <code>{</code></li> <li><code>2</code>: End grouping, normally <code>}</code></li> <li><code>3</code>: Math shift, normally <code>$</code></li> <li><code>4</code>: Alignment tab, normally <code>&amp;</code></li> <li><code>5</code>: End of line, normally <code>&lt;return&gt;</code></li> <li><code>6</code>: Parameter, normally <code>#</code></li> <li><code>7</code>: Superscript, normally <code>^</code></li> <li><code>8</code>: Subscript, normally <code>_</code></li> <li><code>9</code>: Ignored character, normally <code>&lt;null&gt;</code></li> <li><code>10</code>: Space, normally <code>&lt;space&gt;</code> and <code>&lt;tab&gt;</code></li> <li><code>11</code>: Letter, normally only contains the letters <code>a,...,z</code> and <code>A,...,Z</code>. These characters can be used in command names</li> <li><code>12</code>: Other, normally everything else not listed in the other categories</li> <li><code>13</code>: Active character, for example <code>~</code></li> <li><code>14</code>: Comment character, normally <code>%</code></li> <li><code>15</code>: Invalid character, normally <code>&lt;delete&gt;</code></li> </ul> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1438-L1464</li> </ul>"},{"location":"globals/tex/#texsetcatcode_3","title":"tex.setcatcode","text":"<p><pre><code>function tex.setcatcode(\n  global,\n  cat_table: integer,\n  char_code: integer,\n  cat_code: integer\n)\n</code></pre> @param <code>char_code</code> - The character code, for example ASCII or UNICODE character code.</p> <p>@param <code>cat_code</code> - The category code (<code>0</code> stands for the escape character, normally <code>\\</code>, <code>1</code> stands for begin grouping, normally <code>{</code> and so on). \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Specify a category table to use on assignment or on query (default in both cases is the current one).</p>"},{"location":"globals/tex/#category-codes_2","title":"Category codes:","text":"<ul> <li><code>0</code>: Escape character, normally <code>\\</code></li> <li><code>1</code>: Begin grouping, normally <code>{</code></li> <li><code>2</code>: End grouping, normally <code>}</code></li> <li><code>3</code>: Math shift, normally <code>$</code></li> <li><code>4</code>: Alignment tab, normally <code>&amp;</code></li> <li><code>5</code>: End of line, normally <code>&lt;return&gt;</code></li> <li><code>6</code>: Parameter, normally <code>#</code></li> <li><code>7</code>: Superscript, normally <code>^</code></li> <li><code>8</code>: Subscript, normally <code>_</code></li> <li><code>9</code>: Ignored character, normally <code>&lt;null&gt;</code></li> <li><code>10</code>: Space, normally <code>&lt;space&gt;</code> and <code>&lt;tab&gt;</code></li> <li><code>11</code>: Letter, normally only contains the letters <code>a,...,z</code> and <code>A,...,Z</code>. These characters can be used in command names</li> <li><code>12</code>: Other, normally everything else not listed in the other categories</li> <li><code>13</code>: Active character, for example <code>~</code></li> <li><code>14</code>: Comment character, normally <code>%</code></li> <li><code>15</code>: Invalid character, normally <code>&lt;delete&gt;</code></li> </ul> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1438-L1464</li> </ul>"},{"location":"globals/tex/#texgetcatcode","title":"tex.getcatcode","text":"<p><pre><code>function tex.getcatcode(\n  cat_table: integer,\n  char_code: integer\n) -&gt; cat_code integer\n</code></pre> @param <code>char_code</code> - The character code, for example ASCII or UNICODE character code.</p> <p>@return <code>cat_code</code> - The category code (<code>0</code> stands for the escape character, normally <code>\\</code>, <code>1</code> stands for begin grouping, normally <code>{</code> and so on). \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>The function call interface for <code>catcode</code> (category code) also allows you to specify a category table to use on assignment or on query (default in both cases is the current one):</p>"},{"location":"globals/tex/#category-codes_3","title":"Category codes:","text":"<ul> <li><code>0</code>: Escape character, normally <code>\\</code></li> <li><code>1</code>: Begin grouping, normally <code>{</code></li> <li><code>2</code>: End grouping, normally <code>}</code></li> <li><code>3</code>: Math shift, normally <code>$</code></li> <li><code>4</code>: Alignment tab, normally <code>&amp;</code></li> <li><code>5</code>: End of line, normally <code>&lt;return&gt;</code></li> <li><code>6</code>: Parameter, normally <code>#</code></li> <li><code>7</code>: Superscript, normally <code>^</code></li> <li><code>8</code>: Subscript, normally <code>_</code></li> <li><code>9</code>: Ignored character, normally <code>&lt;null&gt;</code></li> <li><code>10</code>: Space, normally <code>&lt;space&gt;</code> and <code>&lt;tab&gt;</code></li> <li><code>11</code>: Letter, normally only contains the letters <code>a,...,z</code> and <code>A,...,Z</code>. These characters can be used in command names</li> <li><code>12</code>: Other, normally everything else not listed in the other categories</li> <li><code>13</code>: Active character, for example <code>~</code></li> <li><code>14</code>: Comment character, normally <code>%</code></li> <li><code>15</code>: Invalid character, normally <code>&lt;delete&gt;</code></li> </ul>"},{"location":"globals/tex/#texsetmathcode","title":"tex.setmathcode","text":"<p><pre><code>function tex.setmathcode(\n  global: \"global\",\n  char_code: integer,\n  class: integer,\n  family: integer,\n  character: integer\n)\n</code></pre> @param <code>global</code> - It is possible to define values globally by using the string <code>global</code> as the first function argument.</p> <p>@param <code>char_code</code> - The ASCII or UNICODE charcater code point.</p> <p>@param <code>class</code> - The class to which a math character belongs (<code>0</code>: Ordinary, <code>1</code>: Large operator, <code>2</code>: Binary operation, <code>3</code>: Relation, <code>4</code>: Opening, <code>5</code>: Closing, <code>6</code>: Punctuation, <code>7</code>: Variable family).</p> <p>@param <code>family</code> - TeX uses fonts from one or more of the sixteen font families to typeset mathematical characters. Each font family consists of three fonts \u2014 textfont, scriptfont, and scriptscriptfont. (<code>0</code>: Roman, <code>1</code>: Math italic, <code>2</code>: Math symbol, <code>3</code>: Math extension, <code>4</code>: Italic text, <code>5</code>: Slanted text, <code>6</code>: Bold text, <code>7</code>: Typewriter)</p> <p>@param <code>character</code> - The character position \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>class:</p> Class Meaning Example 0 Ordinary <code>/</code> 1 Large operator <code>\\sum</code> 2 Binary operation <code>+</code> 3 Relation <code>=</code> 4 Opening <code>(</code> 5 Closing <code>)</code> 6 Punctuation <code>,</code> 7 Variable family <code>x</code> <p>family:</p> <pre><code>% Family 0 (Roman)\n\\font\\tenrm=mdbchr7t at10pt\n\\font\\sevenrm=mdbchr7t at7pt\n\\font\\fiverm=mdbchr7t at5pt\n\\textfont0=\\tenrm\n\\scriptfont0=\\sevenrm\n27\n\\scriptscriptfont0=\\fiverm\n\\def\\rm{\\fam=0 \\tenrm}\n%\n% Family 1 (Math italic)\n\\font\\teni=mdbchri7m at10pt\n\\font\\seveni=mdbchri7m at7pt\n\\font\\fivei=mdbchri7m at5pt\n\\textfont1=\\teni\n\\scriptfont1=\\seveni\n\\scriptscriptfont1=\\fivei\n\\def\\mit{\\fam=1}\n%\n% Family 2 (Math symbols)\n\\font\\tensy=md-chr7y at10pt\n\\font\\sevensy=md-chr7y at7pt\n\\font\\fivesy=md-chr7y at5pt\n\\textfont2=\\tensy\n\\scriptfont2=\\\n% Family 3 (Math extension)\n\\font\\tenex=mdbchr7v at10pt\n\\font\\sevenex=mdbchr7v at7pt\n\\font\\fiveex=mdbchr7v at5pt\n\\textfont3=\\tenex\n\\scriptfont3=\\sevenex\n\\scriptscriptfont3=\\fiveex\n%\n% Family 4 (Italic text)\n\\font\\tenit=mdbchri7t at10pt\n\\font\\sevenit=mdbchri7t at7pt\n\\font\\fiveit=mdbchri7t at5pt\n\\textfont\\itfam=\\tenit\n\\scriptfont\\itfam=\\sevenit\n\\scriptscriptfont\\itfam=\\fiveit\n\\def\\it{\\fam=\\itfam \\tenit}\n%\n% Family 5 (Slanted text)\n\\font\\tensl=mdbchro7t at10pt\n\\font\\sevensl=mdbchro7t at7pt\n\\font\\fivesl=mdbchro7t at5pt\n\\textfont\\slfam=\\tensl\n\\scriptfont\\slfam=\\sevensl\n\\scriptscriptfont\\slfam=\\fivesl\n\\def\\sl{\\fam=\\slfam \\tensl}\n%\n% Family 6 (Bold text)\n\\font\\tenbf=mdbchb7t at10pt\n\\font\\sevenbf=mdbchb7t at7pt\n\\font\\fivebf=mdbchb7t at5pt\n\\textfont\\bffam=\\tenbf\n\\scriptfont\\bffam=\\sevenbf\n\\scriptscriptfont\\bffam=\\fivebf\n\\def\\bf{\\fam=\\bffam \\tenbf}\n%\n% Family 7 (Typewriter)\n\\font\\tentt=cmtt10---%\n\\rm\n% Sets normal roman font\n\\font\\seventt=cmtt10 at7pt\n\\font\\fivett=cmtt10 at5pt\n\\textfont\\ttfam=\\tentt\n\\scriptfont\\ttfam=\\seventt\n\\scriptscriptfont\\ttfam=\\fivett\n\\def\\tt{\\fam=\\ttfam \\tentt}\n```sevensy\n\\scriptscriptfont2=\\fivesy\n\\def\\cal{\\fam=2}\n%\n% Family 3 (Math extension)\n\\font\\tenex=mdbchr7v at10pt\n\\font\\sevenex=mdbchr7v at7pt\n\\font\\fiveex=mdbchr7v at5pt\n\\textfont3=\\tenex\n\\scriptfont3=\\sevenex\n\\scriptscriptfont3=\\fiveex\n%\n% Family 4 (Italic text)\n\\font\\tenit=mdbchri7t at10pt\n\\font\\sevenit=mdbchri7t at7pt\n\\font\\fiveit=mdbchri7t at5pt\n\\textfont\\itfam=\\tenit\n\\scriptfont\\itfam=\\sevenit\n\\scriptscriptfont\\itfam=\\fiveit\n\\def\\it{\\fam=\\itfam \\tenit}\n%\n% Family 5 (Slanted text)\n\\font\\tensl=mdbchro7t at10pt\n\\font\\sevensl=mdbchro7t at7pt\n\\font\\fivesl=mdbchro7t at5pt\n\\textfont\\slfam=\\tensl\n\\scriptfont\\slfam=\\sevensl\n\\scriptscriptfont\\slfam=\\fivesl\n\\def\\sl{\\fam=\\slfam \\tensl}\n%\n% Family 6 (Bold text)\n\\font\\tenbf=mdbchb7t at10pt\n\\font\\sevenbf=mdbchb7t at7pt\n\\font\\fivebf=mdbchb7t at5pt\n\\textfont\\bffam=\\tenbf\n\\scriptfont\\bffam=\\sevenbf\n\\scriptscriptfont\\bffam=\\fivebf\n\\def\\bf{\\fam=\\bffam \\tenbf}\n%\n% Family 7 (Typewriter)\n\\font\\tentt=cmtt10---%\n\\rm\n% Sets normal roman font\n\\font\\seventt=cmtt10 at7pt\n\\font\\fivett=cmtt10 at5pt\n\\textfont\\ttfam=\\tentt\n\\scriptfont\\ttfam=\\seventt\n\\scriptscriptfont\\ttfam=\\fivett\n\\def\\tt{\\fam=\\ttfam \\tentt}\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1524-1561</li> <li>Corresponding plain TeX control sequence: \\mathcode</li> <li>Donald E. Knuth: The TeXbook, Page 154</li> <li>TUGboat, Volume 31 (2010), No. 1, Mathematical typefaces in TEX documents, Amit Raj Dhawan</li> </ul>"},{"location":"globals/tex/#texsetmathcode_1","title":"tex.setmathcode","text":"<p><pre><code>function tex.setmathcode(\n  global: \"global\",\n  char_code: integer,\n  class: integer,\n  family: integer,\n  character: integer\n)\n</code></pre> @param <code>global</code> - It is possible to define values globally by using the string <code>global</code> as the first function argument.</p> <p>@param <code>char_code</code> - The ASCII or UNICODE charcater code point.</p> <p>@param <code>class</code> - The class to which a math character belongs (<code>0</code>: Ordinary, <code>1</code>: Large operator, <code>2</code>: Binary operation, <code>3</code>: Relation, <code>4</code>: Opening, <code>5</code>: Closing, <code>6</code>: Punctuation, <code>7</code>: Variable family).</p> <p>@param <code>family</code> - TeX uses fonts from one or more of the sixteen font families to typeset mathematical characters. Each font family consists of three fonts \u2014 textfont, scriptfont, and scriptscriptfont. (<code>0</code>: Roman, <code>1</code>: Math italic, <code>2</code>: Math symbol, <code>3</code>: Math extension, <code>4</code>: Italic text, <code>5</code>: Slanted text, <code>6</code>: Bold text, <code>7</code>: Typewriter)</p> <p>@param <code>character</code> - The character position \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>class:</p> Class Meaning Example 0 Ordinary <code>/</code> 1 Large operator <code>\\sum</code> 2 Binary operation <code>+</code> 3 Relation <code>=</code> 4 Opening <code>(</code> 5 Closing <code>)</code> 6 Punctuation <code>,</code> 7 Variable family <code>x</code> <p>family:</p> <pre><code>% Family 0 (Roman)\n\\font\\tenrm=mdbchr7t at10pt\n\\font\\sevenrm=mdbchr7t at7pt\n\\font\\fiverm=mdbchr7t at5pt\n\\textfont0=\\tenrm\n\\scriptfont0=\\sevenrm\n27\n\\scriptscriptfont0=\\fiverm\n\\def\\rm{\\fam=0 \\tenrm}\n%\n% Family 1 (Math italic)\n\\font\\teni=mdbchri7m at10pt\n\\font\\seveni=mdbchri7m at7pt\n\\font\\fivei=mdbchri7m at5pt\n\\textfont1=\\teni\n\\scriptfont1=\\seveni\n\\scriptscriptfont1=\\fivei\n\\def\\mit{\\fam=1}\n%\n% Family 2 (Math symbols)\n\\font\\tensy=md-chr7y at10pt\n\\font\\sevensy=md-chr7y at7pt\n\\font\\fivesy=md-chr7y at5pt\n\\textfont2=\\tensy\n\\scriptfont2=\\\n% Family 3 (Math extension)\n\\font\\tenex=mdbchr7v at10pt\n\\font\\sevenex=mdbchr7v at7pt\n\\font\\fiveex=mdbchr7v at5pt\n\\textfont3=\\tenex\n\\scriptfont3=\\sevenex\n\\scriptscriptfont3=\\fiveex\n%\n% Family 4 (Italic text)\n\\font\\tenit=mdbchri7t at10pt\n\\font\\sevenit=mdbchri7t at7pt\n\\font\\fiveit=mdbchri7t at5pt\n\\textfont\\itfam=\\tenit\n\\scriptfont\\itfam=\\sevenit\n\\scriptscriptfont\\itfam=\\fiveit\n\\def\\it{\\fam=\\itfam \\tenit}\n%\n% Family 5 (Slanted text)\n\\font\\tensl=mdbchro7t at10pt\n\\font\\sevensl=mdbchro7t at7pt\n\\font\\fivesl=mdbchro7t at5pt\n\\textfont\\slfam=\\tensl\n\\scriptfont\\slfam=\\sevensl\n\\scriptscriptfont\\slfam=\\fivesl\n\\def\\sl{\\fam=\\slfam \\tensl}\n%\n% Family 6 (Bold text)\n\\font\\tenbf=mdbchb7t at10pt\n\\font\\sevenbf=mdbchb7t at7pt\n\\font\\fivebf=mdbchb7t at5pt\n\\textfont\\bffam=\\tenbf\n\\scriptfont\\bffam=\\sevenbf\n\\scriptscriptfont\\bffam=\\fivebf\n\\def\\bf{\\fam=\\bffam \\tenbf}\n%\n% Family 7 (Typewriter)\n\\font\\tentt=cmtt10---%\n\\rm\n% Sets normal roman font\n\\font\\seventt=cmtt10 at7pt\n\\font\\fivett=cmtt10 at5pt\n\\textfont\\ttfam=\\tentt\n\\scriptfont\\ttfam=\\seventt\n\\scriptscriptfont\\ttfam=\\fivett\n\\def\\tt{\\fam=\\ttfam \\tentt}\n```sevensy\n\\scriptscriptfont2=\\fivesy\n\\def\\cal{\\fam=2}\n%\n% Family 3 (Math extension)\n\\font\\tenex=mdbchr7v at10pt\n\\font\\sevenex=mdbchr7v at7pt\n\\font\\fiveex=mdbchr7v at5pt\n\\textfont3=\\tenex\n\\scriptfont3=\\sevenex\n\\scriptscriptfont3=\\fiveex\n%\n% Family 4 (Italic text)\n\\font\\tenit=mdbchri7t at10pt\n\\font\\sevenit=mdbchri7t at7pt\n\\font\\fiveit=mdbchri7t at5pt\n\\textfont\\itfam=\\tenit\n\\scriptfont\\itfam=\\sevenit\n\\scriptscriptfont\\itfam=\\fiveit\n\\def\\it{\\fam=\\itfam \\tenit}\n%\n% Family 5 (Slanted text)\n\\font\\tensl=mdbchro7t at10pt\n\\font\\sevensl=mdbchro7t at7pt\n\\font\\fivesl=mdbchro7t at5pt\n\\textfont\\slfam=\\tensl\n\\scriptfont\\slfam=\\sevensl\n\\scriptscriptfont\\slfam=\\fivesl\n\\def\\sl{\\fam=\\slfam \\tensl}\n%\n% Family 6 (Bold text)\n\\font\\tenbf=mdbchb7t at10pt\n\\font\\sevenbf=mdbchb7t at7pt\n\\font\\fivebf=mdbchb7t at5pt\n\\textfont\\bffam=\\tenbf\n\\scriptfont\\bffam=\\sevenbf\n\\scriptscriptfont\\bffam=\\fivebf\n\\def\\bf{\\fam=\\bffam \\tenbf}\n%\n% Family 7 (Typewriter)\n\\font\\tentt=cmtt10---%\n\\rm\n% Sets normal roman font\n\\font\\seventt=cmtt10 at7pt\n\\font\\fivett=cmtt10 at5pt\n\\textfont\\ttfam=\\tentt\n\\scriptfont\\ttfam=\\seventt\n\\scriptscriptfont\\ttfam=\\fivett\n\\def\\tt{\\fam=\\ttfam \\tentt}\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1524-L1561</li> <li>Corresponding plain TeX control sequence: \\mathcode</li> <li>Donald E. Knuth: The TeXbook, Page 154</li> <li>TUGboat, Volume 31 (2010), No. 1, Mathematical typefaces in TEX documents, Amit Raj Dhawan</li> </ul>"},{"location":"globals/tex/#texsetmathcode_2","title":"tex.setmathcode","text":"<p><pre><code>function tex.setmathcode(\n  global: \"global\",\n  char_code: integer,\n  math_code: MathCode\n)\n</code></pre> @param <code>global</code> - It is possible to define values globally by using the string <code>global</code> as the first function argument.</p> <p>@param <code>char_code</code> - The ASCII or UNICODE charcater code point.</p> <p>@param <code>math_code</code> - A table with three integers (class, family, character). \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1524-L1561</li> <li>Corresponding plain TeX control sequence: \\mathcode</li> </ul>"},{"location":"globals/tex/#texsetmathcode_3","title":"tex.setmathcode","text":"<p><pre><code>function tex.setmathcode(\n  char_code: integer,\n  math_code: MathCode\n)\n</code></pre> @param <code>char_code</code> - The ASCII or UNICODE charcater code point.</p> <p>@param <code>math_code</code> - A table with three integers (class, family, character). \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1524-L1561</li> <li>Corresponding plain TeX control sequence: \\mathcode</li> </ul>"},{"location":"globals/tex/#texgetmathcode","title":"tex.getmathcode","text":"<pre><code>function tex.getmathcode(char_code: integer) -&gt; math_code MathCode\n</code></pre> <p>@return <code>math_code</code> - A table with three integers (class, family, character). \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Retrieve the math code of a character as a table with three integers (class, family, character).</p> <p>Examples from The TeXBook, page 154:</p> <p><code>\\mathcode\u2018&lt;=\"313C</code></p> <ul> <li>ASCII <code>&lt;</code>: 60 (decimal) 3C (hexadecimal)</li> <li>class: 3</li> <li>family: 1</li> <li>character: 60</li> </ul> <pre><code>local mathcode = tex.getmathcode(60)\nprint(mathcode[1], mathcode[2], mathcode[3]) -- 3 1 60\n</code></pre> <p><code>\\mathcode\u2018*=\"2203</code></p> <ul> <li>ASCII <code>*</code>: 42 (decimal) 2A (hexadecimal)</li> <li>class: 2</li> <li>family: 2</li> <li>character: 3</li> </ul> <pre><code>local mathcode = tex.getmathcode(42)\nprint(mathcode[1], mathcode[2], mathcode[3]) -- 2 2 3\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1563-L1577</li> <li>Corresponding plain TeX control sequence: \\mathcode</li> </ul>"},{"location":"globals/tex/#texgetmathcodes","title":"tex.getmathcodes","text":"<pre><code>function tex.getmathcodes(char_code: integer)\n -&gt; class integer\n -&gt; family integer\n -&gt; character integer\n</code></pre> <p>@return <code>class</code> - The class to which a math character belongs (<code>0</code>: Ordinary, <code>1</code>: Large operator, <code>2</code>: Binary operation, <code>3</code>: Relation, <code>4</code>: Opening, <code>5</code>: Closing, <code>6</code>: Punctuation, <code>7</code>: Variable family).</p> <p>@return <code>family</code> - TeX uses fonts from one or more of the sixteen font families to typeset mathematical characters. Each font family consists of three fonts \u2014 textfont, scriptfont, and scriptscriptfont. (<code>0</code>: Roman, <code>1</code>: Math italic, <code>2</code>: Math symbol, <code>3</code>: Math extension, <code>4</code>: Italic text, <code>5</code>: Slanted text, <code>6</code>: Bold text, <code>7</code>: Typewriter)</p> <p>@return <code>character</code> - The character position \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Retrieve the math code of a character as three integers (class, family, character).</p> <p>Examples from The TeXBook, page 154:</p> <p><code>\\mathcode\u2018&lt;=\"313C</code></p> <ul> <li>ASCII <code>&lt;</code>: 60 (decimal) 3C (hexadecimal)</li> <li>class: 3</li> <li>family: 1</li> <li>character: 60</li> </ul> <pre><code>print(tex.getmathcodes(60)) -- 3 1 60\n</code></pre> <p><code>\\mathcode\u2018*=\"2203</code></p> <ul> <li>ASCII <code>*</code>: 42 (decimal) 2A (hexadecimal)</li> <li>class: 2</li> <li>family: 2</li> <li>character: 3</li> </ul> <pre><code>print(tex.getmathcodes(42)) -- 2 2 3\n</code></pre> <p>class:</p> Class Meaning Example 0 Ordinary <code>/</code> 1 Large operator <code>\\sum</code> 2 Binary operation <code>+</code> 3 Relation <code>=</code> 4 Opening <code>(</code> 5 Closing <code>)</code> 6 Punctuation <code>,</code> 7 Variable family <code>x</code> <p>family:</p> <pre><code>% Family 0 (Roman)\n\\font\\tenrm=mdbchr7t at10pt\n\\font\\sevenrm=mdbchr7t at7pt\n\\font\\fiverm=mdbchr7t at5pt\n\\textfont0=\\tenrm\n\\scriptfont0=\\sevenrm\n27\n\\scriptscriptfont0=\\fiverm\n\\def\\rm{\\fam=0 \\tenrm}\n%\n% Family 1 (Math italic)\n\\font\\teni=mdbchri7m at10pt\n\\font\\seveni=mdbchri7m at7pt\n\\font\\fivei=mdbchri7m at5pt\n\\textfont1=\\teni\n\\scriptfont1=\\seveni\n\\scriptscriptfont1=\\fivei\n\\def\\mit{\\fam=1}\n%\n% Family 2 (Math symbols)\n\\font\\tensy=md-chr7y at10pt\n\\font\\sevensy=md-chr7y at7pt\n\\font\\fivesy=md-chr7y at5pt\n\\textfont2=\\tensy\n\\scriptfont2=\\\n% Family 3 (Math extension)\n\\font\\tenex=mdbchr7v at10pt\n\\font\\sevenex=mdbchr7v at7pt\n\\font\\fiveex=mdbchr7v at5pt\n\\textfont3=\\tenex\n\\scriptfont3=\\sevenex\n\\scriptscriptfont3=\\fiveex\n%\n% Family 4 (Italic text)\n\\font\\tenit=mdbchri7t at10pt\n\\font\\sevenit=mdbchri7t at7pt\n\\font\\fiveit=mdbchri7t at5pt\n\\textfont\\itfam=\\tenit\n\\scriptfont\\itfam=\\sevenit\n\\scriptscriptfont\\itfam=\\fiveit\n\\def\\it{\\fam=\\itfam \\tenit}\n%\n% Family 5 (Slanted text)\n\\font\\tensl=mdbchro7t at10pt\n\\font\\sevensl=mdbchro7t at7pt\n\\font\\fivesl=mdbchro7t at5pt\n\\textfont\\slfam=\\tensl\n\\scriptfont\\slfam=\\sevensl\n\\scriptscriptfont\\slfam=\\fivesl\n\\def\\sl{\\fam=\\slfam \\tensl}\n%\n% Family 6 (Bold text)\n\\font\\tenbf=mdbchb7t at10pt\n\\font\\sevenbf=mdbchb7t at7pt\n\\font\\fivebf=mdbchb7t at5pt\n\\textfont\\bffam=\\tenbf\n\\scriptfont\\bffam=\\sevenbf\n\\scriptscriptfont\\bffam=\\fivebf\n\\def\\bf{\\fam=\\bffam \\tenbf}\n%\n% Family 7 (Typewriter)\n\\font\\tentt=cmtt10---%\n\\rm\n% Sets normal roman font\n\\font\\seventt=cmtt10 at7pt\n\\font\\fivett=cmtt10 at5pt\n\\textfont\\ttfam=\\tentt\n\\scriptfont\\ttfam=\\seventt\n\\scriptscriptfont\\ttfam=\\fivett\n\\def\\tt{\\fam=\\ttfam \\tentt}\n```sevensy\n\\scriptscriptfont2=\\fivesy\n\\def\\cal{\\fam=2}\n%\n% Family 3 (Math extension)\n\\font\\tenex=mdbchr7v at10pt\n\\font\\sevenex=mdbchr7v at7pt\n\\font\\fiveex=mdbchr7v at5pt\n\\textfont3=\\tenex\n\\scriptfont3=\\sevenex\n\\scriptscriptfont3=\\fiveex\n%\n% Family 4 (Italic text)\n\\font\\tenit=mdbchri7t at10pt\n\\font\\sevenit=mdbchri7t at7pt\n\\font\\fiveit=mdbchri7t at5pt\n\\textfont\\itfam=\\tenit\n\\scriptfont\\itfam=\\sevenit\n\\scriptscriptfont\\itfam=\\fiveit\n\\def\\it{\\fam=\\itfam \\tenit}\n%\n% Family 5 (Slanted text)\n\\font\\tensl=mdbchro7t at10pt\n\\font\\sevensl=mdbchro7t at7pt\n\\font\\fivesl=mdbchro7t at5pt\n\\textfont\\slfam=\\tensl\n\\scriptfont\\slfam=\\sevensl\n\\scriptscriptfont\\slfam=\\fivesl\n\\def\\sl{\\fam=\\slfam \\tensl}\n%\n% Family 6 (Bold text)\n\\font\\tenbf=mdbchb7t at10pt\n\\font\\sevenbf=mdbchb7t at7pt\n\\font\\fivebf=mdbchb7t at5pt\n\\textfont\\bffam=\\tenbf\n\\scriptfont\\bffam=\\sevenbf\n\\scriptscriptfont\\bffam=\\fivebf\n\\def\\bf{\\fam=\\bffam \\tenbf}\n%\n% Family 7 (Typewriter)\n\\font\\tentt=cmtt10---%\n\\rm\n% Sets normal roman font\n\\font\\seventt=cmtt10 at7pt\n\\font\\fivett=cmtt10 at5pt\n\\textfont\\ttfam=\\tentt\n\\scriptfont\\ttfam=\\seventt\n\\scriptscriptfont\\ttfam=\\fivett\n\\def\\tt{\\fam=\\ttfam \\tentt}\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1579-L1589</li> <li>Corresponding plain TeX control sequence: \\mathcode</li> <li>Donald E. Knuth: The TeXbook, Page 154</li> <li>TUGboat, Volume 31 (2010), No. 1, Mathematical typefaces in TEX documents, Amit Raj Dhawan</li> </ul>"},{"location":"globals/tex/#texsetdelcode","title":"tex.setdelcode","text":"<p><pre><code>function tex.setdelcode(\n  global: \"global\",\n  char_code: integer,\n  small_family: integer,\n  small_character: integer,\n  large_family: integer,\n  large_character: integer\n)\n</code></pre> @param <code>global</code> - It is possible to define values globally by using the string <code>global</code> as the first function argument.</p> <p>-Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1640-L1681</li> <li>Corresponding plain TeX control sequence: \\delcode</li> </ul>"},{"location":"globals/tex/#texsetdelcode_1","title":"tex.setdelcode","text":"<pre><code>function tex.setdelcode(\n  char_code: integer,\n  small_family: integer,\n  small_character: integer,\n  large_family: integer,\n  large_character: integer\n)\n</code></pre> <p>-Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1640-L1681</li> <li>Corresponding plain TeX control sequence: \\delcode</li> </ul>"},{"location":"globals/tex/#texsetdelcode_2","title":"tex.setdelcode","text":"<p><pre><code>function tex.setdelcode(\n  global: \"global\",\n  char_code: integer,\n  del_code: DelCode\n)\n</code></pre> @param <code>global</code> - It is possible to define values globally by using the string <code>global</code> as the first function argument.</p> <ul> <li>Corresponding C source code: ltexlib.c#L1640-L1681</li> <li>Corresponding plain TeX control sequence: \\delcode</li> </ul>"},{"location":"globals/tex/#texsetdelcode_3","title":"tex.setdelcode","text":"<pre><code>function tex.setdelcode(\n  char_code: integer,\n  del_code: DelCode\n)\n</code></pre> <p>-Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1640-L1681</li> <li>Corresponding plain TeX control sequence: \\delcode</li> </ul>"},{"location":"globals/tex/#texgetdelcodes","title":"tex.getdelcodes","text":"<pre><code>function tex.getdelcodes(char_code: integer)\n -&gt; small_family integer\n -&gt; small_character integer\n -&gt; large_family integer\n -&gt; large_character integer\n</code></pre> <ul> <li>Corresponding C source code: ltexlib.c#L1701-L1712</li> <li>Corresponding plain TeX control sequence: \\delcode</li> </ul>"},{"location":"globals/tex/#texgetdelcode","title":"tex.getdelcode","text":"<pre><code>function tex.getdelcode(char_code: integer) -&gt;  DelCode\n</code></pre> <p>-Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1683-L1699</li> <li>Corresponding plain TeX control sequence: \\delcode</li> </ul>"},{"location":"globals/tex/#texsetbox","title":"tex.setbox","text":"<p><pre><code>function tex.setbox(\n  global: \"global\",\n  register: integer,\n  head: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n)\n</code></pre> @param <code>global</code> - It is possible to define values globally by using the string <code>global</code> as the first function argument.</p> <p>@param <code>register</code> - A box register number (0 to 65535).</p> <p>@param <code>head</code> - A <code>hlist</code> or <code>vlist</code> node. \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set a box, coming for instance from <code>hbox</code>, <code>vbox</code> or <code>vtop</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1352-L1362</li> <li>Corresponding plain TeX control sequence: \\setbox</li> </ul>"},{"location":"globals/tex/#texsetbox_1","title":"tex.setbox","text":"<p><pre><code>function tex.setbox(\n  register: integer,\n  head: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n)\n</code></pre> @param <code>register</code> - A box register number (0 to 65535).</p> <p>@param <code>head</code> - A <code>hlist</code> or <code>vlist</code> node. \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set a box, coming for instance from <code>hbox</code>, <code>vbox</code> or <code>vtop</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1352-L1362</li> <li>Corresponding plain TeX control sequence: \\setbox</li> </ul>"},{"location":"globals/tex/#texgetbox","title":"tex.getbox","text":"<p><pre><code>function tex.getbox(register: (integer|string)) -&gt; head Node?\n</code></pre> @param <code>register</code> - A box register number (0 to 65535) or a cs name (for example <code>\\newbox\\MyBox</code>: <code>MyBox</code>)</p> <p>Query an actual box, coming for instance from <code>hbox</code>, <code>vbox</code> or <code>vtop</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1272-L1280</li> <li>Corresponding plain TeX control sequence: \\box</li> </ul>"},{"location":"globals/tex/#texisbox","title":"tex.isbox","text":"<p><pre><code>function tex.isbox(register: (integer|string)) -&gt;  boolean\n</code></pre> @param <code>register</code> - A box register number (0 to 65535) or a cs name (for example <code>\\newbox\\MyBox</code>: <code>MyBox</code>)</p> <p>Check if the given integer is a valid box register number.</p> <p>Example:</p> <pre><code>print(tex.isbox(65535)) -- true\nprint(tex.isbox(65536)) -- false\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L1310-L1315</li> </ul>"},{"location":"globals/tex/#texsaveboxresource","title":"tex.saveboxresource","text":"<p><pre><code>function tex.saveboxresource(\n  n: (Node|integer),\n  attributes: string,\n  resources: string,\n  immediate: boolean,\n  type: integer,\n  margin: integer\n) -&gt; index integer\n</code></pre> @param <code>n</code> - Instead of a box number one can also pass a <code>[h|v]list</code> node.</p> <p>@param <code>type</code> - When set to non-zero the <code>/Type</code> entry is omitted. A value of 1 or 3 still writes a <code>/BBox</code>, while 2 or 3 will write a <code>/Matrix</code>.</p> <p>@param <code>margin</code> - The (virtual) margin that extends beyond the effective boundingbox as seen by TeX.</p> <p>Register a box for reuse (this is modelled after so called xforms in PDF). You can (re)use the box with <code>useboxresource</code> or by creating a rule node with subtype 2.</p> <ul> <li>Corresponding C source code: ltexlib.c#L3217-L3278</li> </ul> <p>@see tex.useboxresource</p>"},{"location":"globals/tex/#texgetboxresourcebox","title":"tex.getboxresourcebox","text":"<pre><code>function tex.getboxresourcebox(n: integer) -&gt;  Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n</code></pre> <ul> <li>Corresponding Lua source code: ltexlib.c#L3346-L3355</li> </ul>"},{"location":"globals/tex/#texuseboxresource","title":"tex.useboxresource","text":"<pre><code>function tex.useboxresource(\n  n: integer,\n  width: integer?,\n  height: integer?,\n  depth: integer?\n)\n -&gt; margin Node?\n -&gt; width integer?\n -&gt; height integer?\n -&gt; depth integer?\n</code></pre> <p>Generate the reference (a rule type).</p> <p>The dimensions are optional and the final ones are returned as extra values.</p> <ul> <li>Corresponding C source code: ltexlib.c#L3280-L3325</li> </ul> <p>@see tex.saveboxresource</p>"},{"location":"globals/tex/#texgetboxresourcedimensions","title":"tex.getboxresourcedimensions","text":"<pre><code>function tex.getboxresourcedimensions(n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n})\n -&gt; width integer?\n -&gt; height integer?\n -&gt; depth integer?\n -&gt; margin integer?\n</code></pre> <p>Return the width, height, depth and margin of the resource.</p> <p>No dimensions returned means that the resource is unknown.</p> <ul> <li>Corresponding C source code: ltexlib.c#L3327-L3344</li> </ul>"},{"location":"globals/tex/#textriggerbuildpage","title":"tex.triggerbuildpage","text":"<pre><code>function tex.triggerbuildpage()\n</code></pre> <p>Call the internal function that build a page, given that there is something to build.</p> <p>You should not expect to much from the <code>triggerbuildpage</code> helpers because often TeX doesn't do much if it thinks nothing has to be done, but it might be useful for some applications.</p> <ul> <li>Corresponding C source code: ltexlib.c#L3357-L3361</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#texsplitbox","title":"tex.splitbox","text":"<pre><code>function tex.splitbox(\n  n: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  height: integer,\n  mode: (\"additional\"|\"exactly\")\n) -&gt; vlist Node?\n</code></pre> <p>Split a box.</p> <p>The remainder is kept in the original box and a packaged vlist is returned. This operation is comparable to the <code>vsplit</code> operation. The mode can be <code>additional</code> or <code>exactly</code> and concerns the split off box.</p> <ul> <li>Corresponding C source code: ltexlib.c#L1282-L1308</li> </ul>"},{"location":"globals/tex/#texsetmath","title":"tex.setmath","text":"<pre><code>function tex.setmath(\n  math_param_name: MathParamName,\n  math_style_name: MathStyleName,\n  value: integer\n)\n</code></pre> <p>Set the internal math parameters.</p> <ul> <li>Corresponding C source code: ltexlib.c#L1986-L2015</li> </ul>"},{"location":"globals/tex/#texsetmath_1","title":"tex.setmath","text":"<p><pre><code>function tex.setmath(\n  global: \"global\",\n  math_param_name: MathParamName,\n  math_style_name: MathStyleName,\n  value: (integer|Node)\n)\n</code></pre> @param <code>global</code> - Indicate a global assignment.</p> <p>@param <code>value</code> - The value is either a number (representing a dimension or number) or a glue spec node representing a muskip for <code>ordordspacing</code> and similar spacing parameters. \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set the internal math parameters.</p> <ul> <li>Corresponding C source code: ltexlib.c#L1986-L2015</li> </ul>"},{"location":"globals/tex/#texgetmath","title":"tex.getmath","text":"<pre><code>function tex.getmath(\n  math_param_name: MathParamName,\n  math_style_name: MathStyleName\n) -&gt; value (integer|Node)\n</code></pre> <p>@return <code>value</code> - The value is either a number (representing a dimension or number) or a glue spec node representing a muskip for <code>ordordspacing</code> and similar spacing parameters.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Query the internal math parameters.</p> <ul> <li>Corresponding C source code: ltexlib.c#L2017-L2039</li> </ul>"},{"location":"globals/tex/#texsetlist","title":"tex.setlist","text":"<pre><code>function tex.setlist()\n</code></pre> <p>You have to be careful with what you set as TeX can have expectations with regards to how a list is constructed or in what state it is.</p> <ul> <li>Corresponding C source code: ltexlib.c#L2266-L2321</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#texgetlist","title":"tex.getlist","text":"<pre><code>function tex.getlist()\n</code></pre> <ul> <li>Corresponding C source code: ltexlib.c#L2202-L2264</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#texgetnest","title":"tex.getnest","text":"<pre><code>function tex.getnest() -&gt;  Nest {\n    mode = number,\n    modeline = integer,\n    head = Node,\n    tail = Node,\n    prevgraf = integer,\n    prevdepth = integer,\n    spacefactor = integer,\n    dirs = Node,\n    noad = Node,\n    delimptr = Node,\n    mathdir = boolean,\n    mathstyle = integer,\n    ...(+0)\n}\n</code></pre> <p>The getter function is <code>getnest</code>. You can pass a number (which gives you a list), nothing or <code>top</code>, which returns the topmost list, or the string <code>ptr</code> which gives you the index of the topmost list.</p> <ul> <li>Corresponding C source code: ltexlib.c#L2422-L2455</li> </ul>"},{"location":"globals/tex/#texsetnest","title":"tex.setnest","text":"<pre><code>function tex.setnest()\n</code></pre> <ul> <li>Corresponding C source code: ltexlib.c#L2457-L2461</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#texgetmodevalues","title":"tex.getmodevalues","text":"<pre><code>function tex.getmodevalues()\n</code></pre> <p><code>tex.getmodevalues()</code> to get the mapping: positive values signal vertical, horizontal and math mode, while negative values indicate inner and inline variants (all modes).</p> <ul> <li>Corresponding C source code: ltexlib.c#L3549-L3565</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#texprint","title":"tex.print","text":"<p><pre><code>function tex.print(\n  input_line: PrintableInput,\n  ...: PrintableInput\n)\n</code></pre> @param <code>input_line</code> - Each string argument is treated by TeX as a separate input line.</p> <p>@param <code>...</code> - The very last string of the very last <code>tex.print</code> command in a <code>directlua</code> will not have the <code>endlinechar</code> appended, all others do.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L1222-L1224</li> <li>Corresponding C source code: ltexlib.c#L161-164</li> </ul> <p>@see tex.sprint tex.tprint tex.cprint tex.write</p>"},{"location":"globals/tex/#texprint_1","title":"tex.print","text":"<p><pre><code>function tex.print(\n  catcodetable_no: integer,\n  input_line: PrintableInput,\n  ...: PrintableInput\n)\n</code></pre> @param <code>catcodetable_no</code> - The parameter can be used to print the strings using the catcode regime defined by <code>\\catcodetable</code> <code>catcodetable_no</code>. If <code>catcodetable_no</code> is <code>-1</code>, the currently active catcode regime is used. If <code>catcodetable_no</code> is <code>-2</code>, the resulting catcodes are the result of <code>\\the</code> <code>\\toks</code>: all category codes are <code>12</code> (<code>other</code>) except for the space character, that has category code <code>10</code> (<code>space</code>). Otherwise, if <code>catcodetable_no</code> is not a valid catcode table, then it is ignored, and the currently active catcode regime is used instead.</p> <p>@param <code>input_line</code> - Each string argument is treated by TeX as a separate input line.</p> <p>@param <code>...</code> - The very last string of the very last <code>tex.print</code> command in a <code>directlua</code> will not have the <code>endlinechar</code> appended, all others do.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L1222-L1224</li> <li>Corresponding C source code: ltexlib.c#L161-164</li> </ul> <p>@see tex.print tex.sprint tex.tprint tex.cprint tex.write</p>"},{"location":"globals/tex/#texprint_2","title":"tex.print","text":"<p><pre><code>function tex.print(input_lines: PrintableInput[])\n</code></pre> @param <code>input_lines</code> - Each string (or number) element of the input table is treated by TeX as a separate input line.</p> <p>If there is a table argument instead of a list of strings, this has to be a consecutive array of strings to print (the first non-string value will stop the printing process).</p> <p>see <code>LuaTeX</code> manual: 10.3.14.1 <code>print</code></p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L1222-L1224</li> <li>Corresponding C source code: ltexlib.c#L161-164</li> </ul> <p>@see tex.sprint tex.tprint tex.cprint tex.write</p>"},{"location":"globals/tex/#texprint_3","title":"tex.print","text":"<p><pre><code>function tex.print(\n  catcodetable_no: integer,\n  input_lines: PrintableInput[]\n)\n</code></pre> @param <code>catcodetable_no</code> - The parameter can be used to print the strings using the catcode regime defined by <code>\\catcodetable</code> <code>catcodetable_no</code>. If <code>catcodetable_no</code> is <code>-1</code>, the currently active catcode regime is used. If <code>catcodetable_no</code> is <code>-2</code>, the resulting catcodes are the result of <code>\\the</code> <code>\\toks</code>: all category codes are <code>12</code> (<code>other</code>) except for the space character, that has category code <code>10</code> (<code>space</code>). Otherwise, if <code>catcodetable_no</code> is not a valid catcode table, then it is ignored, and the currently active catcode regime is used instead.</p> <p>@param <code>input_lines</code> - Each string element of the input table is treated by TeX as a separate input line.</p> <p>see <code>LuaTeX</code> manual: 10.3.14.1 <code>print</code></p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L1222-L1224</li> <li>Corresponding C source code: ltexlib.c#L161-164</li> </ul> <p>@see tex.sprint tex.tprint tex.cprint tex.write</p>"},{"location":"globals/tex/#texsprint","title":"tex.sprint","text":"<pre><code>function tex.sprint(\n  input: PrintableInput,\n  ...: PrintableInput\n)\n</code></pre> <p>combines all of its arguments (or the elements of array argument) into a single input line for TeX. So any leading spaces will be treated as if they were typed, etc. (<code>s(ingle-input-line)print</code>).</p> <p>Each string argument is treated by TeX as a special kind of input line that makes it suitable for use as a partial line input mechanism:</p> <ul> <li>TeX does not switch to the \u201cnew line\u201d state, so that leading spaces are not ignored.</li> <li>No <code>endlinechar</code> is inserted.</li> <li>Trailing spaces are not removed. Note that this does not prevent TeX itself from eating spaces as result of interpreting the line. For example, in</li> </ul> <pre><code>before\\directlua{tex.sprint(\"\\\\relax\")tex.sprint(\" inbetween\")}after\n</code></pre> <p>the space before <code>in between</code> will be gobbled as a result of the \u201cnormal\u201d scanning of <code>\\relax</code>.</p> <p>If there is a table argument instead of a list of strings, this has to be a consecutive array of strings to print (the first non-string value will stop the printing process).</p> <p>The optional argument sets the catcode regime, as with <code>tex.print</code>. This influences the string arguments (or numbers turned into strings).</p> <p>Although this needs to be used with care, you can also pass token or node userdata objects. These get injected into the stream. Tokens had best be valid tokens, while nodes need to be around when they get injected. Therefore it is important to realize the following:</p> <ul> <li>When you inject a token, you need to pass a valid token userdata object. This object will be collected by Lua when it no longer is referenced. When it gets printed to TeX the token itself gets copied so there is no interference with the Lua garbage collection. You manage the object yourself. Because tokens are actually just numbers, there is no real extra overhead at the TeX end.</li> <li>When you inject a node, you need to pass a valid node userdata object. The node related to the object will not be collected by Lua when it no longer is referenced. It lives on at the TeX end in its own memory space. When it gets printed to TeX the node reference is used assuming that node stays around. There is no Lua garbage collection involved. Again, you manage the object yourself. The node itself is freed when TeX is done with it.</li> </ul> <p>If you consider the last remark you might realize that we have a problem when a printed mix of strings, tokens and nodes is reused. Inside TeX the sequence becomes a linked list of input buffers. So, <code>\"123\"</code> or <code>\"\\foo{123</code>\"} gets read and parsed on the fly, while <code>&lt;token userdata&gt;</code> already is tokenized and effectively is a token list now. A <code>&lt;node userdata&gt;</code> is also tokenized into a token list but it has a reference to a real node. Normally this goes fine. But now assume that you store the whole lot in a macro: in that case the tokenized node can be flushed many times. But, after the first such flush the node is used and its memory freed. You can prevent this by using copies which is controlled by setting <code>luacopyinputnodes</code> to a non-zero value. This is one of these fuzzy areas you have to live with if you really mess with these low level issues.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L168-171</li> </ul> <p>@see tex.print tex.tprint tex.cprint tex.write</p>"},{"location":"globals/tex/#texsprint_1","title":"tex.sprint","text":"<p><pre><code>function tex.sprint(\n  catcodetable_no: integer,\n  input: PrintableInput,\n  ...: PrintableInput\n)\n</code></pre> @param <code>catcodetable_no</code> - The parameter can be used to print the strings using the catcode regime defined by <code>\\catcodetable</code> <code>catcodetable_no</code>. If <code>catcodetable_no</code> is <code>-1</code>, the currently active catcode regime is used. If <code>catcodetable_no</code> is <code>-2</code>, the resulting catcodes are the result of <code>\\the</code> <code>\\toks</code>: all category codes are <code>12</code> (<code>other</code>) except for the space character, that has category code <code>10</code> (<code>space</code>). Otherwise, if <code>catcodetable_no</code> is not a valid catcode table, then it is ignored, and the currently active catcode regime is used instead.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L168-171</li> </ul> <p>@see tex.print tex.tprint tex.cprint tex.write</p>"},{"location":"globals/tex/#texsprint_2","title":"tex.sprint","text":"<p><pre><code>function tex.sprint(input: PrintableInput[])\n</code></pre> @param <code>input</code> - Each string element of the input table is treated by TeX as a separate input argument.</p> <p>(<code>s(ingle-input-line)print</code>).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L168-171</li> </ul> <p>@see tex.print tex.tprint tex.cprint tex.write</p>"},{"location":"globals/tex/#texsprint_3","title":"tex.sprint","text":"<p><pre><code>function tex.sprint(\n  catcodetable_no: integer,\n  input: PrintableInput[]\n)\n</code></pre> @param <code>catcodetable_no</code> - The parameter can be used to print the strings using the catcode regime defined by <code>\\catcodetable</code> <code>catcodetable_no</code>. If <code>catcodetable_no</code> is <code>-1</code>, the currently active catcode regime is used. If <code>catcodetable_no</code> is <code>-2</code>, the resulting catcodes are the result of <code>\\the</code> <code>\\toks</code>: all category codes are <code>12</code> (<code>other</code>) except for the space character, that has category code <code>10</code> (<code>space</code>). Otherwise, if <code>catcodetable_no</code> is not a valid catcode table, then it is ignored, and the currently active catcode regime is used instead.---@param t table</p> <p>@param <code>input</code> - Each string element of the input table is treated by TeX as a separate input argument.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L168-171</li> </ul> <p>@see tex.print tex.tprint tex.cprint tex.write</p>"},{"location":"globals/tex/#textprint","title":"tex.tprint","text":"<p><pre><code>function tex.tprint(\n  input: PrintableInput[],\n  ...: PrintableInput[]\n)\n</code></pre> @param <code>input</code> - Each string element of the input table is treated by TeX as a separate input argument.</p> <p>Print tables of strings to the input stream (<code>t(able)print</code>).</p> <p>This function is basically a shortcut for repeated calls to <code>tex.sprint(catcodetable_no,  input, ...)</code>, once for each of the supplied argument tables.</p> <pre><code>\\begingroup\n\\catcode`\\_=12\n\\savecatcodetable 2\n\\endgroup\n\\tt\\directlua{tex.tprint({ 2, '_' })}\n</code></pre> <pre><code>tex.tprint({ 1, 1, 2, 3 }) -- output: 123\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L207-242</li> </ul> <p>@see tex.print tex.sprint tex.cprint tex.write</p>"},{"location":"globals/tex/#texcprint","title":"tex.cprint","text":"<p><pre><code>function tex.cprint(\n  catcode: integer,\n  input: PrintableInput,\n  ...: PrintableInput\n)\n</code></pre> @param <code>catcode</code> - The category code (<code>0</code> stands for the escape character, normally <code>\\</code>, <code>1</code> stands for begin grouping, normally <code>{</code> and so on).</p> <p>Print to the input stream and specify a catcode (<code>c(atcode)print</code>).</p> <pre><code>tex.cprint( 1, \" 1: `&amp;{\\\\foo}\") tex.print(\"\\\\par\") -- a lot of \\bgroup s\ntex.cprint( 2, \" 2: `&amp;{\\\\foo}\") tex.print(\"\\\\par\") -- matching \\egroup s\ntex.cprint( 9, \" 9: `&amp;{\\\\foo}\") tex.print(\"\\\\par\") -- all get ignored\ntex.cprint(10, \"10: `&amp;{\\\\foo}\") tex.print(\"\\\\par\") -- all become spaces\ntex.cprint(11, \"11: `&amp;{\\\\foo}\") tex.print(\"\\\\par\") -- letters\ntex.cprint(12, \"12: `&amp;{\\\\foo}\") tex.print(\"\\\\par\") -- other characters\ntex.cprint(14, \"12: $&amp;{\\\\foo}\") tex.print(\"\\\\par\") -- comment triggers\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L175-203</li> </ul> <p>@see tex.print tex.sprint tex.tprint tex.write</p>"},{"location":"globals/tex/#texcprint_1","title":"tex.cprint","text":"<p><pre><code>function tex.cprint(\n  catcode: integer,\n  input: PrintableInput[]\n)\n</code></pre> @param <code>catcode</code> - The category code (<code>0</code> stands for the escape character, normally <code>\\</code>, <code>1</code> stands for begin grouping, normally <code>{</code> and so on).</p> <p>@param <code>input</code> - Each string element of the input table is treated by TeX as a separate input argument.</p> <p>Print to the input stream and specify a catcode (<code>c(atcode)print</code>).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L175-203</li> </ul> <p>@see tex.print tex.sprint tex.tprint tex.write</p>"},{"location":"globals/tex/#texwrite","title":"tex.write","text":"<pre><code>function tex.write(\n  input: PrintableInput,\n  ...: PrintableInput\n)\n</code></pre> <p>Print to the input stream using category code <code>12</code> (<code>other</code>) except for the space character, that has category code <code>10</code> (<code>space</code>).</p> <p>Each string argument is treated by TeX as a special kind of input line that makes it suitable for use as a quick way to dump information:</p> <ul> <li>All catcodes on that line are either \u201cspace\u201d (for <code></code>) or \u201ccharacter\u201d (for all others).</li> <li>There is no <code>endlinechar</code> appended.</li> </ul> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L175-203</li> </ul> <p>@see tex.print tex.sprint tex.tprint tex.cprint</p>"},{"location":"globals/tex/#texwrite_1","title":"tex.write","text":"<p><pre><code>function tex.write(input: PrintableInput[])\n</code></pre> @param <code>input</code> - Each string element of the input table is treated by TeX as a separate input argument.</p> <p>Print to the input stream using category code <code>12</code> (<code>other</code>) except for the space character, that has category code <code>10</code> (<code>space</code>).</p> <p>Each string argument is treated by TeX as a special kind of input line that makes it suitable for use as a quick way to dump information:</p> <ul> <li>All catcodes on that line are either \u201cspace\u201d (for <code></code>) or \u201ccharacter\u201d (for all others).</li> <li>There is no <code>endlinechar</code> appended.</li> </ul> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L175-203</li> </ul> <p>@see tex.print tex.sprint tex.tprint tex.cprint</p>"},{"location":"globals/tex/#texround","title":"tex.round","text":"<pre><code>function tex.round(o: number) -&gt;  integer\n</code></pre> <p>Rounds Lua number <code>o</code>, and returns a number that is in the range of a valid TeX register value. If the number starts out of range, it generates a \u201cnumber too big\u201d error as well.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L2474-2482</li> </ul>"},{"location":"globals/tex/#texscale","title":"tex.scale","text":"<pre><code>function tex.scale(\n  o: number,\n  delta: number\n) -&gt;  number\n</code></pre> <p>Multiplies the Lua numbers <code>o</code> and <code>delta</code>, and returns a rounded number that is in the range of a valid TeX register value. In the table version, it creates a copy of the table with all numeric top-level values scaled in that manner. If the multiplied number(s) are of range, it generates \u201cnumber too big\u201d error(s) as well.</p> <p>Note: the precision of the output of this function will depend on your computer's architecture and operating system, so use with care! An interface to LuaTeX's internal, 100% portable scale function will be added at a later date.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L2484-2513</li> </ul>"},{"location":"globals/tex/#texscale_1","title":"tex.scale","text":"<pre><code>function tex.scale(\n  o: table,\n  delta: number\n) -&gt;  table\n</code></pre>"},{"location":"globals/tex/#texnumber","title":"tex.number","text":"<pre><code>function tex.number(n: integer) -&gt;  integer\n</code></pre> <p>Companion to the primitive <code>\\number</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L2484-2513</li> <li>https://www.tug.org/utilities/plain/cseq.html#number-rp</li> </ul>"},{"location":"globals/tex/#texromannumeral","title":"tex.romannumeral","text":"<p><pre><code>function tex.romannumeral(n: integer) -&gt;  string\n</code></pre> @param <code>n</code> - for example <code>2025</code></p> <p>@return  - for example <code>mmxxv</code></p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Companion to the primitive <code>\\romannumeral</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L2061-2064</li> </ul>"},{"location":"globals/tex/#texfontidentifier","title":"tex.fontidentifier","text":"<pre><code>function tex.fontidentifier(font_id: integer) -&gt;  string\n</code></pre> <p>@return  - for example <code>\\tenrm</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>returns the <code>csname</code> string that matches a font id number (if there is one).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: L2047-L2050</li> </ul>"},{"location":"globals/tex/#texfontname","title":"tex.fontname","text":"<pre><code>function tex.fontname(font_id: integer) -&gt;  string\n</code></pre> <p>@return  - for example <code>cmr10</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>The first one returns the name only, the second one reports the size too.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: L2042-L2045</li> </ul>"},{"location":"globals/tex/#texsp","title":"tex.sp","text":"<pre><code>function tex.sp(o: integer) -&gt;  integer\n</code></pre> <p>Converts the number <code>o</code> that represents an explicit dimension into an integer number of scaled points.</p> <p>see <code>LuaTeX</code> manual: 10.3.15.5 <code>sp</code></p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L1395-L1396</li> </ul>"},{"location":"globals/tex/#texsp_1","title":"tex.sp","text":"<p><pre><code>function tex.sp(s: string) -&gt;  integer\n</code></pre> @param <code>s</code> - A string to convert into scaled points.</p> <p>@return  - The dimension in the scaled points format.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Convert a string <code>s</code> that represents an explicit dimension into an integer number of scaled points.</p> <p>For parsing the string, the same scanning and conversion rules are used that LuaTeX would use if it was scanning a dimension specifier in its TeX-like input language (this includes generating errors for bad values), expect for the following:</p> <ul> <li>only explicit values are allowed, control sequences are not handled</li> <li>infinite dimension units (<code>fil...</code>) are forbidden</li> <li><code>mu</code> units do not generate an error (but may not be useful either)</li> </ul> <p>Example:</p> <pre><code>local scaled_points = tex.sp('1cm')\nprint(scaled_points) -- 1864679\n</code></pre> <p>Reference:</p> <ul> <li><code>LuaTeX</code> manual: 10.3.15.5 <code>sp</code> page 204</li> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L1386-L1413</li> </ul>"},{"location":"globals/tex/#texerror","title":"tex.error","text":"<p><pre><code>function tex.error(\n  message: string,\n  help: table?\n)\n</code></pre> @param <code>message</code> - An error message like <code>\\errmessage</code>.</p> <p>@param <code>help</code> - The array part of the <code>help</code> table has to contain strings, one for each line of error help.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Create an error like the combination of <code>\\errhelp</code> and <code>\\errmessage</code>.</p> <p>During this error, deletions are disabled.</p> <p>see <code>LuaTeX</code> manual: 10.3.15.5 <code>sp</code></p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L1438-L1457</li> <li>Corresponding C source code: ltexlib.c#L654-692</li> </ul>"},{"location":"globals/tex/#texshow_context","title":"tex.show_context","text":"<pre><code>function tex.show_context()\n</code></pre> <p>Show the current (expansion) context in case of an error.</p> <p>-Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L3210-L3215</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#texrun","title":"tex.run","text":"<pre><code>function tex.run()\n</code></pre> <p>Start the interpretation.</p> <p>A run normally boils down to TeX entering the so called main loop. A token is fetched and depending on it current meaning some actions takes place. Sometimes that actions comes immediately, sometimes more scanning is needed. Quite often tokens get pushed back into the input. This all means that the TeX scanner is constantly pushing and popping input states, but in the end after all the action is done returns to the main loop.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L1459-L1470</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#texfinish","title":"tex.finish","text":"<pre><code>function tex.finish()\n</code></pre> <p>Force the end of an interpretation.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L1464</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#texruntoks","title":"tex.runtoks","text":"<p><pre><code>function tex.runtoks(\n  token_register: integer,\n  force: boolean?,\n  grouped: boolean?\n)\n</code></pre> @param <code>force</code> - force the local main loop</p> <p>@param <code>grouped</code> - adds a level of grouping.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Because of the fact that TeX is in a complex dance of expanding, dealing with fonts, typesetting paragraphs, messing around with boxes, building pages, and so on, you cannot easily run a nested TeX run (read nested main loop). However, there is an option to force a local run with <code>runtoks</code>. The content of the given token list register gets expanded locally after which we return to where we triggered this expansion, at the Lua end. Instead a function can get passed that does some work. You have to make sure that at the end TeX is in a sane state and this is not always trivial. A more complex mechanism would complicate TeX itself (and probably also harm performance) so this simple local expansion loop has to do.</p> <p>When the <code>tracingnesting</code> parameter is set to a value larger than 2 some information is reported about the state of the local loop.</p> <p>Inside for instance an <code>\\edef</code> the <code>runtoks</code> function behaves (at least tries to) like it were an <code>\\the</code>. This prevents unwanted side effects: normally in such an definition tokens remain tokens and (for instance) characters don't become nodes.</p> <p>Example:</p> <pre><code>\\toks0{\\setbox0\\hbox{one}}\n\\toks1{\\setbox0\\hbox{first}}\n\\directlua {\n  tex.forcehmode(true)\n  tex.runtoks(0)\n  print(tex.getbox(0).width)\n  tex.runtoks(1)\n  print(tex.getbox(0).width)\n}\n</code></pre> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L1472-L1508</li> <li>Corresponding C source code: ltexlib.c#L3464-L3536</li> </ul>"},{"location":"globals/tex/#texruntoks_1","title":"tex.runtoks","text":"<pre><code>function tex.runtoks(func: function)\n</code></pre>"},{"location":"globals/tex/#texquittoks","title":"tex.quittoks","text":"<pre><code>function tex.quittoks()\n</code></pre> <p>You can quit the local loop with <code>\\endlocalcontrol</code> or from the Lua end with <code>tex.quittoks</code>. In that case you end one level up! Of course in the end that can mean that you arrive at the main level in which case an extra end will trigger a redundancy warning (not an abort!).</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#texforcehmode","title":"tex.forcehmode","text":"<pre><code>function tex.forcehmode(indented: boolean?)\n</code></pre> <p>An example of a (possible error triggering) complication is that TeX expects to be in some state, say horizontal mode, and you have to make sure it is when you start feeding back something from Lua into TeX. Normally a user will not run into issues but when you start writing tokens or nodes or have a nested run there can be situations that you need to run <code>forcehmode</code>. There is no recipe for this and intercepting possible cases would weaken LuaTeX's flexibility.</p>"},{"location":"globals/tex/#texhashtokens","title":"tex.hashtokens","text":"<pre><code>function tex.hashtokens()\n</code></pre> <p>Return a list of names.</p> <p>This can be useful for debugging, but note that this also reports control sequences that may be unreachable at this moment due to local redefinitions: it is strictly a dump of the hash table. You can use <code>token.create</code> to inspect properties, for instance when the <code>command</code> key in a created table equals <code>123</code>, you have the <code>cmdname</code> value <code>undefined_cs</code>.</p> <pre><code>for i,v in pairs(tex.hashtokens()) do ... end\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L2662-L2690</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#texdefinefont","title":"tex.definefont","text":"<pre><code>function tex.definefont(\n  csname: string,\n  fontid: integer\n)\n</code></pre> <p>Associates <code>csname</code> with the internal font number <code>fontid</code>. The definition is global if (and only if) <code>global</code> is specified and true (the setting of <code>globaldefs</code> is not taken into account).</p>"},{"location":"globals/tex/#texdefinefont_1","title":"tex.definefont","text":"<pre><code>function tex.definefont(\n  global: boolean,\n  csname: string,\n  fontid: integer\n)\n</code></pre> <p>Associates <code>csname</code> with the internal font number <code>fontid</code>. The definition is global if (and only if) <code>global</code> is specified and true (the setting of <code>globaldefs</code> is not taken into account).</p>"},{"location":"globals/tex/#texenableprimitives","title":"tex.enableprimitives","text":"<pre><code>function tex.enableprimitives(\n  prefix: string,\n  primitive_names: string[]\n)\n</code></pre> <p>This function accepts a prefix string and an array of primitive names. For each combination of \u201cprefix\u201d and \u201cname\u201d, the <code>tex.enableprimitives</code> first verifies that \u201cname\u201d is an actual primitive (it must be returned by one of the <code>tex.extraprimitives</code> calls explained below, or part of TeX82, or <code>directlua</code>). If it is not, <code>tex.enableprimitives</code> does nothing and skips to the next pair.</p> <p>But if it is, then it will construct a csname variable by concatenating the \u201cprefix\u201d and \u201cname\u201d, unless the \u201cprefix\u201d is already the actual prefix of \u201cname\u201d. In the latter case, it will discard the \u201cprefix\u201d, and just use \u201cname\u201d.</p> <p>Then it will check for the existence of the constructed csname. If the csname is currently undefined (note: that is not the same as <code>relax</code>), it will globally define the csname to have the meaning: run code belonging to the primitive \u201cname\u201d. If for some reason the csname is already defined, it does nothing and tries the next pair.</p> <p>An example:</p> <pre><code>tex.enableprimitives('LuaTeX', {'formatname'})\n</code></pre> <p>will define <code>\\LuaTeXformatname</code> with the same intrinsic meaning as the documented primitive <code>formatname</code>, provided that the control sequences <code>\\LuaTeXformatname</code> is currently undefined.</p> <p>When LuaTeX is run with <code>--ini</code> only the TeX82 primitives and <code>directlua</code> are available, so no extra primitives {\\bf at all}.</p> <p>If you want to have all the new functionality available using their default names, as it is now, you will have to add</p> <pre><code>\\ifx\\directlua\\undefined \\else\n    \\directlua {tex.enableprimitives('',tex.extraprimitives ())}\n\\fi\n</code></pre> <p>near the beginning of your format generation file. Or you can choose different prefixes for different subsets, as you see fit.</p> <p>Calling some form of <code>tex.enableprimitives</code> is highly important though, because if you do not, you will end up with a TeX82-lookalike that can run Lua code but not do much else. The defined csnames are (of course) saved in the format and will be available at runtime.</p> <p>*</p> <ul> <li>Corresponding C source code: ltexlib.c#L2752-L2809</li> </ul>"},{"location":"globals/tex/#texextraprimitives","title":"tex.extraprimitives","text":"<pre><code>function tex.extraprimitives(...: TexEngine) -&gt;  string[]\n</code></pre> <p>Return a list of the primitives that originate from the engine(s) given by the requested string value(s).</p> <p>The possible values and their (current) return values are given in the following table. In addition the somewhat special primitives \u201c\\tex{ \u201d}, \u201c\\tex {/\u201d} and \u201c<code>-</code>\u201d are defined.</p> <p>Note that <code>luatex</code> does not contain <code>directlua</code>, as that is considered to be a core primitive, along with all the TeX82 primitives, so it is part of the list that is returned from <code>core</code>.</p> <p>Running <code>tex.extraprimitives()</code> will give you the complete list of primitives <code>-ini</code> startup. It is exactly equivalent to <code>tex.extraprimitives(\"etex\",\"luatex\")</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L2710-L2750</li> </ul>"},{"location":"globals/tex/#texprimitives","title":"tex.primitives","text":"<pre><code>function tex.primitives() -&gt;  string[]\n</code></pre> <p>Return a list of all primitives that LuaTeX knows about.</p> <ul> <li>Corresponding C source code: ltexlib.c#L2691-L2708</li> </ul>"},{"location":"globals/tex/#texbadness","title":"tex.badness","text":"<p><pre><code>function tex.badness(\n  total: integer,\n  sum: integer\n) -&gt; badness integer\n</code></pre> @param <code>total</code> - scaled values</p> <p>@param <code>sum</code> - scaled values</p> <p>Calculate the badness.</p> <p>This helper function is useful during linebreak calculations. The function returns the badness for when total <code>total</code> is supposed to be made from amounts that sum to <code>sum</code>. The returned number is a reasonable approximation of <code>100(total/sum)^3</code>.</p> <ul> <li>Corresponding C source code: ltexlib.c#L3069-L3075</li> <li>Corresponding C source code: arithmetic.c#L275-L300</li> </ul>"},{"location":"globals/tex/#texresetparagraph","title":"tex.resetparagraph","text":"<pre><code>function tex.resetparagraph()\n</code></pre> <p>Reset the parameters that TeX normally resets when a new paragraph is seen.</p> <ul> <li>Corresponding C source code: ltexlib.c#L3054-L3059</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#texlinebreak","title":"tex.linebreak","text":"<pre><code>function tex.linebreak(\n  listhead: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n},\n  parameters: LinebreakParameters {\n    pardir = string,\n    pretolerance = integer,\n    tracingparagraphs = integer,\n    tolerance = integer,\n    looseness = integer,\n    hyphenpenalty = integer,\n    exhyphenpenalty = integer,\n    pdfadjustspacing = integer,\n    adjdemerits = integer,\n    pdfprotrudechars = integer,\n    linepenalty = integer,\n    lastlinefit = integer,\n    ...(+13)\n}\n)\n -&gt;  Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n}\n -&gt;  table\n</code></pre> <p>Note that there is no interface for <code>displaywidowpenalties</code>, you have to pass the right choice for <code>widowpenalties</code> yourself.</p> <p>It is your own job to make sure that <code>listhead</code> is a proper paragraph list: this function does not add any nodes to it. To be exact, if you want to replace the core line breaking, you may have to do the following (when you are not actually working in the <code>pre_linebreak_filter</code> or <code>linebreak_filter</code> callbacks, or when the original list starting at listhead was generated in horizontal mode):</p> <ul> <li> <p>add an \u201cindent box\u201d and perhaps a <code>local_par</code> node at the start (only if you need them)</p> </li> <li> <p>replace any found final glue by an infinite penalty (or add such a penalty, if the last node is not a glue)</p> </li> <li> <p>add a glue node for the <code>parfillskip</code> after that penalty node</p> </li> <li> <p>make sure all the <code>prev</code> pointers are OK</p> </li> </ul> <p>The result is a node list, it still needs to be vpacked if you want to assign it to a <code>vbox</code>. The returned <code>info</code> table contains four values that are all numbers:</p> <p>name       explanation</p> <p>prevdepth  depth of the last line in the broken paragraph prevgraf   number of lines in the broken paragraph looseness  the actual looseness value in the broken paragraph demerits   the total demerits of the chosen solution</p> <p>Note there are a few things you cannot interface using this function: You cannot influence font expansion other than via <code>pdfadjustspacing</code>, because the settings for that take place elsewhere. The same is true for hbadness and hfuzz etc. All these are in the <code>hpack</code> routine, and that fetches its own variables via globals.</p>"},{"location":"globals/tex/#texshipout","title":"tex.shipout","text":"<pre><code>function tex.shipout()\n</code></pre> <p>Ships out box number <code>n</code> to the output file, and clears the box register.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#texgetpagestate","title":"tex.getpagestate","text":"<pre><code>function tex.getpagestate()\n</code></pre> <p>This helper reports the current page state: <code>empty</code>, <code>box_there</code> or <code>inserts_only</code> as integer value.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#texgetlocallevel","title":"tex.getlocallevel","text":"<pre><code>function tex.getlocallevel()\n</code></pre> <p>This integer reports the current level of the local loop. It's only useful for debugging and the (relative state) numbers can change with the implementation.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#texinit_rand","title":"tex.init_rand","text":"<pre><code>function tex.init_rand(seed: integer)\n</code></pre> <p>Initialize a new seed.</p> <p><code>lua_math_randomseed</code> is equivalent to this function.</p> <ul> <li>Corresponding C source code: ltexlib.c#L3132-L3142</li> </ul> <p>@see tex.lua_math_randomseed</p>"},{"location":"globals/tex/#texlua_math_randomseed","title":"tex.lua_math_randomseed","text":"<pre><code>function tex.lua_math_randomseed(seed: integer)\n</code></pre> <p>Initialize a new seed.</p> <p><code>init_rand</code> is equivalent to this function.</p> <ul> <li>Corresponding C source code: ltexlib.c#L3132-L3142</li> </ul> <p>@see tex.init_rand</p>"},{"location":"globals/tex/#texlua_math_random","title":"tex.lua_math_random","text":"<pre><code>function tex.lua_math_random(\n  lower: number,\n  upper: number\n) -&gt;  number\n</code></pre> <p>For practical reasons LuaTeX has its own random number generator. This is the original Lua random function.</p> <ul> <li>Corresponding C source code: ltexlib.c#L3164-L3192</li> </ul>"},{"location":"globals/tex/#texlua_math_random_1","title":"tex.lua_math_random","text":"<pre><code>function tex.lua_math_random(upper: number?) -&gt;  number\n</code></pre> <p>For practical reasons LuaTeX has its own random number generator. This is the original Lua random function.</p> <ul> <li>Corresponding C source code: ltexlib.c#L3164-L3192</li> </ul>"},{"location":"globals/tex/#texnormal_rand","title":"tex.normal_rand","text":"<pre><code>function tex.normal_rand()\n</code></pre> <p>no argument is used</p> <ul> <li>Corresponding C source code: ltexlib.c#L3156-L3160</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#texuniform_rand","title":"tex.uniform_rand","text":"<pre><code>function tex.uniform_rand()\n</code></pre> <p>takes a number that will get rounded before being used</p> <ul> <li>Corresponding C source code: ltexlib.c#L3144-L3154</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#texuniformdeviate","title":"tex.uniformdeviate","text":"<p><pre><code>function tex.uniformdeviate(n: integer)\n</code></pre> @param <code>n</code> - a scaled integer</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>which behaves like the primitive and expects a scaled integer, so</p> <pre><code>tex.print(tex.uniformdeviate(65536)/65536)\n</code></pre> <p>will give a random number between zero and one.</p> <ul> <li>Corresponding C source code: ltexlib.c#L2051-L2054</li> </ul>"},{"location":"globals/tex/#texset_synctex_mode","title":"tex.set_synctex_mode","text":"<pre><code>function tex.set_synctex_mode(mode: SyntexMode)\n</code></pre> <ul> <li>Corresponding C source code: ltexlib.c#L3377-L3382</li> </ul>"},{"location":"globals/tex/#texget_synctex_mode","title":"tex.get_synctex_mode","text":"<pre><code>function tex.get_synctex_mode() -&gt; mode SyntexMode\n</code></pre> <p>Return the current mode.</p> <ul> <li>Corresponding C source code: ltexlib.c#L3383-L3387</li> </ul>"},{"location":"globals/tex/#texset_synctex_tag","title":"tex.set_synctex_tag","text":"<pre><code>function tex.set_synctex_tag(tag: integer)\n</code></pre> <p>Set the current tag (file) value (obeys save stack).</p> <ul> <li>Corresponding C source code: ltexlib.c#L3389-L3394</li> </ul>"},{"location":"globals/tex/#texget_synctex_tag","title":"tex.get_synctex_tag","text":"<pre><code>function tex.get_synctex_tag() -&gt; tag integer\n</code></pre> <p>Get the currently set value of a tag (file).</p> <ul> <li>Corresponding C source code: ltexlib.c#L3396-L3400</li> </ul>"},{"location":"globals/tex/#texforce_synctex_tag","title":"tex.force_synctex_tag","text":"<pre><code>function tex.force_synctex_tag(tag: integer)\n</code></pre> <p>Overload the tag (file) value  (<code>0</code> resets).</p> <ul> <li>Corresponding C source code: ltexlib.c#L3402-L3407</li> </ul>"},{"location":"globals/tex/#texset_synctex_line","title":"tex.set_synctex_line","text":"<pre><code>function tex.set_synctex_line(line: integer)\n</code></pre> <p>Set the current line value (obeys save stack).</p> <ul> <li>Corresponding C source code: ltexlib.c#L3416-L3421</li> </ul>"},{"location":"globals/tex/#texget_synctex_line","title":"tex.get_synctex_line","text":"<pre><code>function tex.get_synctex_line() -&gt; line integer\n</code></pre> <p>Get the currently set value of a line.</p> <ul> <li>Corresponding C source code: ltexlib.c#L3423-L3427</li> </ul>"},{"location":"globals/tex/#texforce_synctex_line","title":"tex.force_synctex_line","text":"<pre><code>function tex.force_synctex_line(line: integer)\n</code></pre> <p>Overload the line value (<code>0</code> resets)</p> <ul> <li>Corresponding C source code: L3409-L3414</li> </ul>"},{"location":"globals/tex/#texset_synctex_no_files","title":"tex.set_synctex_no_files","text":"<pre><code>function tex.set_synctex_no_files(flag: integer)\n</code></pre> <p>Disable synctex file logging.</p> <ul> <li>Corresponding C source code: ltexlib.c#L3429-L3434</li> </ul>"},{"location":"globals/tex/#fields","title":"fields","text":""},{"location":"globals/tex/#texadjdemerits","title":"tex.adjdemerits","text":"<pre><code>tex.adjdemerits : integer\n</code></pre> <p><code>\\adjdemerits</code>: Penalty for adjacent visually incompatible lines. Default: <code>10000</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 175</li> </ul>"},{"location":"globals/tex/#texbinoppenalty","title":"tex.binoppenalty","text":"<pre><code>tex.binoppenalty : integer\n</code></pre> <p><code>\\binoppenalty</code>: Penalty for breaking after a binary operator not enclosed in a subformula. Default: <code>700</code></p> <p>Reference:</p> <ul> <li>TeX by Topic, page 201</li> </ul>"},{"location":"globals/tex/#texbrokenpenalty","title":"tex.brokenpenalty","text":"<pre><code>tex.brokenpenalty : integer\n</code></pre> <p><code>\\brokenpenalty</code>: Additional penalty for breaking a page after a hyphenated line. Default: <code>100</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 226</li> </ul>"},{"location":"globals/tex/#texcatcodetable","title":"tex.catcodetable","text":"<pre><code>tex.catcodetable : integer\n</code></pre> <p>Catcode tables are a new feature that allows you to switch to a predefined catcode regime in a single statement.</p>"},{"location":"globals/tex/#texclubpenalty","title":"tex.clubpenalty","text":"<pre><code>tex.clubpenalty : integer\n</code></pre> <p><code>\\clubpenalty</code>: Extra penalty for breaking a page after the first line of a paragraph. In Plain TeX this is <code>150</code>. This amount, and the following penalties, are added to the <code>\\interlinepenalty</code>, and a penalty of the resulting size is inserted after the <code>\\hbox</code> containing the first line of a paragraph instead of the <code>\\interlinepenalty</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 227</li> </ul>"},{"location":"globals/tex/#texday","title":"tex.day","text":"<pre><code>tex.day : integer\n</code></pre> <p><code>\\day</code>: The day of the current job.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 257</li> </ul>"},{"location":"globals/tex/#texdefaulthyphenchar","title":"tex.defaulthyphenchar","text":"<pre><code>tex.defaulthyphenchar : integer\n</code></pre> <p><code>\\defaulthyphenchar</code>: Value of <code>\\hyphenchar</code> when a font is loaded. Default: <code>\u2018\\-</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 52</li> </ul>"},{"location":"globals/tex/#texdefaultskewchar","title":"tex.defaultskewchar","text":"<pre><code>tex.defaultskewchar : integer\n</code></pre> <p><code>\\defaultskewchar</code>: Value of <code>\\skewchar</code> when a font is loaded.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 190</li> </ul>"},{"location":"globals/tex/#texdelimiterfactor","title":"tex.delimiterfactor","text":"<pre><code>tex.delimiterfactor : integer\n</code></pre> <p><code>\\delimiterfactor</code>: <code>1000</code> times the fraction of a delimited formula that should be covered by a delimiter. Default: <code>901</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 190</li> </ul>"},{"location":"globals/tex/#texdisplaywidowpenalty","title":"tex.displaywidowpenalty","text":"<pre><code>tex.displaywidowpenalty : integer\n</code></pre> <p><code>\\displaywidowpenalty</code>: Extra penalty for breaking a page before the last line above a display formula. The default value in Plain TeX is <code>50</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 229</li> </ul>"},{"location":"globals/tex/#texdoublehyphendemerits","title":"tex.doublehyphendemerits","text":"<pre><code>tex.doublehyphendemerits : integer\n</code></pre> <p><code>\\doublehyphendemerits</code>: Penalty for consecutive lines ending with a hyphen. Default: <code>10000</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 175</li> </ul>"},{"location":"globals/tex/#texendlinechar","title":"tex.endlinechar","text":"<pre><code>tex.endlinechar : integer\n</code></pre> <p><code>\\endlinechar</code>: The character code of the end-of-line character appended to input lines. IniTEX default: <code>13</code>.</p>"},{"location":"globals/tex/#texerrorcontextlines","title":"tex.errorcontextlines","text":"<pre><code>tex.errorcontextlines : integer\n</code></pre> <p><code>\\errorcontextlines</code>: (TeX3 only) Number of additional context lines shown in error messages.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 272</li> </ul>"},{"location":"globals/tex/#texescapechar","title":"tex.escapechar","text":"<pre><code>tex.escapechar : integer\n</code></pre> <p><code>\\escapechar</code>: Number of the character that is to be used for the escape character when control sequences are being converted into character tokens. IniTEX default: <code>92</code> (<code>\\</code>).</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 43</li> </ul>"},{"location":"globals/tex/#texexhyphenpenalty","title":"tex.exhyphenpenalty","text":"<pre><code>tex.exhyphenpenalty : integer\n</code></pre> <p><code>\\exhyphenpenalty</code>: Penalty for breaking a horizontal line at a discretionary item in the special case where the prebreak text is empty. Default: <code>50</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 175</li> </ul>"},{"location":"globals/tex/#texfam","title":"tex.fam","text":"<pre><code>tex.fam : integer\n</code></pre> <p><code>\\fam</code>: The number of the current font family.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 196</li> </ul>"},{"location":"globals/tex/#texfinalhyphendemerits","title":"tex.finalhyphendemerits","text":"<pre><code>tex.finalhyphendemerits : integer\n</code></pre> <p><code>\\finalhyphendemerits</code>: Penalty added when the penultimate line of a paragraph ends with a hyphen. Default: <code>5000</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 175</li> </ul>"},{"location":"globals/tex/#texfloatingpenalty","title":"tex.floatingpenalty","text":"<pre><code>tex.floatingpenalty : integer\n</code></pre> <p><code>\\floatingpenalty</code>: Penalty added when an insertion is split.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 240</li> </ul>"},{"location":"globals/tex/#texglobaldefs","title":"tex.globaldefs","text":"<pre><code>tex.globaldefs : integer\n</code></pre> <p><code>\\globaldefs</code>: Parameter for overriding \\global prefixes. IniTEX default: <code>0</code>.</p> <p><code>\\globaldefs</code> is a TeX internal parameter. Normally set to <code>0</code>. If set equal to a positive number, all following definitions and assignments are treated as if preceded by <code>\\global</code>. If set equal to a negative number, none of the following definitions or assignments are global, meaning that an explicit <code>\\global</code> is ignored. This remains in effect until <code>\\globaldefs</code> is explicitly set to <code>0</code> again, or the group containing the <code>\\globaldefs</code> reassignment ends (assuming it was not made global as well).</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 105</li> <li>Wikibook/TeX</li> </ul>"},{"location":"globals/tex/#texhangafter","title":"tex.hangafter","text":"<pre><code>tex.hangafter : integer\n</code></pre> <p><code>\\hangafter</code>: If positive, this denotes the number of lines before indenting starts; if negative, the absolute value of this is the number of indented lines starting with the first line of the paragraph. Default: <code>1</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 170</li> </ul>"},{"location":"globals/tex/#texhbadness","title":"tex.hbadness","text":"<pre><code>tex.hbadness : integer\n</code></pre> <p><code>\\hbadness</code>: Amount of tolerance before TEX reports an underfull or overfull horizontal box.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 57</li> </ul>"},{"location":"globals/tex/#texholdinginserts","title":"tex.holdinginserts","text":"<pre><code>tex.holdinginserts : integer\n</code></pre> <p><code>\\holdinginserts</code> (TeX3 only) If this is positive, insertions are not placed in their boxes at output time.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 240</li> </ul>"},{"location":"globals/tex/#texhyphenpenalty","title":"tex.hyphenpenalty","text":"<pre><code>tex.hyphenpenalty : integer\n</code></pre> <p><code>\\hyphenpenalty</code>: Penalty associated with break at a discretionary item in the general case. Default: <code>50</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 175</li> </ul>"},{"location":"globals/tex/#texinterlinepenalty","title":"tex.interlinepenalty","text":"<pre><code>tex.interlinepenalty : integer\n</code></pre> <p><code>\\interlinepenalty</code>: Penalty for breaking a page between lines of a paragraph. Default: <code>0</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 57</li> </ul>"},{"location":"globals/tex/#texlanguage","title":"tex.language","text":"<pre><code>tex.language : integer\n</code></pre> <p><code>\\language</code>: Choose a set of hyphenation patterns and exceptions.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 176</li> </ul>"},{"location":"globals/tex/#texlastlinefit","title":"tex.lastlinefit","text":"<pre><code>tex.lastlinefit : integer\n</code></pre>"},{"location":"globals/tex/#texlefthyphenmin","title":"tex.lefthyphenmin","text":"<pre><code>tex.lefthyphenmin : integer\n</code></pre> <p><code>\\lefthyphenmin</code> (TeX3 only) Minimal number of characters before a hyphenation. Default: <code>2</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 175</li> </ul>"},{"location":"globals/tex/#texlinepenalty","title":"tex.linepenalty","text":"<pre><code>tex.linepenalty : integer\n</code></pre> <p><code>\\linepenalty</code>: Penalty value associated with each line break. Default: <code>10</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 175</li> </ul>"},{"location":"globals/tex/#texlocalbrokenpenalty","title":"tex.localbrokenpenalty","text":"<pre><code>tex.localbrokenpenalty: integer = 0\n</code></pre> <p>Local broken penalty (from <code>\\localbrokenpenalty</code>)</p> <p>---@type integer # A readable and writable integer parameter that accepts and returns Lua numbers.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#texlocalinterlinepenalty","title":"tex.localinterlinepenalty","text":"<pre><code>tex.localinterlinepenalty : integer\n</code></pre> <p>Local interline penalty (from <code>\\localinterlinepenalty</code>)</p>"},{"location":"globals/tex/#texlooseness","title":"tex.looseness","text":"<pre><code>tex.looseness : integer\n</code></pre> <p><code>\\looseness</code>: Number of lines by which this paragraph has to be made longer than it would be ideally.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 175</li> </ul>"},{"location":"globals/tex/#texmag","title":"tex.mag","text":"<pre><code>tex.mag : integer\n</code></pre> <p><code>\\mag</code>: <code>1000</code> times the magnification of the document.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 257</li> </ul>"},{"location":"globals/tex/#texmaxdeadcycles","title":"tex.maxdeadcycles","text":"<pre><code>tex.maxdeadcycles : integer\n</code></pre> <p><code>\\maxdeadcycles</code>: The maximum number of times that the output routine is allowed to be called without a <code>\\shipout</code> occurring. IniTEX default: <code>25</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 288</li> </ul>"},{"location":"globals/tex/#texmonth","title":"tex.month","text":"<pre><code>tex.month : integer\n</code></pre> <p><code>\\month</code>: The month of the current job.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 257</li> </ul>"},{"location":"globals/tex/#texnewlinechar","title":"tex.newlinechar","text":"<pre><code>tex.newlinechar : integer\n</code></pre> <p><code>\\newlinechar</code>: Number of the character that triggers a new line in <code>\\write</code> statements.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 246</li> </ul>"},{"location":"globals/tex/#texoutputpenalty","title":"tex.outputpenalty","text":"<pre><code>tex.outputpenalty : integer\n</code></pre> <p><code>\\outputpenalty</code>: Value of the penalty at the current page break, or <code>10000</code> if the break was not at a penalty.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 289</li> </ul>"},{"location":"globals/tex/#texpausing","title":"tex.pausing","text":"<pre><code>tex.pausing : integer\n</code></pre> <p><code>\\pausing</code>: Specify that TEX should pause after each line that is read from a file.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 246</li> </ul>"},{"location":"globals/tex/#texpostdisplaypenalty","title":"tex.postdisplaypenalty","text":"<pre><code>tex.postdisplaypenalty : integer\n</code></pre> <p><code>\\postdisplaypenalty</code>: Penalty placed in the vertical list below a display. Default: <code>0</code></p> <p>Reference:</p> <ul> <li>TeX by Topic, page 210</li> </ul>"},{"location":"globals/tex/#texpredisplaydirection","title":"tex.predisplaydirection","text":"<pre><code>tex.predisplaydirection: integer = 0\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#texpredisplaypenalty","title":"tex.predisplaypenalty","text":"<pre><code>tex.predisplaypenalty : integer\n</code></pre> <p><code>\\predisplaypenalty</code>: Penalty placed in the vertical list above a display. Default: <code>10000</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 210</li> </ul>"},{"location":"globals/tex/#texpretolerance","title":"tex.pretolerance","text":"<pre><code>tex.pretolerance : integer\n</code></pre> <p><code>\\pretolerance</code>: Tolerance value for a paragraph without hyphenation. Default: <code>100</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 175</li> </ul>"},{"location":"globals/tex/#texrelpenalty","title":"tex.relpenalty","text":"<pre><code>tex.relpenalty : integer\n</code></pre> <p><code>\\relpenalty</code>: Penalty for breaking after a binary relation not enclosed in a subformula. Default: <code>500</code></p> <p>Reference:</p> <ul> <li>TeX by Topic, page 201</li> </ul>"},{"location":"globals/tex/#texrighthyphenmin","title":"tex.righthyphenmin","text":"<pre><code>tex.righthyphenmin : integer\n</code></pre> <p><code>\\righthyphenmin</code>: (TeX3 only) Minimum number of characters after a hyphenation. Default: <code>3</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 201</li> </ul>"},{"location":"globals/tex/#texsavinghyphcodes","title":"tex.savinghyphcodes","text":"<pre><code>tex.savinghyphcodes : integer\n</code></pre> <p>When a <code>\\patterns</code> command is executed and \\savinghyphcodes has a positive value, the current <code>\\lccode</code> values are saved as hyphenation codes for the current language.</p> <p>Reference:</p> <ul> <li>The \u03b5-TEX manual Version 2, February 1998 (updated March 2024), page 11</li> </ul>"},{"location":"globals/tex/#texsavingvdiscards","title":"tex.savingvdiscards","text":"<pre><code>tex.savingvdiscards : integer\n</code></pre> <p>When \u03b5-TEX\u2019s parameter <code>\\savingvdiscards</code> has been assigned a positive value, these \u2018discarded items\u2019 are saved in two lists and can be recovered by the commands <code>\\pagediscards</code> and <code>\\splitdiscards</code> that act like \u2018unvboxing\u2019 hypothetical box registers containing a vbox with the discarded items.</p> <p>Reference:</p> <ul> <li>The \u03b5-TEX manual Version 2, February 1998 (updated March 2024), page 12</li> </ul>"},{"location":"globals/tex/#texshowboxbreadth","title":"tex.showboxbreadth","text":"<pre><code>tex.showboxbreadth : integer\n</code></pre> <p><code>\\showboxbreadth</code>: Number of successive elements on each level that are shown when boxes are displayed.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 267</li> </ul>"},{"location":"globals/tex/#texshowboxdepth","title":"tex.showboxdepth","text":"<pre><code>tex.showboxdepth : integer\n</code></pre> <p><code>\\showboxdepth</code>: The number of levels of box dump that are shown when boxes are displayed.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 267</li> </ul>"},{"location":"globals/tex/#textime","title":"tex.time","text":"<pre><code>tex.time : integer\n</code></pre> <p><code>\\time</code>: Number of minutes after midnight that the current job started.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 257</li> </ul>"},{"location":"globals/tex/#textolerance","title":"tex.tolerance","text":"<pre><code>tex.tolerance : integer\n</code></pre> <p><code>\\tolerance</code>: Tolerance value for lines in a paragraph with hyphenation. Default: <code>200</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 175</li> </ul>"},{"location":"globals/tex/#textracingassigns","title":"tex.tracingassigns","text":"<pre><code>tex.tracingassigns : integer\n</code></pre> <p>When the program is compiled with the code for collecting statistics and <code>\\tracingassigns</code> has a value of <code>1</code> or more, all assignments subject to TeX\u2019s grouping mechanism are traced.</p> <p>Reference:</p> <ul> <li>The \u03b5-TEX manual Version 2, February 1998 (updated March 2024), page 4</li> </ul>"},{"location":"globals/tex/#textracingcommands","title":"tex.tracingcommands","text":"<pre><code>tex.tracingcommands : integer\n</code></pre> <p><code>\\tracingcommands</code>: If this is <code>1</code> TEX displays primitive commands executed; if this is <code>2</code> or more the outcome of conditionals is also recorded.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 267</li> </ul>"},{"location":"globals/tex/#textracinggroups","title":"tex.tracinggroups","text":"<pre><code>tex.tracinggroups : integer\n</code></pre> <p>When <code>\\tracinggroups</code> has a value of <code>1</code> or more, the start and end of each save group is traced, together with the starting line and grouping level.</p> <p>Reference:</p> <ul> <li>The \u03b5-TEX manual Version 2, February 1998 (updated March 2024), page 4</li> </ul>"},{"location":"globals/tex/#textracingifs","title":"tex.tracingifs","text":"<pre><code>tex.tracingifs : integer\n</code></pre> <p>When <code>\\tracingifs</code> has a value of <code>1</code> or more, all conditionals (including <code>\\unless</code>, <code>\\or</code>, <code>\\else</code>, and <code>\\fi</code>) are traced, together with the starting line and nesting level.</p> <p>Reference:</p> <ul> <li>The \u03b5-TEX manual Version 2, February 1998 (updated March 2024), page 4</li> </ul>"},{"location":"globals/tex/#textracinglostchars","title":"tex.tracinglostchars","text":"<pre><code>tex.tracinglostchars : integer\n</code></pre> <p><code>\\tracinglostchars</code>: If this parameter is positive, TeX gives diagnostic messages whenever a character is accessed that is not present in a font. Plain default: <code>1</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 268</li> </ul>"},{"location":"globals/tex/#textracingmacros","title":"tex.tracingmacros","text":"<pre><code>tex.tracingmacros : integer\n</code></pre> <p><code>\\tracingmacros</code>: If this is <code>1</code>, the log file shows expansion of macros that are performed and the actual values of the arguments; if this is <code>2</code> or more token parameters such as <code>\\output</code> and <code>\\everypar</code> are also traced.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 293</li> </ul>"},{"location":"globals/tex/#textracingnesting","title":"tex.tracingnesting","text":"<pre><code>tex.tracingnesting : integer\n</code></pre> <p>When <code>\\tracingnesting</code> has a value of <code>1</code> or more, these anomalies are shown; when <code>\\tracingnesting</code> has a value of <code>2</code> or more, the current context (traceback) is shown as well.</p> <p>Reference:</p> <ul> <li>The \u03b5-TEX manual Version 2, February 1998 (updated March 2024), page 5</li> </ul>"},{"location":"globals/tex/#textracingonline","title":"tex.tracingonline","text":"<pre><code>tex.tracingonline : integer\n</code></pre> <p><code>\\tracingonline</code>: If this parameter is positive, TeX will write trace information to the terminal in addition to the log file.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 267</li> </ul>"},{"location":"globals/tex/#textracingoutput","title":"tex.tracingoutput","text":"<pre><code>tex.tracingoutput : integer\n</code></pre> <p><code>\\tracingoutput</code>: If this is positive, the log file shows a dump of boxes that are shipped to the dvi file.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 267</li> </ul>"},{"location":"globals/tex/#textracingpages","title":"tex.tracingpages","text":"<pre><code>tex.tracingpages : integer\n</code></pre> <p><code>\\tracingpages</code>: If this parameter is positive, TeX generates a trace of the page breaking algorithm.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 57</li> </ul>"},{"location":"globals/tex/#textracingparagraphs","title":"tex.tracingparagraphs","text":"<pre><code>tex.tracingparagraphs : integer\n</code></pre> <p><code>\\tracingparagraphs</code>: If this parameter is positive, TeX generates a trace of the line breaking algorithm.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 57</li> </ul>"},{"location":"globals/tex/#textracingrestores","title":"tex.tracingrestores","text":"<pre><code>tex.tracingrestores : integer\n</code></pre> <p><code>\\tracingrestores</code>: If this parameter is positive, TeX will report all values that are restored when a group ends.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 57</li> </ul>"},{"location":"globals/tex/#textracingscantokens","title":"tex.tracingscantokens","text":"<pre><code>tex.tracingscantokens : integer\n</code></pre> <p>When <code>\\tracingscantokens</code> has a value of <code>1</code> or more, the opening and closing of pseudo-files (generated by <code>\\scantokens</code>) is recorded as for any other file, with \u2018\u2423\u2019 as filename.</p> <p>Reference:</p> <ul> <li>The \u03b5-TEX manual Version 2, February 1998 (updated March 2024), page 5</li> </ul>"},{"location":"globals/tex/#textracingstats","title":"tex.tracingstats","text":"<pre><code>tex.tracingstats : integer\n</code></pre> <p><code>\\tracingstats</code>: If this parameter is <code>1</code>, TeX reports at the end of the job the usage of various internal arrays; if it is <code>2</code>, the memory demands are given whenever a page is shipped out.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 268</li> </ul>"},{"location":"globals/tex/#texuchyph","title":"tex.uchyph","text":"<pre><code>tex.uchyph : integer\n</code></pre> <p><code>\\uchyph</code>: Positive to allow hyphenation of words starting with a capital letter. Default: <code>1</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 57</li> </ul>"},{"location":"globals/tex/#texvbadness","title":"tex.vbadness","text":"<pre><code>tex.vbadness : integer\n</code></pre> <p><code>\\vbadness</code>: Amount of tolerance before TeX reports an underfull or overfull vertical box.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 57</li> </ul>"},{"location":"globals/tex/#texwidowpenalty","title":"tex.widowpenalty","text":"<pre><code>tex.widowpenalty : integer\n</code></pre> <p><code>\\widowpenalty</code>: Additional penalty for breaking a page before the last line of a paragraph. Default: <code>150</code></p> <p>Reference:</p> <ul> <li>TeX by Topic, page 226</li> </ul>"},{"location":"globals/tex/#texyear","title":"tex.year","text":"<pre><code>tex.year : integer\n</code></pre> <p><code>\\year</code>: The year of the current job.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 257</li> </ul>"},{"location":"globals/tex/#texdeadcycles","title":"tex.deadcycles","text":"<pre><code>tex.deadcycles : integer\n</code></pre> <p><code>\\deadcycles</code>: Counter that keeps track of how many times the output routine has been called without a <code>\\shipout</code> taking place.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 234</li> </ul>"},{"location":"globals/tex/#texinsertpenalties","title":"tex.insertpenalties","text":"<pre><code>tex.insertpenalties : integer\n</code></pre> <p><code>\\insertpenalties</code>: Total of penalties for split insertions. Inside the output routine, the number of held-over insertions.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 240</li> </ul>"},{"location":"globals/tex/#texparshape","title":"tex.parshape","text":"<pre><code>tex.parshape : integer\n</code></pre> <p><code>\\parshape</code>: Command for general paragraph shapes.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 170</li> </ul>"},{"location":"globals/tex/#texinterlinepenalties","title":"tex.interlinepenalties","text":"<pre><code>tex.interlinepenalties : integer\n</code></pre> <p>An extension to <code>\\interlinepenalty</code> that allows different penalties to be added after each line. It takes a space separated list of numbers as value. If <code>n</code> is positive interlinepenalties <code>n i_1 ... i_n</code> specifies the penalty to be used after each of the lines in a paragraph, with the last value being repeated as often as needed if the paragraph has more then <code>n</code> lines.</p> <p>Reference:</p> <ul> <li>Stackoverflow: What are penalties and which ones are defined?</li> <li>The \u03b5-TEX manual Version 2, February 1998 (updated March 2024), page 10</li> </ul>"},{"location":"globals/tex/#texclubpenalties","title":"tex.clubpenalties","text":"<pre><code>tex.clubpenalties : integer\n</code></pre> <p>An extension to <code>\\clubpenalty</code> that allows different penalties to be added after each line. It takes a space separated list of numbers as value. If <code>n</code> is positive clubpenalties <code>n i_1 ... i_n</code> specifies the penalty to be used after each of the lines in a paragraph, with the last value being repeated as often as needed if the paragraph has more then <code>n</code> lines.</p> <p>Reference:</p> <ul> <li>Stackoverflow: What are penalties and which ones are defined?</li> <li>The \u03b5-TEX manual Version 2, February 1998 (updated March 2024), page 10</li> </ul>"},{"location":"globals/tex/#texwidowpenalties","title":"tex.widowpenalties","text":"<pre><code>tex.widowpenalties : integer\n</code></pre> <p>An extension to <code>\\widowpenalty</code> that allows different penalties to be added after each line. It takes a space separated list of numbers as value. If <code>n</code> is positive widowpenalties <code>n i_1 ... i_n</code> specifies the penalty to be used after each of the lines in a paragraph, with the last value being repeated as often as needed if the paragraph has more then <code>n</code> lines. Lines are counted backwards from the last line in this case.</p> <p>Reference:</p> <ul> <li>Stackoverflow: What are penalties and which ones are defined?</li> <li>The \u03b5-TEX manual Version 2, February 1998 (updated March 2024), page 10</li> </ul>"},{"location":"globals/tex/#texdisplaywidowpenalties","title":"tex.displaywidowpenalties","text":"<pre><code>tex.displaywidowpenalties : integer\n</code></pre> <p>An extension to <code>\\widowpenalty</code> that allows different penalties to be added after each line. It takes a space separated list of numbers as value. If <code>n</code> is positive displaywidowpenalties <code>n i_1 ... i_n</code> specifies the penalty to be used after each of the lines in a paragraph, with the last value being repeated as often as needed if the paragraph has more then <code>n</code> lines. Lines counted backwards from each display math within a paragraph.</p> <p>Reference:</p> <ul> <li>Stackoverflow: What are penalties and which ones are defined?</li> <li>The \u03b5-TEX manual Version 2, February 1998 (updated March 2024), page 10</li> </ul>"},{"location":"globals/tex/#texprevgraf","title":"tex.prevgraf","text":"<pre><code>tex.prevgraf : integer\n</code></pre> <p><code>\\prevgraf</code>: The number of lines in the paragraph last added to the vertical list.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 175</li> </ul>"},{"location":"globals/tex/#texspacefactor","title":"tex.spacefactor","text":"<pre><code>tex.spacefactor : integer\n</code></pre> <p><code>\\spacefactor</code>: <code>1000</code> times the ratio by which the stretch (shrink) component of the interword glue should be multiplied (divided).</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 185</li> </ul>"},{"location":"globals/tex/#texboxmaxdepth","title":"tex.boxmaxdepth","text":"<pre><code>tex.boxmaxdepth : integer\n</code></pre> <p><code>\\boxmaxdepth</code>: Maximum allowed depth of boxes. Default: <code>\\maxdimen</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 57</li> </ul>"},{"location":"globals/tex/#texdelimitershortfall","title":"tex.delimitershortfall","text":"<pre><code>tex.delimitershortfall : integer\n</code></pre> <p><code>\\delimitershortfall</code>: Size of the part of a delimited formula that is allowed to go uncovered by a delimiter. Default: <code>5pt</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 190</li> </ul>"},{"location":"globals/tex/#texdisplayindent","title":"tex.displayindent","text":"<pre><code>tex.displayindent : integer\n</code></pre> <p><code>\\displayindent</code>: Distance by which the box, in which the display is centred, is indented owing to hanging indentation.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 210</li> </ul>"},{"location":"globals/tex/#texdisplaywidth","title":"tex.displaywidth","text":"<pre><code>tex.displaywidth : integer\n</code></pre> <p><code>\\displaywidth</code>: Width of the box in which the display is centred.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 210</li> </ul>"},{"location":"globals/tex/#texemergencystretch","title":"tex.emergencystretch","text":"<pre><code>tex.emergencystretch : integer\n</code></pre> <p><code>\\emergencystretch</code> (TeX3 only) Assumed extra stretchability in lines of a paragraph.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 175</li> </ul>"},{"location":"globals/tex/#texhangindent","title":"tex.hangindent","text":"<pre><code>tex.hangindent : integer\n</code></pre> <p><code>\\hangindent</code>: If positive, this indicates indentation from the left margin; if negative, this is the negative of the indentation from the right margin.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 170</li> </ul>"},{"location":"globals/tex/#texhfuzz","title":"tex.hfuzz","text":"<pre><code>tex.hfuzz : integer\n</code></pre> <p><code>\\hfuzz</code>: Excess size that TeX tolerates before it considers a horizontal box overfull.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 57</li> </ul>"},{"location":"globals/tex/#texhoffset","title":"tex.hoffset","text":"<pre><code>tex.hoffset : integer\n</code></pre> <p><code>\\hoffset</code>:  Distance by which the page is shifted right with respect to the reference point.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 224</li> </ul>"},{"location":"globals/tex/#texhsize","title":"tex.hsize","text":"<pre><code>tex.hsize : integer\n</code></pre> <p><code>\\hsize</code>: Line width used for typesetting a paragraph. Default: <code>6.5in</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 170</li> </ul>"},{"location":"globals/tex/#texlineskiplimit","title":"tex.lineskiplimit","text":"<pre><code>tex.lineskiplimit : integer\n</code></pre> <p><code>\\lineskiplimit</code>: Distance to be maintained between the bottom and top of neighbouring boxes on a vertical list. Default: <code>0pt</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 201</li> </ul>"},{"location":"globals/tex/#texmathsurround","title":"tex.mathsurround","text":"<pre><code>tex.mathsurround : integer\n</code></pre> <p><code>\\mathsurround</code>: Kern amount placed before and after in-line formulas.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 201</li> </ul>"},{"location":"globals/tex/#texmaxdepth","title":"tex.maxdepth","text":"<pre><code>tex.maxdepth : integer\n</code></pre> <p><code>\\maxdepth</code>: Maximum depth of the page box. Default: <code>4pt</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 224</li> </ul>"},{"location":"globals/tex/#texnulldelimiterspace","title":"tex.nulldelimiterspace","text":"<pre><code>tex.nulldelimiterspace : integer\n</code></pre> <p><code>\\nulldelimiterspace</code>: Width taken for empty delimiters. Default: <code>1.2pt</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 190</li> </ul>"},{"location":"globals/tex/#texoverfullrule","title":"tex.overfullrule","text":"<pre><code>tex.overfullrule : integer\n</code></pre> <p><code>\\overfullrule</code>: Width of the rule that is printed to indicate overfull horizontal boxes.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 57</li> </ul>"},{"location":"globals/tex/#texpagebottomoffset","title":"tex.pagebottomoffset","text":"<pre><code>tex.pagebottomoffset : integer\n</code></pre> <p><code>\\pagebottomoffset</code>: To set the bottom margin in non-TLT text.</p> <p>Reference:</p> <ul> <li>https://mirrors.aliyun.com/CTAN/systems/doc/aleph/News</li> </ul>"},{"location":"globals/tex/#texpageheight","title":"tex.pageheight","text":"<pre><code>tex.pageheight : integer\n</code></pre> <p><code>\\pageheight</code>: The page height of the PDF output (the screen, the paper, etc.).</p> <p>Reference:</p> <ul> <li>pdfTeX-Manual, page 25</li> </ul>"},{"location":"globals/tex/#texpageleftoffset","title":"tex.pageleftoffset","text":"<pre><code>tex.pageleftoffset : integer\n</code></pre> <p><code>\\pageleftoffset</code>: To set the left margin in non-TLT text.</p> <p>Reference:</p> <ul> <li>https://mirrors.aliyun.com/CTAN/systems/doc/aleph/News</li> </ul>"},{"location":"globals/tex/#texpagerightoffset","title":"tex.pagerightoffset","text":"<pre><code>tex.pagerightoffset : integer\n</code></pre> <p><code>\\pagerightoffset</code>: To set the right margin in non-TLT text.</p> <p>Reference:</p> <ul> <li>https://mirrors.aliyun.com/CTAN/systems/doc/aleph/News</li> </ul>"},{"location":"globals/tex/#texpagetopoffset","title":"tex.pagetopoffset","text":"<pre><code>tex.pagetopoffset : integer\n</code></pre> <p><code>\\pagetopoffset</code>: To set the top margin in non-TLT text.</p> <p>Reference:</p> <ul> <li>https://mirrors.aliyun.com/CTAN/systems/doc/aleph/News</li> </ul>"},{"location":"globals/tex/#texpagewidth","title":"tex.pagewidth","text":"<pre><code>tex.pagewidth : integer\n</code></pre> <p><code>\\pagewidth</code>: The page width of the PDF output (the screen, the paper, etc.).</p> <p>Reference:</p> <ul> <li>pdfTeX-Manual, page 25</li> </ul>"},{"location":"globals/tex/#texparindent","title":"tex.parindent","text":"<pre><code>tex.parindent : integer\n</code></pre> <p><code>\\parindent</code>: Width of the indentation box added in front of a paragraph. Default: <code>20pt</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 170</li> </ul>"},{"location":"globals/tex/#texpredisplaysize","title":"tex.predisplaysize","text":"<pre><code>tex.predisplaysize : integer\n</code></pre> <p><code>\\predisplaysize</code>: Effective width of the line preceding the display.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 210</li> </ul>"},{"location":"globals/tex/#texscriptspace","title":"tex.scriptspace","text":"<pre><code>tex.scriptspace : integer\n</code></pre> <p><code>\\scriptspace</code>: Extra space after subscripts and superscripts. Default: <code>0.5pt</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 200</li> </ul>"},{"location":"globals/tex/#texsplitmaxdepth","title":"tex.splitmaxdepth","text":"<pre><code>tex.splitmaxdepth : integer\n</code></pre> <p><code>\\splitmaxdepth</code>: Maximum depth of a box split off by a <code>\\vsplit</code> operation. Default: <code>\\maxdimen</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 224</li> </ul>"},{"location":"globals/tex/#texvfuzz","title":"tex.vfuzz","text":"<pre><code>tex.vfuzz : integer\n</code></pre> <p><code>\\vfuzz</code>: Excess size that TeX tolerates before it considers a vertical box overfull.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 57</li> </ul>"},{"location":"globals/tex/#texvoffset","title":"tex.voffset","text":"<pre><code>tex.voffset : integer\n</code></pre> <p><code>\\voffset</code>: Distance by which the page is shifted right/down with respect to the reference point.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 224</li> </ul>"},{"location":"globals/tex/#texvsize","title":"tex.vsize","text":"<pre><code>tex.vsize : integer\n</code></pre> <p><code>\\vsize</code>: Height of the page box. Default: <code>8.9in</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 224</li> </ul>"},{"location":"globals/tex/#texprevdepth","title":"tex.prevdepth","text":"<pre><code>tex.prevdepth : integer\n</code></pre> <p><code>\\prevdepth</code>: Depth of the last box added to a vertical list as it is perceived by TeX.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 157</li> </ul>"},{"location":"globals/tex/#texprevgraf_1","title":"tex.prevgraf","text":"<pre><code>tex.prevgraf : integer\n</code></pre> <p><code>\\prevgraf</code>: The number of lines in the paragraph last added to the vertical list.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 290</li> </ul>"},{"location":"globals/tex/#texspacefactor_1","title":"tex.spacefactor","text":"<pre><code>tex.spacefactor : integer\n</code></pre> <p><code>\\spacefactor</code>: <code>1000</code> times the ratio by which the stretch (shrink) component of the interword glue should be multiplied (divided).</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 185</li> <li>The TexBook: page 76. Also: 76, 271, 285, 363, 433.</li> </ul>"},{"location":"globals/tex/#texpagedepth","title":"tex.pagedepth","text":"<pre><code>tex.pagedepth : integer\n</code></pre> <p><code>\\pagedepth</code>: Depth of the current page.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 226</li> </ul> <p>A read only dimension parameter. The result is always a number in scaled points.</p>"},{"location":"globals/tex/#texpagefilllstretch","title":"tex.pagefilllstretch","text":"<pre><code>tex.pagefilllstretch : integer\n</code></pre> <p><code>\\pagefilllstretch</code>: Accumulated third-order stretch of the current page.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 226</li> </ul> <p>A read only dimension parameter. The result is always a number in scaled points.</p>"},{"location":"globals/tex/#texpagefillstretch","title":"tex.pagefillstretch","text":"<pre><code>tex.pagefillstretch : integer\n</code></pre> <p><code>\\pagefillstretch</code>: Accumulated second-order stretch of the current page.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 226</li> </ul> <p>A read only dimension parameter. The result is always a number in scaled points.</p>"},{"location":"globals/tex/#texpagefilstretch","title":"tex.pagefilstretch","text":"<pre><code>tex.pagefilstretch : integer\n</code></pre> <p><code>\\pagefilstretch</code>: Accumulated first-order stretch of the current page.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 226</li> </ul> <p>A read only dimension parameter. The result is always a number in scaled points.</p>"},{"location":"globals/tex/#texpagegoal","title":"tex.pagegoal","text":"<pre><code>tex.pagegoal : integer\n</code></pre> <p><code>\\pagegoal</code>: Goal height of the page box. This starts at <code>\\vsize</code>, and is diminished by heights of insertion items.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 226</li> </ul> <p>A read only dimension parameter. The result is always a number in scaled points.</p>"},{"location":"globals/tex/#texpageshrink","title":"tex.pageshrink","text":"<pre><code>tex.pageshrink : integer\n</code></pre> <p><code>\\pageshrink</code>: Accumulated shrink of the current page.</p> <p>Reference:</p>"},{"location":"globals/tex/#tex-by-topic-page-226","title":"* TeX by Topic, page 226","text":"<p>A read only dimension parameter. The result is always a number in scaled points.</p>"},{"location":"globals/tex/#texpagestretch","title":"tex.pagestretch","text":"<pre><code>tex.pagestretch : integer\n</code></pre> <p><code>\\pagestretch</code>: Accumulated zeroth-order stretch of the current page.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page </li> </ul> <p>A read only dimension parameter. The result is always a number in scaled points.</p>"},{"location":"globals/tex/#texpagetotal","title":"tex.pagetotal","text":"<pre><code>tex.pagetotal : integer\n</code></pre> <p><code>\\pagetotal</code>: Accumulated natural height of the current page.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page </li> </ul> <p>A read only dimension parameter. The result is always a number in scaled points.</p>"},{"location":"globals/tex/#texbodydir","title":"tex.bodydir","text":"<pre><code>tex.bodydir : DirectionSpecifier\n</code></pre> <p>The direction for vboxes, including the main body of text. Default: <code>TLT</code>.</p> <p>Reference:</p> <ul> <li>README of the Omega engine</li> </ul>"},{"location":"globals/tex/#texmathdir","title":"tex.mathdir","text":"<pre><code>tex.mathdir : DirectionSpecifier\n</code></pre> <p>The direction for mathematics. Default: <code>TLT</code>.</p> <p>Reference:</p> <ul> <li>README of the Omega engine</li> </ul>"},{"location":"globals/tex/#texpagedir","title":"tex.pagedir","text":"<pre><code>tex.pagedir : DirectionSpecifier\n</code></pre> <p>The direction for pages (<code>\\shipout</code>). Default: <code>TLT</code>.</p> <p>Reference:</p> <ul> <li>README of the Omega engine</li> </ul>"},{"location":"globals/tex/#texpardir","title":"tex.pardir","text":"<pre><code>tex.pardir : DirectionSpecifier\n</code></pre> <p>The direction for paragraphs. Default: <code>TLT</code>.</p> <p>Reference:</p> <ul> <li>README of the Omega engine</li> </ul>"},{"location":"globals/tex/#textextdir","title":"tex.textdir","text":"<pre><code>tex.textdir : DirectionSpecifier\n</code></pre> <p>The direction for text and hboxes. Default: <code>TLT</code>.</p> <p>Reference:</p> <ul> <li>README of the Omega engine</li> </ul>"},{"location":"globals/tex/#texabovedisplayshortskip","title":"tex.abovedisplayshortskip","text":"<pre><code>tex.abovedisplayshortskip : GlueSpecNode {\n    width: integer,\n    stretch: integer,\n    stretch_order: integer,\n    shrink: integer,\n    shrink_order: integer,\n}\n</code></pre> <p><code>\\abovedisplayshortskip</code>: Glue above a display if the line preceding the display was short. Default: <code>0pt plus 3pt</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 210</li> </ul>"},{"location":"globals/tex/#texabovedisplayskip","title":"tex.abovedisplayskip","text":"<pre><code>tex.abovedisplayskip : GlueSpecNode {\n    width: integer,\n    stretch: integer,\n    stretch_order: integer,\n    shrink: integer,\n    shrink_order: integer,\n}\n</code></pre> <p><code>\\abovedisplayskip</code>: Glue above a display. Default: <code>12pt plus 3pt minus 9pt</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 210</li> </ul>"},{"location":"globals/tex/#texbaselineskip","title":"tex.baselineskip","text":"<pre><code>tex.baselineskip : GlueSpecNode {\n    width: integer,\n    stretch: integer,\n    stretch_order: integer,\n    shrink: integer,\n    shrink_order: integer,\n}\n</code></pre> <p><code>\\baselineskip</code>: The \u2018ideal\u2019 baseline distance between neighbouring boxes on a vertical list. Default: <code>12pt</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 157</li> </ul>"},{"location":"globals/tex/#texbelowdisplayshortskip","title":"tex.belowdisplayshortskip","text":"<pre><code>tex.belowdisplayshortskip : GlueSpecNode {\n    width: integer,\n    stretch: integer,\n    stretch_order: integer,\n    shrink: integer,\n    shrink_order: integer,\n}\n</code></pre> <p><code>\\belowdisplayshortskip</code>: Glue above/below a display if the line preceding the display was short. Default: <code>0pt plus 3pt</code> and <code>7pt plus 3pt minus 4pt</code> respectively.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 210</li> </ul>"},{"location":"globals/tex/#texbelowdisplayskip","title":"tex.belowdisplayskip","text":"<pre><code>tex.belowdisplayskip : GlueSpecNode {\n    width: integer,\n    stretch: integer,\n    stretch_order: integer,\n    shrink: integer,\n    shrink_order: integer,\n}\n</code></pre> <p><code>\\belowdisplayskip</code>: Glue below a display. Default: <code>12pt plus 3pt minus 9pt</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page </li> </ul>"},{"location":"globals/tex/#texleftskip","title":"tex.leftskip","text":"<pre><code>tex.leftskip : GlueSpecNode {\n    width: integer,\n    stretch: integer,\n    stretch_order: integer,\n    shrink: integer,\n    shrink_order: integer,\n}\n</code></pre> <p><code>\\leftskip</code>: Glue that is placed to the left of all lines of a paragraph.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 170</li> </ul>"},{"location":"globals/tex/#texlineskip","title":"tex.lineskip","text":"<pre><code>tex.lineskip : GlueSpecNode {\n    width: integer,\n    stretch: integer,\n    stretch_order: integer,\n    shrink: integer,\n    shrink_order: integer,\n}\n</code></pre> <p><code>\\lineskip</code>: Glue added if the distance between bottom and top of neighbouring boxes is less than <code>\\lineskiplimit</code>. Default: <code>1pt</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 157</li> </ul>"},{"location":"globals/tex/#texparfillskip","title":"tex.parfillskip","text":"<pre><code>tex.parfillskip : GlueSpecNode {\n    width: integer,\n    stretch: integer,\n    stretch_order: integer,\n    shrink: integer,\n    shrink_order: integer,\n}\n</code></pre> <p><code>\\parfillskip</code>: Glue that is placed between the last element of the paragraph and the line end. Default: <code>0pt plus 1fil</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 166</li> </ul>"},{"location":"globals/tex/#texparskip","title":"tex.parskip","text":"<pre><code>tex.parskip : GlueSpecNode {\n    width: integer,\n    stretch: integer,\n    stretch_order: integer,\n    shrink: integer,\n    shrink_order: integer,\n}\n</code></pre> <p><code>\\parskip</code>: Amount of glue added to the surrounding vertical list when a paragraph starts. Default: <code>0pt plus 1pt</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 161</li> </ul>"},{"location":"globals/tex/#texrightskip","title":"tex.rightskip","text":"<pre><code>tex.rightskip : GlueSpecNode {\n    width: integer,\n    stretch: integer,\n    stretch_order: integer,\n    shrink: integer,\n    shrink_order: integer,\n}\n</code></pre> <p><code>\\rightskip</code>: Glue that is placed to the right of all lines of a paragraph.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 170</li> </ul>"},{"location":"globals/tex/#texspaceskip","title":"tex.spaceskip","text":"<pre><code>tex.spaceskip : GlueSpecNode {\n    width: integer,\n    stretch: integer,\n    stretch_order: integer,\n    shrink: integer,\n    shrink_order: integer,\n}\n</code></pre> <p><code>\\spaceskip</code>: Interword glue if non-zero.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 185</li> </ul>"},{"location":"globals/tex/#texsplittopskip","title":"tex.splittopskip","text":"<pre><code>tex.splittopskip : GlueSpecNode {\n    width: integer,\n    stretch: integer,\n    stretch_order: integer,\n    shrink: integer,\n    shrink_order: integer,\n}\n</code></pre> <p><code>\\splittopskip</code>: Minimum distance between the top of what remains after a <code>\\vsplit</code> operation, and the first item in that box. Default: <code>10pt</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 226</li> </ul>"},{"location":"globals/tex/#textabskip","title":"tex.tabskip","text":"<pre><code>tex.tabskip : GlueSpecNode {\n    width: integer,\n    stretch: integer,\n    stretch_order: integer,\n    shrink: integer,\n    shrink_order: integer,\n}\n</code></pre> <p><code>\\tabskip</code>: Amount of glue in between columns (rows) of an <code>\\halign</code> (<code>\\valign</code>).</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 215</li> </ul>"},{"location":"globals/tex/#textopskip","title":"tex.topskip","text":"<pre><code>tex.topskip : GlueSpecNode {\n    width: integer,\n    stretch: integer,\n    stretch_order: integer,\n    shrink: integer,\n    shrink_order: integer,\n}\n</code></pre> <p><code>\\topskip</code>: Minimum distance between the top of the page box and the baseline of the first box on the page. Default: <code>10pt</code>.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 224</li> </ul>"},{"location":"globals/tex/#texxspaceskip","title":"tex.xspaceskip","text":"<pre><code>tex.xspaceskip : GlueSpecNode {\n    width: integer,\n    stretch: integer,\n    stretch_order: integer,\n    shrink: integer,\n    shrink_order: integer,\n}\n</code></pre> <p><code>\\xspaceskip</code>: Interword glue if non-zero and <code>\\spacefactor</code> \u2265 2000.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 185</li> </ul>"},{"location":"globals/tex/#texmedmuskip","title":"tex.medmuskip","text":"<pre><code>tex.medmuskip : string\n</code></pre> <p><code>\\medmuskip</code>: Medium amount of mu (math units) glue.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 201</li> </ul>"},{"location":"globals/tex/#texthickmuskip","title":"tex.thickmuskip","text":"<pre><code>tex.thickmuskip : string\n</code></pre> <p><code>\\thickmuskip</code>: Large amount of mu (math units) glue.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 210</li> </ul>"},{"location":"globals/tex/#texthinmuskip","title":"tex.thinmuskip","text":"<pre><code>tex.thinmuskip : string\n</code></pre> <p><code>\\thinmuskip</code>: Small amount of mu (math units) glue.</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 201</li> </ul>"},{"location":"globals/tex/#texerrhelp","title":"tex.errhelp","text":"<pre><code>tex.errhelp : string\n</code></pre> <p><code>\\errhelp</code>: Tokens that will be displayed if the user asks further help after an <code>\\errmessage</code>.</p> <p>A <code>tokenlist</code> parameters that accepts and returns a Lua string.</p> <p>The Lua string is converted to and from a token list using <code>\\the</code> <code>\\toks</code> style expansion: all category codes are either space (10) or other (12).</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 272</li> </ul>"},{"location":"globals/tex/#texeverycr","title":"tex.everycr","text":"<pre><code>tex.everycr : string\n</code></pre> <p><code>\\everycr</code>: Token list inserted after every <code>\\cr</code> or non-redundant <code>\\crcr</code>.</p> <p>A <code>tokenlist</code> parameters that accepts and returns a Lua string.</p> <p>The Lua string is converted to and from a token list using <code>\\the</code> <code>\\toks</code> style expansion: all category codes are either space (10) or other (12).</p> <p>Reference:</p>"},{"location":"globals/tex/#tex-by-topic-page-215","title":"* TeX by Topic, page 215","text":""},{"location":"globals/tex/#texeverydisplay","title":"tex.everydisplay","text":"<pre><code>tex.everydisplay : string\n</code></pre> <p><code>\\everydisplay</code>: Token list inserted at the start of a display.</p> <p>A <code>tokenlist</code> parameters that accepts and returns a Lua string.</p> <p>The Lua string is converted to and from a token list using <code>\\the</code> <code>\\toks</code> style expansion: all category codes are either space (10) or other (12).</p> <p>Reference:</p>"},{"location":"globals/tex/#tex-by-topic-page-210","title":"* TeX by Topic, page 210","text":""},{"location":"globals/tex/#texeveryeof","title":"tex.everyeof","text":"<pre><code>tex.everyeof : string\n</code></pre> <p><code>\\everyeof</code>: The content of this token list is injected when a file ends.</p> <p>A <code>tokenlist</code> parameters that accepts and returns a Lua string.</p> <p>The Lua string is converted to and from a token list using <code>\\the</code> <code>\\toks</code> style expansion: all category codes are either space (10) or other (12).</p> <p>Reference:</p> <ul> <li>LuaMetaTeX-Manual, page 115</li> </ul>"},{"location":"globals/tex/#texeveryhbox","title":"tex.everyhbox","text":"<pre><code>tex.everyhbox : string\n</code></pre> <p><code>\\everyhbox</code>: Token list inserted at the start of a horizontal box.</p> <p>A <code>tokenlist</code> parameters that accepts and returns a Lua string.</p> <p>The Lua string is converted to and from a token list using <code>\\the</code> <code>\\toks</code> style expansion: all category codes are either space (10) or other (12).</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 284</li> </ul>"},{"location":"globals/tex/#texeveryjob","title":"tex.everyjob","text":"<pre><code>tex.everyjob : string\n</code></pre> <p><code>\\everyjob</code>: Token list that is inserted at the start of each new job.</p> <p>A <code>tokenlist</code> parameters that accepts and returns a Lua string.</p> <p>The Lua string is converted to and from a token list using <code>\\the</code> <code>\\toks</code> style expansion: all category codes are either space (10) or other (12).</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 254</li> </ul>"},{"location":"globals/tex/#texeverymath","title":"tex.everymath","text":"<pre><code>tex.everymath : string\n</code></pre> <p><code>\\everymath</code>: Token list inserted at the start of non-display math.</p> <p>A <code>tokenlist</code> parameters that accepts and returns a Lua string.</p> <p>The Lua string is converted to and from a token list using <code>\\the</code> <code>\\toks</code> style expansion: all category codes are either space (10) or other (12).</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 284</li> </ul>"},{"location":"globals/tex/#texeverypar","title":"tex.everypar","text":"<pre><code>tex.everypar : string\n</code></pre> <p><code>\\everypar</code>: Token list inserted in front of paragraph text.</p> <p>A <code>tokenlist</code> parameters that accepts and returns a Lua string.</p> <p>The Lua string is converted to and from a token list using <code>\\the</code> <code>\\toks</code> style expansion: all category codes are either space (10) or other (12).</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 284</li> </ul>"},{"location":"globals/tex/#texeveryvbox","title":"tex.everyvbox","text":"<pre><code>tex.everyvbox : string\n</code></pre> <p><code>\\everyvbox</code>: Token list inserted at the start of a vertical box.</p> <p>A <code>tokenlist</code> parameters that accepts and returns a Lua string.</p> <p>The Lua string is converted to and from a token list using <code>\\the</code> <code>\\toks</code> style expansion: all category codes are either space (10) or other (12).</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 284</li> </ul>"},{"location":"globals/tex/#texoutput","title":"tex.output","text":"<pre><code>tex.output : string\n</code></pre> <p><code>\\output</code>: Token list with instructions for shipping out pages.</p> <p>A <code>tokenlist</code> parameters that accepts and returns a Lua string.</p> <p>The Lua string is converted to and from a token list using <code>\\the</code> <code>\\toks</code> style expansion: all category codes are either space (10) or other (12).</p> <p>Reference:</p> <ul> <li>TeX by Topic, page 289</li> </ul>"},{"location":"globals/tex/#texetexversion","title":"tex.eTeXVersion","text":"<pre><code>tex.eTeXVersion : string\n</code></pre>"},{"location":"globals/tex/#texetexrevision","title":"tex.eTeXrevision","text":"<pre><code>tex.eTeXrevision : string\n</code></pre>"},{"location":"globals/tex/#texformatname","title":"tex.formatname","text":"<pre><code>tex.formatname : string\n</code></pre>"},{"location":"globals/tex/#texjobname","title":"tex.jobname","text":"<pre><code>tex.jobname : string\n</code></pre>"},{"location":"globals/tex/#texluatexbanner","title":"tex.luatexbanner","text":"<pre><code>tex.luatexbanner : string\n</code></pre>"},{"location":"globals/tex/#texluatexrevision","title":"tex.luatexrevision","text":"<pre><code>tex.luatexrevision : string\n</code></pre>"},{"location":"globals/tex/#texlastpenalty","title":"tex.lastpenalty","text":"<pre><code>tex.lastpenalty : integer\n</code></pre> <p>All \u201clast item\u201d commands are read-only and return a number.</p>"},{"location":"globals/tex/#texlastkern","title":"tex.lastkern","text":"<pre><code>tex.lastkern : integer\n</code></pre> <p>All \u201clast item\u201d commands are read-only and return a number.</p>"},{"location":"globals/tex/#texlastskip","title":"tex.lastskip","text":"<pre><code>tex.lastskip : integer\n</code></pre> <p>All \u201clast item\u201d commands are read-only and return a number.</p>"},{"location":"globals/tex/#texlastnodetype","title":"tex.lastnodetype","text":"<pre><code>tex.lastnodetype : integer\n</code></pre> <p>All \u201clast item\u201d commands are read-only and return a number.</p>"},{"location":"globals/tex/#texinputlineno","title":"tex.inputlineno","text":"<pre><code>tex.inputlineno : integer\n</code></pre> <p>All \u201clast item\u201d commands are read-only and return a number.</p>"},{"location":"globals/tex/#texlastxpos","title":"tex.lastxpos","text":"<pre><code>tex.lastxpos : integer\n</code></pre> <p>All \u201clast item\u201d commands are read-only and return a number.</p>"},{"location":"globals/tex/#texlastypos","title":"tex.lastypos","text":"<pre><code>tex.lastypos : integer\n</code></pre> <p>All \u201clast item\u201d commands are read-only and return a number.</p>"},{"location":"globals/tex/#texrandomseed","title":"tex.randomseed","text":"<pre><code>tex.randomseed : integer\n</code></pre> <p>All \u201clast item\u201d commands are read-only and return a number.</p>"},{"location":"globals/tex/#texluatexversion","title":"tex.luatexversion","text":"<pre><code>tex.luatexversion : integer\n</code></pre> <p>All \u201clast item\u201d commands are read-only and return a number.</p>"},{"location":"globals/tex/#texetexminorversion","title":"tex.eTeXminorversion","text":"<pre><code>tex.eTeXminorversion : integer\n</code></pre> <p>All \u201clast item\u201d commands are read-only and return a number.</p>"},{"location":"globals/tex/#texetexversion_1","title":"tex.eTeXversion","text":"<pre><code>tex.eTeXversion : integer\n</code></pre> <p>All \u201clast item\u201d commands are read-only and return a number.</p>"},{"location":"globals/tex/#texcurrentgrouplevel","title":"tex.currentgrouplevel","text":"<pre><code>tex.currentgrouplevel : integer\n</code></pre> <p>All \u201clast item\u201d commands are read-only and return a number.</p>"},{"location":"globals/tex/#texcurrentgrouptype","title":"tex.currentgrouptype","text":"<pre><code>tex.currentgrouptype : integer\n</code></pre> <p>All \u201clast item\u201d commands are read-only and return a number.</p>"},{"location":"globals/tex/#texcurrentiflevel","title":"tex.currentiflevel","text":"<pre><code>tex.currentiflevel : integer\n</code></pre> <p>All \u201clast item\u201d commands are read-only and return a number.</p>"},{"location":"globals/tex/#texcurrentiftype","title":"tex.currentiftype","text":"<pre><code>tex.currentiftype : integer\n</code></pre> <p>All \u201clast item\u201d commands are read-only and return a number.</p>"},{"location":"globals/tex/#texcurrentifbranch","title":"tex.currentifbranch","text":"<pre><code>tex.currentifbranch : integer\n</code></pre> <p>All \u201clast item\u201d commands are read-only and return a number.</p>"},{"location":"globals/tex/#texattribute","title":"tex.attribute","text":"<pre><code>tex.attribute: table\n</code></pre> <p>The attribute registers accept and return Lua numbers.</p> <p>see <code>LuaTeX</code> manual: 10.3.5 Accessing registers: <code>set*</code>, <code>get*</code> and <code>is*</code></p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L3698</li> </ul>"},{"location":"globals/tex/#texcount","title":"tex.count","text":"<pre><code>tex.count: table\n</code></pre> <p>The count registers accept and return Lua numbers.</p> <p>see <code>LuaTeX</code> manual: 10.3.5 Accessing registers: <code>set*</code>, <code>get*</code> and <code>is*</code></p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L3704</li> </ul>"},{"location":"globals/tex/#texdimen","title":"tex.dimen","text":"<pre><code>tex.dimen: table\n</code></pre> <p>The dimension registers accept Lua numbers (in scaled points) or strings (with an included absolute dimension; <code>em</code> and <code>ex</code> and <code>px</code> are forbidden). The result is always a number in scaled points.</p> <p>see <code>LuaTeX</code> manual: 10.3.5 Accessing registers: <code>set*</code>, <code>get*</code> and <code>is*</code></p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L3703</li> </ul>"},{"location":"globals/tex/#texglue","title":"tex.glue","text":"<pre><code>tex.glue: table\n</code></pre> <p>The glue registers are just skip registers but instead of userdata are verbose.</p> <p>see <code>LuaTeX</code> manual: 10.3.5 Accessing registers: <code>set*</code>, <code>get*</code> and <code>is*</code></p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L3700</li> </ul>"},{"location":"globals/tex/#texmuglue","title":"tex.muglue","text":"<pre><code>tex.muglue: table\n</code></pre> <p>see <code>LuaTeX</code> manual: 10.3.5 Accessing registers: <code>set*</code>, <code>get*</code> and <code>is*</code></p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L3702</li> </ul>"},{"location":"globals/tex/#texmuskip","title":"tex.muskip","text":"<pre><code>tex.muskip: table\n</code></pre> <p>see <code>LuaTeX</code> manual: 10.3.5 Accessing registers: <code>set*</code>, <code>get*</code> and <code>is*</code></p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L3701</li> </ul>"},{"location":"globals/tex/#texskip","title":"tex.skip","text":"<pre><code>tex.skip: table\n</code></pre> <p>The skip registers accept and return <code>glue_spec</code> userdata node objects.</p> <p>see <code>LuaTeX</code> manual: 10.3.5 Accessing registers: <code>set*</code>, <code>get*</code> and <code>is*</code></p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L3699</li> </ul>"},{"location":"globals/tex/#textoks","title":"tex.toks","text":"<pre><code>tex.toks: table\n</code></pre> <p>The token registers accept and return Lua strings. Lua strings are converted to and from token lists using <code>\\the</code> <code>\\toks</code> style expansion: all category codes are either space (10) or other (12).</p> <p>see <code>LuaTeX</code> manual: 10.3.5 Accessing registers: <code>set*</code>, <code>get*</code> and <code>is*</code></p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L3705</li> </ul>"},{"location":"globals/tex/#texlccode","title":"tex.lccode","text":"<pre><code>tex.lccode : table&lt;integer,integer&gt;\n</code></pre> <p>The TeX's character code table <code>lccode</code> (lower case code) can be accessed and written to using a virtual subtable of the <code>tex</code> table.</p> <pre><code>for i = 0, 1024 do\n -- Exclude C0 and C1 control codes\n  if i &gt; 31 and not (i &gt;= 127 and i &lt;= 159) then\n    print(i, utf8.char(i), tex.lccode[i], utf8.char(tex.lccode[i]))\n  end\nend\n</code></pre> <p>Output:</p> <pre><code>...\n65  A   97  a\n66  B   98  b\n67  C   99  c\n...\n90  Z   122 z\n...\n97  a   97  a\n98  b   98  b\n99  c   99  c\n...\n122 z   122 z\n...\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L3708</li> <li>Corresponding plain TeX control sequence: \\lccode</li> </ul>"},{"location":"globals/tex/#texuccode","title":"tex.uccode","text":"<pre><code>tex.uccode : table&lt;integer,integer&gt;\n</code></pre> <p>TeX's character code table <code>uccode</code> (upper case code) can be accessed and written to using a virtual subtable of the <code>tex</code> table.</p> <pre><code>for i = 0, 1024 do\n -- Exclude C0 and C1 control codes\n  if i &gt; 31 and not (i &gt;= 127 and i &lt;= 159) then\n    print(i, utf8.char(i), tex.uccode[i], utf8.char(tex.uccode[i]))\n  end\nend\n</code></pre> <p>Output:</p> <pre><code>...\n65  A   65  A\n66  B   66  B\n67  C   67  C\n...\n90  Z   90  Z\n...\n97  a   65  A\n98  b   66  B\n99  c   67  C\n...\n122 z   90  Z\n...\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L3709</li> <li>Corresponding plain TeX control sequence: \\uccode</li> </ul>"},{"location":"globals/tex/#texsfcode","title":"tex.sfcode","text":"<pre><code>tex.sfcode : table&lt;integer,integer&gt;\n</code></pre> <p>Each character in a font has a space factor code that is an integer between <code>0</code> and <code>32767</code>. The code is used to adjust the space factor in a horizontal list. The uppercase letters <code>A-Z</code> have space factor code <code>999</code>. Most other characters have code <code>1000</code> [Donald E. Knuth, The TeXbook, page 76]. However, Plain TeX makes <code>)',</code>'', and <code>]' have space factor code</code>0<code>. Also, the</code>\\frenchspacing<code>and</code>\\nonfrenchspacing<code>modes in Plain TeX work by changing the</code>\\sfcode<code>for:</code>.<code>,</code>?<code>,</code>!<code>,</code>:<code>,</code>;<code>, and</code>,` [Donald E. Knuth, The TeXbook, 351].</p> <p>TeX's character code table <code>sfcode</code> (space factor code) can be accessed and written to using a virtual subtable of the <code>tex</code> table.</p> <pre><code>for i = 0, 1024 do\n  -- Exclude C0 and C1 control codes\n  if i &gt; 31 and not (i &gt;= 127 and i &lt;= 159) then\n    print(i, utf8.char(i), tex.sfcode[i])\n  end\nend\n</code></pre> <p>Output:</p> <pre><code>32      1000\n33  !   3000\n34  \"   1000\n35  #   1000\n36  $   1000\n37  %   1000\n38  &amp;   1000\n39  '   0\n40  (   1000\n41  )   0\n42  *   1000\n43  +   1000\n44  ,   1250\n45  -   1000\n46  .   3000\n47  /   1000\n48  0   1000\n49  1   1000\n50  2   1000\n51  3   1000\n52  4   1000\n53  5   1000\n54  6   1000\n55  7   1000\n56  8   1000\n57  9   1000\n58  :   2000\n59  ;   1500\n60  &lt;   1000\n61  =   1000\n62  &gt;   1000\n63  ?   3000\n64  @   1000\n65  A   999\n...\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L3707</li> <li>Corresponding plain TeX control sequence: \\sfcode</li> </ul>"},{"location":"globals/tex/#texcatcode","title":"tex.catcode","text":"<pre><code>tex.catcode : table&lt;integer,integer&gt;\n</code></pre> <p>A virtual subtable of the <code>tex</code> table called <code>catcode</code> (category code) can be used to access and write to TeX's character code table.</p> <p>The category codes are indexed by the character code.</p> <pre><code>for i=33,126 do\n  print(i, utf8.char(i), tex.catcode[i])\nend\n</code></pre>"},{"location":"globals/tex/#output","title":"Output:","text":"<pre><code>33  !   12\n34  \"   12\n35  #   6\n36  $   3\n37  %   14\n38  &amp;   4\n39  '   12\n40  (   12\n41  )   12\n42  *   12\n43  +   12\n44  ,   12\n45  -   12\n46  .   12\n47  /   12\n48  0   12\n49  1   12\n50  2   12\n51  3   12\n52  4   12\n53  5   12\n54  6   12\n55  7   12\n56  8   12\n57  9   12\n58  :   12\n59  ;   12\n60  &lt;   12\n61  =   12\n62  &gt;   12\n63  ?   12\n64  @   12\n65  A   11\n66  B   11\n67  C   11\n68  D   11\n69  E   11\n70  F   11\n71  G   11\n72  H   11\n73  I   11\n74  J   11\n75  K   11\n76  L   11\n77  M   11\n78  N   11\n79  O   11\n80  P   11\n81  Q   11\n82  R   11\n83  S   11\n84  T   11\n85  U   11\n86  V   11\n87  W   11\n88  X   11\n89  Y   11\n90  Z   11\n91  [   12\n92  \\   0\n93  ]   12\n94  ^   7\n95  _   8\n96  `   12\n97  a   11\n98  b   11\n99  c   11\n100 d   11\n101 e   11\n102 f   11\n103 g   11\n104 h   11\n105 i   11\n106 j   11\n107 k   11\n108 l   11\n109 m   11\n110 n   11\n111 o   11\n112 p   11\n113 q   11\n114 r   11\n115 s   11\n116 t   11\n117 u   11\n118 v   11\n119 w   11\n120 x   11\n121 y   11\n122 z   11\n123 {   1\n124 |   12\n125 }   2\n126 ~   13\n</code></pre>"},{"location":"globals/tex/#category-codes_4","title":"Category codes:","text":"<ul> <li><code>0</code>: Escape character, normally <code>\\</code></li> <li><code>1</code>: Begin grouping, normally <code>{</code></li> <li><code>2</code>: End grouping, normally <code>}</code></li> <li><code>3</code>: Math shift, normally <code>$</code></li> <li><code>4</code>: Alignment tab, normally <code>&amp;</code></li> <li><code>5</code>: End of line, normally <code>&lt;return&gt;</code></li> <li><code>6</code>: Parameter, normally <code>#</code></li> <li><code>7</code>: Superscript, normally <code>^</code></li> <li><code>8</code>: Subscript, normally <code>_</code></li> <li><code>9</code>: Ignored character, normally <code>&lt;null&gt;</code></li> <li><code>10</code>: Space, normally <code>&lt;space&gt;</code> and <code>&lt;tab&gt;</code></li> <li><code>11</code>: Letter, normally only contains the letters <code>a,...,z</code> and <code>A,...,Z</code>. These characters can be used in command names</li> <li><code>12</code>: Other, normally everything else not listed in the other categories</li> <li><code>13</code>: Active character, for example <code>~</code></li> <li><code>14</code>: Comment character, normally <code>%</code></li> <li> <p><code>15</code>: Invalid character, normally <code>&lt;delete&gt;</code></p> </li> <li> <p>Corresponding C source code: ltexlib.c#L3710</p> </li> </ul>"},{"location":"globals/tex/#texmathcode","title":"tex.mathcode","text":"<pre><code>tex.mathcode : table&lt;integer,MathCode&gt;\n</code></pre> <p>The TeX's character code table <code>mathcode</code> can be accessed and written to using a virtual subtable of the <code>tex</code> table.</p> <pre><code>for i = 1, 128 do\n  local mathcode = tex.mathcode[i]\n  print(i, utf8.char(i), mathcode[1], mathcode[2], mathcode[3])\nend\n</code></pre> <p>Output:</p> <pre><code>1       3   2   35\n2       0   1   11\n3       0   1   12\n4       2   2   94\n5       0   2   58\n6       3   2   50\n7       0   1   25\n8       0   1   21\n9       0   1   13\n10      0   1   14\n11      3   2   34\n12      2   2   6\n1       2   2   8\n14      0   2   49\n15      0   1   64\n16      3   2   26\n17      3   2   27\n18      2   2   92\n19      2   2   91\n20      0   2   56\n21      0   2   57\n22      2   2   10\n23      3   2   36\n24      3   2   32\n25      3   2   33\n26  \ufffd   8   0   0\n27          2   5\n28      3   2   20\n29      3   2   21\n30      3   2   17\n31      2   2   95\n32      8   0   0\n33  !   5   0   33\n34  \"   0   0   34\n35  #   0   0   35\n36  $   0   0   36\n37  %   0   0   37\n38  &amp;   0   0   38\n39  '   8   0   0\n40  (   4   0   40\n41  )   5   0   41\n42  *   2   2   3\n43  +   2   0   43\n44  ,   6   1   59\n45  -   2   2   0\n46  .   0   1   58\n47  /   0   1   61\n48  0   7   0   48\n49  1   7   0   49\n50  2   7   0   50\n51  3   7   0   51\n52  4   7   0   52\n53  5   7   0   53\n54  6   7   0   54\n55  7   7   0   55\n56  8   7   0   56\n57  9   7   0   57\n58  :   3   0   58\n59  ;   6   0   59\n60  &lt;   3   1   60\n61  =   3   0   61\n62  &gt;   3   1   62\n63  ?   5   0   63\n64  @   0   0   64\n65  A   7   1   65\n66  B   7   1   66\n67  C   7   1   67\n68  D   7   1   68\n69  E   7   1   69\n70  F   7   1   70\n71  G   7   1   71\n72  H   7   1   72\n73  I   7   1   73\n74  J   7   1   74\n75  K   7   1   75\n76  L   7   1   76\n77  M   7   1   77\n78  N   7   1   78\n79  O   7   1   79\n80  P   7   1   80\n81  Q   7   1   81\n82  R   7   1   82\n83  S   7   1   83\n84  T   7   1   84\n85  U   7   1   85\n86  V   7   1   86\n87  W   7   1   87\n88  X   7   1   88\n89  Y   7   1   89\n90  Z   7   1   90\n91  [   4   0   91\n92  \\   0   2   110\n93  ]   5   0   93\n94  ^   0   0   94\n95  _   8   0   0\n96  `   0   0   96\n97  a   7   1   97\n98  b   7   1   98\n99  c   7   1   99\n100 d   7   1   100\n101 e   7   1   101\n102 f   7   1   102\n103 g   7   1   103\n104 h   7   1   104\n105 i   7   1   105\n106 j   7   1   106\n107 k   7   1   107\n108 l   7   1   108\n109 m   7   1   109\n110 n   7   1   110\n111 o   7   1   111\n112 p   7   1   112\n113 q   7   1   113\n114 r   7   1   114\n115 s   7   1   115\n116 t   7   1   116\n117 u   7   1   117\n118 v   7   1   118\n119 w   7   1   119\n120 x   7   1   120\n121 y   7   1   121\n122 z   7   1   122\n123 {   4   2   102\n124 |   0   2   106\n125 }   5   2   103\n126 ~   0   0   126\n127     1   2   115\n128     0   0   128\n</code></pre> <p>In math mode, the math atoms require more structure. Each symbol originates from a different font and receives different spacing based on its class (operator, binary infix, relation, etc.). Following the typical style of the 1970s, these properties are compactly packed into bit fields within a single integer called a mathcode. The mathcode is usually expressed in hexadecimal so that the fields can easily be pulled apart. The mathcode of <code>+</code> in plain TeX is set as:</p> <pre><code>\\mathcode`\\+=\"202B\n</code></pre> <p>This means it is class 2 (binary infix) and fam0 (the Roman font). The character hex is <code>2B</code>, which is the decimal <code>43</code>, the character code for <code>+</code> in the Roman font encoding.</p> <p>The <code>mathcode</code> section in the plain.tex format file:</p> <pre><code>\\mathcode`\\^^?=\"1273 % \\smallint\n% INITEX sets up \\mathcode x=x, for x=0..255, except that\n% \\mathcode x=x+\"7100, for x = `A to `Z and `a to `z;\n% \\mathcode x=x+\"7000, for x = `0 to `9.\n% The following changes define internal codes as recommended\n% in Appendix C of The TeXbook:\n\\mathcode`\\^^@=\"2201 % \\cdot\n\\mathcode`\\^^A=\"3223 % \\downarrow\n\\mathcode`\\^^B=\"010B % \\alpha\n\\mathcode`\\^^C=\"010C % \\beta\n\\mathcode`\\^^D=\"225E % \\land\n\\mathcode`\\^^E=\"023A % \\lnot\n\\mathcode`\\^^F=\"3232 % \\in\n\\mathcode`\\^^G=\"0119 % \\pi\n\\mathcode`\\^^H=\"0115 % \\lambda\n\\mathcode`\\^^I=\"010D % \\gamma\n\\mathcode`\\^^J=\"010E % \\delta\n\\mathcode`\\^^K=\"3222 % \\uparrow\n\\mathcode`\\^^L=\"2206 % \\pm\n\\mathcode`\\^^M=\"2208 % \\oplus\n\\mathcode`\\^^N=\"0231 % \\infty\n\\mathcode`\\^^O=\"0140 % \\partial\n\\mathcode`\\^^P=\"321A % \\subset\n\\mathcode`\\^^Q=\"321B % \\supset\n\\mathcode`\\^^R=\"225C % \\cap\n\\mathcode`\\^^S=\"225B % \\cup\n\\mathcode`\\^^T=\"0238 % \\forall\n\\mathcode`\\^^U=\"0239 % \\exists\n\\mathcode`\\^^V=\"220A % \\otimes\n\\mathcode`\\^^W=\"3224 % \\leftrightarrow\n\\mathcode`\\^^X=\"3220 % \\leftarrow\n\\mathcode`\\^^Y=\"3221 % \\rightarrow\n\\mathcode`\\^^Z=\"8000 % \\ne\n\\mathcode`\\^^[=\"2205 % \\diamond\n\\mathcode`\\^^\\=\"3214 % \\le\n\\mathcode`\\^^]=\"3215 % \\ge\n\\mathcode`\\^^^=\"3211 % \\equiv\n\\mathcode`\\^^_=\"225F % \\lor\n\\mathcode`\\ =\"8000 % \\space\n\\mathcode`\\!=\"5021\n\\mathcode`\\'=\"8000 % ^\\prime\n\\mathcode`\\(=\"4028\n\\mathcode`\\)=\"5029\n\\mathcode`\\*=\"2203 % \\ast\n\\mathcode`\\+=\"202B\n\\mathcode`\\,=\"613B\n\\mathcode`\\-=\"2200\n\\mathcode`\\.=\"013A\n\\mathcode`\\/=\"013D\n\\mathcode`\\:=\"303A\n\\mathcode`\\;=\"603B\n\\mathcode`\\&lt;=\"313C\n\\mathcode`\\==\"303D\n\\mathcode`\\&gt;=\"313E\n\\mathcode`\\?=\"503F\n\\mathcode`\\[=\"405B\n\\mathcode`\\\\=\"026E % \\backslash\n\\mathcode`\\]=\"505D\n\\mathcode`\\_=\"8000 % \\_\n\\mathcode`\\{=\"4266\n\\mathcode`\\|=\"026A\n\\mathcode`\\}=\"5267\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L3711</li> <li>Corresponding plain TeX control sequence: \\mathcode</li> <li>tex.stackexchange.com</li> </ul>"},{"location":"globals/tex/#texdelcode","title":"tex.delcode","text":"<pre><code>tex.delcode : table&lt;integer,DelCode&gt;\n</code></pre> <pre><code>for i=1,128 do\n  local delcode = tex.delcode[i]\n  print(i, utf8.char(i), delcode[1], delcode[2], delcode[3], delcode[4])\nend\n</code></pre> <p>Output:</p> <pre><code>1       -1  0   0   0\n...\n40  (   0   40  3   0\n41  )   0   41  3   1\n...\n47  /   0   47  3   14\n...\n60  &lt;   2   104 3   10\n61  =   -1  0   0   0\n62  &gt;   2   105 3   11\n...\n91  [   0   91  3   2\n92  \\   2   110 3   15\n93  ]   0   93  3   3\n...\n124 |   2   106 3   12\n...\n</code></pre> <p>The <code>delcode</code> section in the plain.tex format file:</p> <pre><code>% Finally, INITEX sets all \\delcode values to -1, except \\delcode`.=0\n\\delcode`\\(=\"028300\n\\delcode`\\)=\"029301\n\\delcode`\\[=\"05B302\n\\delcode`\\]=\"05D303\n\\delcode`\\&lt;=\"26830A\n\\delcode`\\&gt;=\"26930B\n\\delcode`\\/=\"02F30E\n\\delcode`\\|=\"26A30C\n\\delcode`\\\\=\"26E30F\n% N.B. { and } should NOT get delcodes; otherwise parameter grouping fails!\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L3712</li> <li>Corresponding plain TeX control sequence: \\delcode</li> </ul>"},{"location":"globals/tex/#texbox","title":"tex.box","text":"<pre><code>tex.box : table&lt;integer,Node&gt;\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L3706</li> <li>Corresponding plain TeX control sequence: \\box</li> </ul>"},{"location":"globals/tex/#texlists","title":"tex.lists","text":"<pre><code>tex.lists: table\n</code></pre> <p>The virtual table <code>tex.lists</code> contains the set of internal registers that keep track of building page lists.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L3713</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/tex/#texnest","title":"tex.nest","text":"<pre><code>tex.nest : table&lt;integer,Nest&gt;\n</code></pre> <p>The virtual table <code>nest</code> contains the currently active semantic nesting state. It has two main parts: a zero-based array of userdata for the semantic nest itself, and the numerical value <code>ptr</code>, which gives the highest available index. Neither the array items in <code>nest[]</code> nor <code>ptr</code> can be assigned to (as this would confuse the typesetting engine beyond repair), but you can assign to the individual values inside the array items, e.g. <code>tex.nest[tex.nest.ptr].prevdepth</code>.</p> <p><code>tex.nest[tex.nest.ptr]</code> is the current nest state, <code>nest[0]</code> the outermost (main vertical list) level.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexlib.c#L3714</li> </ul>"},{"location":"globals/texconfig/","title":"global texconfig","text":"<p>This is a table that is created empty. A startup Lua script could fill this table with a number of settings that are read out by the executable after loading and executing the startup file.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/texconfig/#fields","title":"fields","text":""},{"location":"globals/texconfig/#texconfigkpse_init","title":"texconfig.kpse_init","text":"<pre><code>texconfig.kpse_init : boolean\n</code></pre> <p><code>false</code> totally disables \\KPATHSEA\\ initialisation, and enables interpretation of the following numeric key--value pairs. (only ever unset this if you implement {\\it all\\/} file find callbacks!)</p> <p><code>shell_escape</code>  string  <code>'f'</code>  Use <code>'y'</code> or <code>'t'</code> or <code>'1'</code> to enable <code>\\write18</code> unconditionally, <code>'p'</code> to enable the commands that are listed in <code>shell_escape_commands</code></p> <p>shell_escape_commands  string   Comma-separated list of command names that may be executed by <code>\\write18</code> even if <code>shell_escape</code> is set to <code>'p'</code>. Do {\\it not\\/} use spaces around commas, separate any required command arguments by using a space, and use the \\ASCII\\ double quote (<code>\"</code>) for any needed argument or path quoting</p>"},{"location":"globals/texconfig/#texconfigstring_vacancies","title":"texconfig.string_vacancies","text":"<pre><code>texconfig.string_vacancies : integer\n</code></pre> <p>Minimum pool space after TeX's own strings; must be at least 25000 less than pool_size, but doesn't need to be nearly that large.</p> <p>Reference:</p> <ul> <li>texmf.cnf#L810-L811</li> </ul>"},{"location":"globals/texconfig/#texconfigpool_free","title":"texconfig.pool_free","text":"<pre><code>texconfig.pool_free : integer\n</code></pre> <p>Min pool space left after loading .fmt.</p> <p>Reference:</p> <ul> <li>texmf.cnf#L815</li> </ul>"},{"location":"globals/texconfig/#texconfigmax_strings","title":"texconfig.max_strings","text":"<pre><code>texconfig.max_strings : integer\n</code></pre> <p>Maximum number of strings.</p> <p>Reference:</p> <ul> <li>texmf.cnf#L813</li> </ul>"},{"location":"globals/texconfig/#texconfigstrings_free","title":"texconfig.strings_free","text":"<pre><code>texconfig.strings_free : integer\n</code></pre> <p>Ensure at least this many strings are free after loading .fmt.</p> <p>Reference:</p> <ul> <li>texmf.cnf#L817</li> </ul>"},{"location":"globals/texconfig/#texconfignest_size","title":"texconfig.nest_size","text":"<pre><code>texconfig.nest_size : integer\n</code></pre> <p>simultaneous semantic levels (e.g., groups)</p> <p>Reference:</p> <ul> <li>kpathsea/texmf.cnf</li> </ul>"},{"location":"globals/texconfig/#texconfigmax_in_open","title":"texconfig.max_in_open","text":"<pre><code>texconfig.max_in_open : integer\n</code></pre> <p>simultaneous input files and error insertions, also applies to MetaPost</p> <p>Reference:</p> <ul> <li>kpathsea/texmf.cnf</li> </ul>"},{"location":"globals/texconfig/#texconfigparam_size","title":"texconfig.param_size","text":"<pre><code>texconfig.param_size : integer\n</code></pre> <p>simultaneous macro parameters, also applies to MP</p> <p>Reference:</p> <ul> <li>kpathsea/texmf.cnf</li> </ul>"},{"location":"globals/texconfig/#texconfigsave_size","title":"texconfig.save_size","text":"<pre><code>texconfig.save_size : integer\n</code></pre> <p>for saving values outside current group</p> <p>Reference:</p> <ul> <li>kpathsea/texmf.cnf</li> </ul>"},{"location":"globals/texconfig/#texconfigstack_size","title":"texconfig.stack_size","text":"<pre><code>texconfig.stack_size : integer\n</code></pre> <p>simultaneous input sources</p> <p>Reference:</p> <ul> <li>kpathsea/texmf.cnf</li> </ul>"},{"location":"globals/texconfig/#texconfigdvi_buf_size","title":"texconfig.dvi_buf_size","text":"<pre><code>texconfig.dvi_buf_size : integer\n</code></pre> <p>These work best if they are the same as the I/O buffer size, but it doesn't matter much.  Must be a multiple of 8.</p> <p>Reference:</p> <ul> <li>kpathsea/texmf.cnf</li> </ul>"},{"location":"globals/texconfig/#texconfigerror_line","title":"texconfig.error_line","text":"<pre><code>texconfig.error_line : integer\n</code></pre> <p>It's probably inadvisable to change these. At any rate, we must have: 45 &lt; error_line      &lt; 255; 30 &lt; half_error_line &lt; error_line - 15; 60 &lt;= max_print_line; These apply to TeX, Metafont, and MetaPost. \"max_print_line\" applies to BibTeX family</p> <p>Reference:</p> <ul> <li>kpathsea/texmf.cnf</li> </ul>"},{"location":"globals/texconfig/#texconfighalf_error_line","title":"texconfig.half_error_line","text":"<pre><code>texconfig.half_error_line : integer\n</code></pre> <p>It's probably inadvisable to change these. At any rate, we must have: 45 &lt; error_line      &lt; 255; 30 &lt; half_error_line &lt; error_line - 15; 60 &lt;= max_print_line; These apply to TeX, Metafont, and MetaPost. \"max_print_line\" applies to BibTeX family</p> <p>Reference:</p> <ul> <li>kpathsea/texmf.cnf</li> </ul>"},{"location":"globals/texconfig/#texconfigmax_print_line","title":"texconfig.max_print_line","text":"<pre><code>texconfig.max_print_line : integer\n</code></pre> <p>It's probably inadvisable to change these. At any rate, we must have: 45 &lt; error_line      &lt; 255; 30 &lt; half_error_line &lt; error_line - 15; 60 &lt;= max_print_line; These apply to TeX, Metafont, and MetaPost. \"max_print_line\" applies to BibTeX family</p> <p>Reference:</p> <ul> <li>kpathsea/texmf.cnf</li> </ul>"},{"location":"globals/texconfig/#texconfighash_extra","title":"texconfig.hash_extra","text":"<pre><code>texconfig.hash_extra : integer\n</code></pre> <p>Extra space for the hash table of control sequences.</p>"},{"location":"globals/texconfig/#texconfigpk_dpi","title":"texconfig.pk_dpi","text":"<pre><code>texconfig.pk_dpi : integer\n</code></pre> <p>For pdftex and luatex: default resolution for bitmaps; commonly set via \\pdfpkresolution when needed to be changed.</p>"},{"location":"globals/texconfig/#texconfigtrace_file_names","title":"texconfig.trace_file_names","text":"<pre><code>texconfig.trace_file_names : boolean\n</code></pre> <p><code>false</code> disables TeX's normal file open-close feedback (the assumption is that callbacks will take care of that)</p>"},{"location":"globals/texconfig/#texconfigfile_line_error","title":"texconfig.file_line_error","text":"<pre><code>texconfig.file_line_error : boolean\n</code></pre> <p>do <code>file:line</code> style error messages</p>"},{"location":"globals/texconfig/#texconfighalt_on_error","title":"texconfig.halt_on_error","text":"<pre><code>texconfig.halt_on_error : boolean\n</code></pre> <p>abort run on the first encountered error</p>"},{"location":"globals/texconfig/#texconfigformatname","title":"texconfig.formatname","text":"<pre><code>texconfig.formatname : string\n</code></pre> <p>if no format name was given on the command line, this key will be tested first instead of simply quitting</p>"},{"location":"globals/texconfig/#texconfigjobname","title":"texconfig.jobname","text":"<pre><code>texconfig.jobname : string\n</code></pre> <p>if no input file name was given on the command line, this key will be tested first instead of simply giving up</p>"},{"location":"globals/texconfig/#texconfiglevel_chr","title":"texconfig.level_chr","text":"<pre><code>texconfig.level_chr : integer\n</code></pre> <p>character to put in front of traced macros (see next value)</p>"},{"location":"globals/texconfig/#texconfiglevel_max","title":"texconfig.level_max","text":"<pre><code>texconfig.level_max : integer\n</code></pre> <p>when larger than zero the input nesting level will be shown when <code>\\tracingmacros</code> is set; levels above this value will be clipped with the level shown up front</p> <p>Note: the numeric values that match web2c parameters are only used if <code>kpse_init</code> is explicitly set to <code>false</code>. In all other cases, the normal values from <code>texmf.cnf</code> are used.</p> <p>You can kick in your own nesting level visualizer, for instance:</p> <pre><code>callback.register(\"input_level_string\",function(n)\n         if tex.tracingmacros &gt; 0 and tex.count.tracingstacklevels &gt; 0 then\n    if tex.tracingmacros &gt; 1 then\n        return \"! \" .. string.rep(\"&gt;\",n) .. \" \"\n    end\nend)\n</code></pre> <p>Or, in sync with other engines (not checked):</p> <p>\\newcount\\tracingstacklevels</p> <pre><code>\\directlua {\n  callback.register(\"input_level_string\", function(n)\n    if tex.tracingmacros &gt; 0 then\n      local l = tex.count.tracingstacklevels\n      if l &gt; 0 then\n        return string.rep(\" \",l) .. string.rep(\".\",n-l)\n      end\n    end\n  end)\n}\n</code></pre>"},{"location":"globals/texio/","title":"global texio","text":"<p>The <code>texio</code> library takes care of the low-level I/O interface: writing to the log file and/or console.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/texio/#methods","title":"methods","text":""},{"location":"globals/texio/#texiowrite","title":"texio.write","text":"<pre><code>function texio.write(\n  target: WriteTarget,\n  ...: string\n)\n</code></pre> <p>Write all given strings to a target.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexiolib.c#L119-L126</li> </ul>"},{"location":"globals/texio/#texiowrite_1","title":"texio.write","text":"<pre><code>function texio.write(...: string)\n</code></pre> <p>Write all given strings to the same location(s) TeX writes messages to at this moment.</p> <p>If <code>batchmode</code> is in effect, it writes only to the log, otherwise it writes to the log and the terminal.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexiolib.c#L119-L126</li> </ul>"},{"location":"globals/texio/#texiowrite_nl","title":"texio.write_nl","text":"<pre><code>function texio.write_nl(\n  target: WriteTarget,\n  ...: string\n)\n</code></pre> <p>Write all given strings to a target.</p> <p>It makes sure that the given strings will appear at the beginning of a new line.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexiolib.c#L128-L135</li> </ul>"},{"location":"globals/texio/#texiowrite_nl_1","title":"texio.write_nl","text":"<pre><code>function texio.write_nl(...: string)\n</code></pre> <p>Write all given strings to the same location(s) TeX writes messages to at this moment. It makes sure that the given strings will appear at the beginning of a new line.</p> <p>Note: If several strings are given, and if the first of these strings is or might be one of the targets above, the <code>target</code> must be specified explicitly to prevent Lua from interpreting the first string as the target.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexiolib.c#L128-L135</li> </ul>"},{"location":"globals/texio/#texiosetescape","title":"texio.setescape","text":"<pre><code>function texio.setescape(escape_controls: boolean)\n</code></pre> <p>Disable <code>^^</code> escaping of control characters.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexiolib.c#L148-L156</li> </ul>"},{"location":"globals/texio/#texiocloseinput","title":"texio.closeinput","text":"<pre><code>function texio.closeinput()\n</code></pre> <p>Force a jump back to TeX.</p> <p>This function should be used with care. It acts as <code>endinput</code> but at the Lua end. Normally Lua will just collect prints and at the end bump an input level and flush these prints. This function can help you stay at the current level but you need to know what you're doing (or more precise: what TeX is doing with input).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: ltexiolib.c#L158-L171</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/token/","title":"global token","text":"<p>The token library provides means to intercept the input and deal with it at the Lua level. The library provides a basic scanner infrastructure that can be used to write macros that accept a wide range of arguments. This interface is on purpose kept general and as performance is quite ok. One can build additional parsers without too much overhead. It's up to macro package writers to see how they can benefit from this as the main principle behind LuaTeX is to provide a minimal set of tools and no solutions. The scanner functions are probably the most intriguing.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L2091-L2098</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/token/#methods","title":"methods","text":""},{"location":"globals/token/#tokenscan_keyword","title":"token.scan_keyword","text":"<p><pre><code>function token.scan_keyword(keyword: string) -&gt;  boolean\n</code></pre> @param <code>keyword</code> - An ASCII based keyword to scan for.</p> <p>@return  - True if the keyword could be gobbled up otherwise false.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Scan and gobble a given keyword.</p> <p>As with the regular TeX keyword scanner this is case insensitive (and ASCII based).</p> <p>Example:</p> <pre><code>\\def\\scanner{\\directlua{\n  print(token.scan_keyword('keyword'))\n}}\n\\scanner keyword % true\n\\scanner KEYWORD % true\n\\scanner not the keyword % false\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L339-L353</li> </ul>"},{"location":"globals/token/#tokenscan_keyword_cs","title":"token.scan_keyword_cs","text":"<p><pre><code>function token.scan_keyword_cs(keyword: string) -&gt;  boolean\n</code></pre> @param <code>keyword</code> - A case sensitive and UTF-8 based keyword</p> <p>@return  - True if the case sensitive and UTF-8 based keyword could be gobbled up otherwise false.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Scan and gobble a given case sensitive and UTF-8 based keyword.</p> <p>Example:</p> <pre><code>\\def\\scanner{\\directlua{\n  print(token.scan_keyword_cs('Keyword'))\n}}\n\\scanner Keyword % true\n\\scanner keyword % false\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L355-L369</li> </ul>"},{"location":"globals/token/#tokenscan_int","title":"token.scan_int","text":"<pre><code>function token.scan_int() -&gt;  integer\n</code></pre> <p>Scan and gobble a given integer.</p> <p>Example:</p> <pre><code>\\def\\scanner{\\directlua{\n  print(token.scan_int())\n}}\n\\scanner 1 % 1\n\\scanner 1.1 % 1 (Scans only 1 not 1.1)\n\\scanner -1 % -1\n\\scanner 1234567890 % 1234567890\n\\scanner string % Missing number, treated as zero\n\\scanner 12345678901 % Number to big\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L391-L401</li> </ul>"},{"location":"globals/token/#tokenscan_real","title":"token.scan_real","text":"<pre><code>function token.scan_real() -&gt;  number\n</code></pre> <p>Scan and gobble a floating point number that cannot have an exponent (<code>1E10</code> is scanned as <code>1.0</code>).</p> <p>Example:</p> <pre><code>\\def\\scan{\\directlua{\n  print(token.scan_real())\n}}\n\\scan 1E10 % 1.0 Does not scan \u201cE10\u201c\n\\scan 1 % 1.0\n\\scan 1.1 % 1.1\n\\scan .1 % 0.1\n\\scan - .1 % -0.1\n\\scan -1 % -1.0\n\\scan - 1 % -1.0\n\\scan 1234567890 % 1234567890.0\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L530-L533</li> </ul>"},{"location":"globals/token/#tokenscan_float","title":"token.scan_float","text":"<pre><code>function token.scan_float() -&gt;  number\n</code></pre> <p>Scan and gobble a floating point number that can be provided with an exponent (e. g. <code>1E10</code>).</p> <p>Example:</p> <pre><code>\\def\\scan{\\directlua{\n  print(token.scan_float())\n}}\n\\scan 1E10 % 10000000000.0\n\\scan .1e-10 % 1e-11\n\\scan 1 % 1.0\n\\scan 1.1 % 1.1\n\\scan .1 % 0.1\n\\scan - .1 % -0.1\n\\scan -1 % -1.0\n\\scan - 1 % -1.0\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L525-L528</li> </ul>"},{"location":"globals/token/#tokenscan_dimen","title":"token.scan_dimen","text":"<p><pre><code>function token.scan_dimen(\n  inf: boolean?,\n  mu: boolean?\n) -&gt;  integer\n</code></pre> @param <code>inf</code> - inf values allowed</p> <p>@param <code>mu</code> - mu (math units) units required</p> <p>Returns a number representing a dimension and or two numbers being the filler and order</p> <p>Example:</p> <p>Parameter <code>inf</code>:</p> <pre><code>\\directlua{token.scan_dimen(true)}1fi % 1\n\\directlua{token.scan_dimen(true)}1fil % 2\n\\directlua{token.scan_dimen(true)}1fill % 3\n\\directlua{token.scan_dimen(true)}1filll % 4\n</code></pre> <p>Parameter <code>mu</code>:</p> <p><pre><code>\\directlua{token.scan_dimen(false, true)}1mu % 65536\n\\directlua{token.scan_dimen(false, true)}1cm % Illegal unit of measure (mu inserted).\n</code></pre> Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L535-L557</li> </ul>"},{"location":"globals/token/#tokenscan_glue","title":"token.scan_glue","text":"<pre><code>function token.scan_glue(mu_units: boolean?) -&gt;  GlueSpecNode {\n    width = integer,\n    stretch = integer,\n    stretch_order = integer,\n    shrink = integer,\n    shrink_order = integer,\n}\n</code></pre> <p>returns a glue spec node</p> <p>Example:</p> <pre><code>\\def\\scan{\\directlua{\n  local node = token.scan_glue()\n  print(node.width, node.stretch, node.stretch_order, node.shrink, node.shrink_order)\n}}\n\\def\\scanMu{\\directlua{\n  local node = token.scan_glue(true)\n  print(node.width, node.stretch, node.stretch_order, node.shrink, node.shrink_order)\n}}\n\\scan 1pt % 65536 0 0 0 0\n\\scan 1pt plus 2pt % 65536 131072 0 0 0\n\\scan 1pt minus 3pt % 65536 0 0 196608 0\n\\scan 1pt plus 2pt minus 3pt % 65536 131072 0 196608 0\n\\scan 1pt plus 2fi minus 3fi % 65536 131072 1 196608 1\n\\scan 1pt plus 2fil minus 3fil % 65536 131072 2 196608 2\n\\scan 1pt plus 2fill minus 3fill % 65536 131072 3 196608 3\n\\scan 1pt plus 2filll minus 3filll % 65536 131072 4 196608 4\n\\scan string % Missing number, treated as zero.\n\\scanMu 3mu % 196608 0 0 0 0\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L559-L573</li> </ul>"},{"location":"globals/token/#tokenscan_toks","title":"token.scan_toks","text":"<p><pre><code>function token.scan_toks(\n  definer: boolean?,\n  expand: boolean?\n) -&gt;  Token[]\n</code></pre> @param <code>definer</code> - <code>macro_def</code>, <code>\\def</code></p> <p>Scan a list of tokens delimited by balanced braces.</p> <p>Example:</p> <pre><code>\\directlua{\n  local t = token.scan_toks()\n  for id, tok in ipairs(t) do\n    print(id, tok, tok.command, tok.cmdname, tok.csname)\n  end\n}{Some text}\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L575-L602</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!-</p>"},{"location":"globals/token/#tokenscan_code","title":"token.scan_code","text":"<pre><code>function token.scan_code(bitset)\n</code></pre> <p>Return a character if its category is in the given bitset (representing catcodes)</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L730-L756</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/token/#tokenscan_string","title":"token.scan_string","text":"<pre><code>function token.scan_string() -&gt;  string\n</code></pre> <p>@return  - A string given between <code>{</code> <code>}</code>, as <code>\\macro</code> or as sequence of characters with catcode 11 or 12</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Scan and gobble a string.</p> <p>The string scanner scans for something between curly braces and expands on the way, or when it sees a control sequence it will return its meaning. Otherwise it will scan characters with catcode <code>letter</code> or <code>other</code>.</p> <p>Example:</p> <pre><code>\\def\\scan{\\directlua{\n  print(token.scan_string())\n}}\n\\def\\bar{bar}\n\\def\\foo{\\bar}\n\\scan \\foo % bar\n\\scan {\\foo} % bar\n\\scan {A string} % A string\n\\scan A string % A\n\\scan Word1 Word2 % Word1\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L604-L641</li> </ul>"},{"location":"globals/token/#tokenscan_argument","title":"token.scan_argument","text":"<p><pre><code>function token.scan_argument(expand: boolean?) -&gt;  string\n</code></pre> @param <code>expand</code> - When a braced argument is scanned, expansion can be prohibited by passing <code>false</code> (default is <code>true</code>)</p> <p>Scan and gobble an argument.</p> <p>This function is simular to <code>token.scan_string</code> but also accepts a <code>\\cs</code>. It expands the given argument. When a braced argument is scanned, expansion can be prohibited by passing <code>false</code> (default is <code>true</code>). In case of a control sequence passing <code>false</code> will result in a one-level expansion (the meaning of the macro).</p> <p>Example:</p> <pre><code>\\def\\scan{\\directlua{\n  print(token.scan_argument(true))\n}}\n\\def\\scanNoExpand{\\directlua{\n  print(token.scan_argument(false))\n}}\n\\def\\foo{bar}\n\\scan \\foo % bar\n\\scan { {\\bf text} } % {\\fam \\bffam \\tenbf text}\n\\scanNoExpand { {\\bf text} } % {\\bf text}\n\\scan c % c\n\\scan \\bf % \\fam \\bffam \\tenbf\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L643-L702</li> </ul>"},{"location":"globals/token/#tokenscan_word","title":"token.scan_word","text":"<pre><code>function token.scan_word()\n</code></pre> <p>Return a sequence of characters with catcode <code>11</code> or <code>12</code> as a string.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L704-L728</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/token/#tokenscan_csname","title":"token.scan_csname","text":"<pre><code>function token.scan_csname()\n</code></pre> <p>Return <code>foo</code> after scanning <code>\\foo</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L371-L389</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/token/#tokenscan_list","title":"token.scan_list","text":"<pre><code>function token.scan_list()\n</code></pre> <p>Pick up a box specification and return a <code>[h|v]list</code> node.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L1100-L1111</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/token/#tokenget_next","title":"token.get_next","text":"<pre><code>function token.get_next() -&gt;  Token {\n    command = integer,\n    cmdname = TokenCommandName,\n    csname = string?,\n    id = integer,\n    tok = integer,\n    active = boolean,\n    expandable = boolean,\n    protected = boolean,\n    mode = integer,\n    index = integer?,\n}\n</code></pre> <p>Scan and gobble the next token.</p> <p>The different scanner functions of the <code>token</code> library look for a sequence of tokens. This function scans just the next token.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L2237-L2239</li> <li>Corresponding C source code: lnewtokenlib.c#L231-L239</li> </ul>"},{"location":"globals/token/#tokenscan_token","title":"token.scan_token","text":"<pre><code>function token.scan_token() -&gt;  Token {\n    command = integer,\n    cmdname = TokenCommandName,\n    csname = string?,\n    id = integer,\n    tok = integer,\n    active = boolean,\n    expandable = boolean,\n    protected = boolean,\n    mode = integer,\n    index = integer?,\n}\n</code></pre> <p>Use <code>scan_token</code> if you want to enforce expansion first you can.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L1090-L1098</li> </ul>"},{"location":"globals/token/#tokenexpand","title":"token.expand","text":"<pre><code>function token.expand()\n</code></pre> <p>Trigger expansion of the next token in the input.</p> <p>This can be quite unpredictable but when you call it you probably know enough about TeX not to be too worried about that. It basically is a call to the internal expand related function.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L764-L769</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/token/#tokenget_command","title":"token.get_command","text":"<pre><code>function token.get_command(t: Token {\n    command = integer,\n    cmdname = TokenCommandName,\n    csname = string?,\n    id = integer,\n    tok = integer,\n    active = boolean,\n    expandable = boolean,\n    protected = boolean,\n    mode = integer,\n    index = integer?,\n}) -&gt; command integer\n</code></pre> <p>@return <code>command</code> - A number representing the internal command number, for example <code>147</code>.</p> <p>Return the internal command number.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L870-L880</li> </ul> <p>@see Token.command</p>"},{"location":"globals/token/#tokenget_cmdname","title":"token.get_cmdname","text":"<pre><code>function token.get_cmdname(t: Token {\n    command = integer,\n    cmdname = TokenCommandName,\n    csname = string?,\n    id = integer,\n    tok = integer,\n    active = boolean,\n    expandable = boolean,\n    protected = boolean,\n    mode = integer,\n    index = integer?,\n}) -&gt; cmdname TokenCommandName\n</code></pre> <p>@return <code>cmdname</code> - The type of the command (for instance the catcode in case of a character or the classifier that determines the internal treatment, for example <code>letter</code>.</p> <p>Return the type of the command (for instance the catcode in case of a character or the classifier that determines the internal treatment, for example <code>letter</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L936-L943</li> </ul> <p>@see Token.cmdname</p>"},{"location":"globals/token/#tokenget_csname","title":"token.get_csname","text":"<pre><code>function token.get_csname(t: Token {\n    command = integer,\n    cmdname = TokenCommandName,\n    csname = string?,\n    id = integer,\n    tok = integer,\n    active = boolean,\n    expandable = boolean,\n    protected = boolean,\n    mode = integer,\n    index = integer?,\n}) -&gt; csname string?\n</code></pre> <p>@return <code>csname</code> - The associated control sequence (if applicable), for example <code>bigskip</code>.</p> <p>Return the associated control sequence (if applicable), for example <code>bigskip</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L945-L959</li> </ul> <p>@see Token.csname</p>"},{"location":"globals/token/#tokenget_id","title":"token.get_id","text":"<pre><code>function token.get_id(t: Token {\n    command = integer,\n    cmdname = TokenCommandName,\n    csname = string?,\n    id = integer,\n    tok = integer,\n    active = boolean,\n    expandable = boolean,\n    protected = boolean,\n    mode = integer,\n    index = integer?,\n}) -&gt; id integer\n</code></pre> <p>@return <code>id</code> - The unique id of the token, for example <code>6876</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the unique id of the token.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L961-L966</li> </ul>"},{"location":"globals/token/#tokenget_tok","title":"token.get_tok","text":"<pre><code>function token.get_tok(t: Token {\n    command = integer,\n    cmdname = TokenCommandName,\n    csname = string?,\n    id = integer,\n    tok = integer,\n    active = boolean,\n    expandable = boolean,\n    protected = boolean,\n    mode = integer,\n    index = integer?,\n}) -&gt; tok integer\n</code></pre> <p>@return <code>tok</code> - The full token number as stored in TeX, for example <code>536883863</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the full token number as stored in TeX.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L968-L974</li> </ul> <p>@see Token.tok</p>"},{"location":"globals/token/#tokenget_active","title":"token.get_active","text":"<pre><code>function token.get_active(t: Token {\n    command = integer,\n    cmdname = TokenCommandName,\n    csname = string?,\n    id = integer,\n    tok = integer,\n    active = boolean,\n    expandable = boolean,\n    protected = boolean,\n    mode = integer,\n    index = integer?,\n}) -&gt; active boolean\n</code></pre> <p>@return <code>active</code> - A boolean indicating the active state of the token, for example <code>true</code>.</p> <p>Return a boolean indicating the active state of the token, for example <code>true</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L976-L991</li> </ul> <p>@see Token.active</p>"},{"location":"globals/token/#tokenget_expandable","title":"token.get_expandable","text":"<pre><code>function token.get_expandable(t: Token {\n    command = integer,\n    cmdname = TokenCommandName,\n    csname = string?,\n    id = integer,\n    tok = integer,\n    active = boolean,\n    expandable = boolean,\n    protected = boolean,\n    mode = integer,\n    index = integer?,\n}) -&gt; expandable boolean\n</code></pre> <p>@return <code>expandable</code> - A boolean indicating if the token (macro) is expandable, for example <code>true</code>.</p> <p>Return a boolean indicating if the token (macro) is expandable.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L993-L1004</li> </ul> <p>@see Token.expandable</p>"},{"location":"globals/token/#tokenget_protected","title":"token.get_protected","text":"<pre><code>function token.get_protected(t: Token {\n    command = integer,\n    cmdname = TokenCommandName,\n    csname = string?,\n    id = integer,\n    tok = integer,\n    active = boolean,\n    expandable = boolean,\n    protected = boolean,\n    mode = integer,\n    index = integer?,\n}) -&gt; protected boolean\n</code></pre> <p>@return <code>protected</code> - A boolean indicating if the token (macro) is protected, for example <code>false</code>.</p> <p>Return a boolean indicating if the token (macro) is protected.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L1006-L1022</li> </ul> <p>@see Token.protected</p>"},{"location":"globals/token/#tokenget_mode","title":"token.get_mode","text":"<pre><code>function token.get_mode(t: Token {\n    command = integer,\n    cmdname = TokenCommandName,\n    csname = string?,\n    id = integer,\n    tok = integer,\n    active = boolean,\n    expandable = boolean,\n    protected = boolean,\n    mode = integer,\n    index = integer?,\n}) -&gt; mode integer\n</code></pre> <p>@return <code>mode</code> - A number either representing a character or another entity, for example <code>1007</code>.</p> <p>Return a number either representing a character or another entity.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L924-L934</li> </ul> <p>@see Token.mode</p>"},{"location":"globals/token/#tokenget_index","title":"token.get_index","text":"<pre><code>function token.get_index(t: Token {\n    command = integer,\n    cmdname = TokenCommandName,\n    csname = string?,\n    id = integer,\n    tok = integer,\n    active = boolean,\n    expandable = boolean,\n    protected = boolean,\n    mode = integer,\n    index = integer?,\n}) -&gt; index integer\n</code></pre> <p>@return <code>index</code> - A number running from 0x0000 upto 0xFFFF indicating a TeX register index, for example <code>1007</code>.</p> <p>Return a number running from <code>0x0000</code> upto <code>0xFFFF</code> indicating a TeX register index.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L882-L922</li> </ul> <p>@see Token.index</p>"},{"location":"globals/token/#tokenget_macro","title":"token.get_macro","text":"<p><pre><code>function token.get_macro(name: string) -&gt;  string\n</code></pre> @param <code>name</code> - The name of the macro without the leading backslash.</p> <p>@return  - for example <code>foo #1 bar</code>.</p> <p>Get the content of a macro.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L1141-L1166</li> </ul> <p>@see token.set_macro</p>"},{"location":"globals/token/#tokenget_meaning","title":"token.get_meaning","text":"<p><pre><code>function token.get_meaning(name: string) -&gt;  string\n</code></pre> @param <code>name</code> - The name of the macro without the leading backslash.</p> <p>@return  - for example <code>-&gt;foo #1 bar</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Get the meaning of a macro including the argument specification (as usual in TeX separated by <code>-&gt;</code>).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L1121-L1139</li> </ul>"},{"location":"globals/token/#tokencommands","title":"token.commands","text":"<pre><code>function token.commands() -&gt;  table\n</code></pre> <p>Ask for a list of commands.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L1373-L1382</li> </ul>"},{"location":"globals/token/#tokencommand_id","title":"token.command_id","text":"<p><pre><code>function token.command_id(cmdname: TokenCommandName) -&gt; __Reference integer?\n</code></pre> @param <code>cmdname</code> - for example <code>letter</code></p> <p>@return <code>__Reference</code> - :__</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L201-L213</li> </ul> <p>Return the id of a token class.</p>"},{"location":"globals/token/#tokencreate","title":"token.create","text":"<pre><code>function token.create(\n  chr: integer,\n  cmd: integer?\n) -&gt;  Token {\n    command = integer,\n    cmdname = TokenCommandName,\n    csname = string?,\n    id = integer,\n    tok = integer,\n    active = boolean,\n    expandable = boolean,\n    protected = boolean,\n    mode = integer,\n    index = integer?,\n}\n</code></pre> <p>Create a token.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L826-L845</li> </ul> <p>@see token.new</p>"},{"location":"globals/token/#tokennew","title":"token.new","text":"<pre><code>function token.new(\n  chr: integer,\n  cmd: integer\n) -&gt;  Token {\n    command = integer,\n    cmdname = TokenCommandName,\n    csname = string?,\n    id = integer,\n    tok = integer,\n    active = boolean,\n    expandable = boolean,\n    protected = boolean,\n    mode = integer,\n    index = integer?,\n}\n</code></pre> <p>A variant that ignores the current catcode table is:</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L847-L854</li> </ul> <p>@see token.create</p>"},{"location":"globals/token/#tokenis_defined","title":"token.is_defined","text":"<pre><code>function token.is_defined(cs: string) -&gt;  boolean\n</code></pre> <p>Example:</p> <pre><code>\\def\\foo{bar}\n\\directlua{\n  print(token.is_defined('foo')) % true\n  print(token.is_defined('nofoo')) % false\n  print(token.is_defined('bf')) % true\n}\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L807-L824</li> </ul>"},{"location":"globals/token/#tokenbiggest_char","title":"token.biggest_char","text":"<pre><code>function token.biggest_char() -&gt;  integer\n</code></pre> <p>Example:</p> <pre><code>print(token.biggest_char()) % 1114111\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L185-L189</li> </ul>"},{"location":"globals/token/#tokenset_macro","title":"token.set_macro","text":"<pre><code>function token.set_macro(\n  csname: string,\n  content: string?,\n  global: \"global\"?\n)\n</code></pre> <p>Create a macro.</p> <p>Example:</p> <pre><code>\\directlua{\n  token.set_macro(\"test\", \"content\")\n}\n\\test\n</code></pre> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L2368-L2382</li> <li>Corresponding C source code: lnewtokenlib.c#L1218-L1342</li> </ul>"},{"location":"globals/token/#tokenset_macro_1","title":"token.set_macro","text":"<p><pre><code>function token.set_macro(\n  catcodetable: integer,\n  csname: string,\n  content: string?,\n  global: \"global\"?\n)\n</code></pre> @param <code>catcodetable</code> - A catcodetable identifier.</p> <p>Create a macro.</p> <p>Example:</p> <pre><code>\\directlua{\n  token.set_macro(\"test\", \"content\")\n}\n\\test\n</code></pre> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L2368-L2382</li> <li>Corresponding C source code: lnewtokenlib.c#L1218-L1342</li> </ul>"},{"location":"globals/token/#tokenset_char","title":"token.set_char","text":"<pre><code>function token.set_char(\n  csname: string,\n  number: integer,\n  global: \"global\"?\n)\n</code></pre> <p>Do a <code>chardef</code> at the Lua end, where invalid assignments are silently ignored.</p> <p>Example:</p> <pre><code>\\directlua{\n  token.set_char('myT', 84)\n  token.set_char('mye', 101)\n  token.set_char('myX', 88)\n}\n\\myT\\mye\\myX % TeX\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L1344-L1371</li> </ul>"},{"location":"globals/token/#tokenset_lua","title":"token.set_lua","text":"<pre><code>function token.set_lua(\n  name: string,\n  id: integer,\n  ...: (\"global\"|\"protected\")\n)\n</code></pre> <p>local index = 1 while t[index] do index = index + 1 end</p> <p>t[index] = function(slot) print(slot) end token.set_lua('mycode', index, 'protected', 'global') }</p> <p>\\mycode</p> <p>\\bye <pre><code>__Reference:__\n\n* Corresponding C source code: [lnewtokenlib.c#L1168-L1216](https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/lua/lnewtokenlib.c#L1168-L1216)\n\n\n\n\n\n@see lua.get_functions_table\n\n\n\n\n### token.put_next\n---\n```lua\nfunction token.put_next(...: Token {\n    command = integer,\n    cmdname = TokenCommandName,\n    csname = string?,\n    id = integer,\n    tok = integer,\n    active = boolean,\n    expandable = boolean,\n    protected = boolean,\n    mode = integer,\n    index = integer?,\n})\n</code></pre></p> <p>Put the next token back in the input.</p> <p>Example:</p> <pre><code>local t1 = token.get_next()\nlocal t2 = token.get_next()\nlocal t3 = token.get_next()\nlocal t4 = token.get_next()\n-- watch out, we flush in sequence\ntoken.put_next { t1, t2 }\n-- but this one gets pushed in front\ntoken.put_next ( t3, t4 )\n-- so when we get wxyz we put yzwx!\n</code></pre> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L2422-L2433</li> <li>Corresponding C source code: lnewtokenlib.c#L262-L337</li> </ul>"},{"location":"globals/token/#tokenis_token","title":"token.is_token","text":"<pre><code>function token.is_token(t: any) -&gt;  boolean\n</code></pre> <p>Check if the given argument is a token.</p> <p>Example:</p> <pre><code>\\directlua{\n  local t = token.get_next()\n  print(token.is_token(t)) % true\n  print(token.is_token('text')) % false\n  print(token.is_token(true)) % false\n}Token\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L758-L762</li> </ul> <p>@see token.type</p>"},{"location":"globals/token/#tokentype","title":"token.type","text":"<pre><code>function token.type(t: any) -&gt;  \"token\"?\n</code></pre> <p>Return the string <code>token</code> if the given parameter is a token else <code>nil</code>.</p> <p>Example:</p> <pre><code>\\directlua{\n  local t = token.get_next()\n  print(token.type(t)) % 'token'\n  print(token.type('text')) % nil\n  print(token.type(true)) % nil\n}Token\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lnewtokenlib.c#L1080-L1088</li> </ul> <p>@see token.is_token</p>"},{"location":"globals/unicode/","title":"global unicode","text":"<p>There are four <code>string</code>-like tables of functions: <code>ascii</code>, <code>latin1</code>, <code>utf8</code> and <code>grapheme</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/unicode/#fields","title":"fields","text":""},{"location":"globals/unicode/#unicodeascii","title":"unicode.ascii","text":"<pre><code>unicode.ascii: table\n</code></pre> <p><code>ascii</code> is single-byte like <code>string</code>, but use the unicode table for upper/lower and character classes. <code>ascii</code> does not touch bytes &gt; 127 on upper/lower.</p> <p><code>ascii</code> can be used as locale-independent <code>string</code> replacement.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/unicode/#unicodelatin1","title":"unicode.latin1","text":"<pre><code>unicode.latin1: table\n</code></pre> <p><code>latin1</code> is single-byte like <code>string</code>, but uses the unicode table for upper/lower and character classes.</p> <p><code>latin1</code> can be used as locale-independent <code>string</code> replacement.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/unicode/#unicodegrapheme","title":"unicode.grapheme","text":"<pre><code>unicode.grapheme: table\n</code></pre> <p><code>grapheme</code> takes care of grapheme clusters, which are characters followed by \u201cgrapheme extension\u201d characters (Mn+Me) like combining diacritical marks.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/unicode/#unicodeutf8","title":"unicode.utf8","text":"<pre><code>unicode.utf8: table\n</code></pre> <p><code>utf8</code> operates on UTF-8 sequences as of RFC 3629: 1 byte 0-7F, 2 byte 80-7FF, 3 byte 800-FFFF, 4 byte 1000-10FFFF (not exclusing UTF-16 surrogate characters) Any byte not part of such a sequence is treated as it's (Latin-1) value.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/vf/","title":"global vf","text":"<p>The <code>vf</code> library can be used when Lua code, as defined in the <code>commands</code> of the font, is executed. The functions provided are similar as the commands: <code>char</code>, <code>down</code>, <code>fontid</code>, <code>image</code>, <code>node</code>, <code>nop</code>, <code>pop</code>, <code>push</code>, <code>right</code>, <code>rule</code>, <code>special</code> and <code>pdf</code>. This library has been present for a while but not been advertised and tested much, if only because it's easy to define an invalid font (or mess up the PDF stream). Keep in mind that the Lua snippets are executed each time when a character is output.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/vf/#methods","title":"methods","text":""},{"location":"globals/vf/#vfchar","title":"vf.char","text":"<pre><code>function vf.char(n: integer)\n</code></pre> <p>Typeset a character from the current font, and move right by the character\u2019s width.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L327-L352</li> </ul>"},{"location":"globals/vf/#vfdown","title":"vf.down","text":"<pre><code>function vf.down(down: integer)\n</code></pre> <p>Move down on the page.</p>"},{"location":"globals/vf/#vffontid","title":"vf.fontid","text":"<pre><code>function vf.fontid(fontid: integer)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L369-L376</li> </ul>"},{"location":"globals/vf/#vfimage","title":"vf.image","text":"<pre><code>function vf.image(image: (Image|ImageSpec))\n</code></pre> <p>Output an image (the argument can be either an <code>image</code> variable or an <code>image_spec</code> table)</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L378-L387</li> </ul>"},{"location":"globals/vf/#vfnode","title":"vf.node","text":"<pre><code>function vf.node(list: Node {\n    next = Node?,\n    prev = Node?,\n    id = integer,\n    subtype = integer,\n    head = Node?,\n    attr = Node,\n})\n</code></pre> <p>Output this node (list), and move right by the width of this list.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L389-L398</li> </ul>"},{"location":"globals/vf/#vfnop","title":"vf.nop","text":"<pre><code>function vf.nop()\n</code></pre> <p>Do nothing.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L400-L406</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/vf/#vfpop","title":"vf.pop","text":"<pre><code>function vf.pop()\n</code></pre> <p>Pop position.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L408-L420</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/vf/#vfpush","title":"vf.push","text":"<pre><code>function vf.push()\n</code></pre> <p>Save the current position.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L422-L435</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/vf/#vfright","title":"vf.right","text":"<pre><code>function vf.right(right: integer)\n</code></pre> <p>Move right on the page.</p>"},{"location":"globals/vf/#vfrule","title":"vf.rule","text":"<pre><code>function vf.rule(\n  height: integer,\n  width: integer\n)\n</code></pre> <p>Output a rule (height * width) and move right.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L455-L475</li> </ul>"},{"location":"globals/vf/#vfspecial","title":"vf.special","text":"<pre><code>function vf.special(special: string)\n</code></pre> <p>Output a <code>\\special</code> command.</p>"},{"location":"globals/vf/#vfpdf","title":"vf.pdf","text":"<pre><code>function vf.pdf(\n  mode: unknown,\n  general_text: string\n)\n</code></pre> <p>Output a pdf literal.</p> <p>The first string is one of <code>origin</code>, <code>page</code>, <code>text</code>, <code>font</code>, <code>direct</code> or <code>raw</code></p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L491-L499</li> <li>Corresponding C source code: lpdflib.c#L25-L87</li> </ul>"},{"location":"globals/vf/#vfpdf_1","title":"vf.pdf","text":"<pre><code>function vf.pdf(general_text: string)\n</code></pre> <p>Output a pdf literal.</p> <p>If you have one string only <code>origin</code> is assumed.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lfontlib.c#L491-L499</li> <li>Corresponding C source code: lpdflib.c#L25-L87</li> </ul>"},{"location":"globals/zip/","title":"global zip","text":"<p><code>LuaZip</code> is a lightweight Lua extension library that can be used to read files stored inside zip files. It uses <code>zziplib</code> to do all the hard work.</p> <p>The API exposed to Lua is very simple and very similiar to the usual file handling functions provided by the I/O Lua standard library. In fact, the API is so similar that parts of this manual are extracted from the Lua manual, copyrighted by Tecgraf, PUC-Rio.</p> <p>History:</p> <ul> <li>keplerproject.org (link not accessible): http://www.keplerproject.org/luazip</li> <li>luaforge.net (link not accessible): http://luaforge.net/projects/luazip</li> <li>Forked from the CVS repository on luaforge.net on Jan. 20, 2010: https://github.com/luaforge/luazip</li> <li>Most active fork: https://github.com/mpeterv/luazip</li> </ul> <p>Project on luarocks: https://luarocks.org/modules/mpeterv/luazip HTML documentation: http://mpeterv.github.io/luazip</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/zip/#methods","title":"methods","text":""},{"location":"globals/zip/#ziptype","title":"zip.type","text":"<pre><code>function zip.type(zfile: ZFile {\n    close = function,\n    files = function,\n    open = function,\n}) -&gt;  (\"closed zip file\"|\"zip file\")?\n</code></pre> <p>Check if a zip file is open or closed.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: (luazip.c#L217-L225)[https://github.com/mpeterv/luazip/blob/e424f667cc5c78dd19bb5eca5a86b3c8698e0ce5/src/luazip.c#L217-L225]</li> </ul> <p>Example:</p> <pre><code>local z_file = zip.open('test.zip')\nassert(z_file)\nassert(zip.type(z_file) == \"zip file\")\nz_file:close()\nassert(zip.type(z_file) == \"closed zip file\")\n</code></pre>"},{"location":"globals/zip/#zipopen","title":"zip.open","text":"<pre><code>function zip.open(filename: string)\n -&gt;  ZFile?\n -&gt; err string?\n</code></pre> <p>Open a zip file and return a new zip file handle.</p> <p>In case of error it returns nil and an error message. Unlike <code>io.open</code>, there is no <code>mode</code> parameter, as the only supported mode is \"read\".</p> <p>Example:</p> <pre><code>local z_file = zip.open('test.zip')\nassert(z_file)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: luazip.c#L106-L119</li> </ul>"},{"location":"globals/zip/#zipopenfile","title":"zip.openfile","text":"<pre><code>function zip.openfile(\n  filename: string,\n  extensions: (string|string[])?\n)\n -&gt;  ZInternalFile?\n -&gt; err string?\n</code></pre> <p>Open a file and return a file handle.</p> <p>In case of error it returns nil and an error message. Unlike <code>io.open</code>, there is no <code>mode</code> parameter, as the only supported mode is <code>read</code>.</p> <p>This function implements a virtual file system based on optionally compressed files. Instead of simply looking for a file at a given path, this function goes recursively up through all path separators (\"/\") looking for zip files there. If it finds a zip file, this function use the remaining path to open the requested file. The optional parameter <code>extensions</code> allows the use of file extensions other than .zip during the lookup. It can be a string corresponding to the extension or an indexed table with the lookup extensions sequence.</p> <p>Example:</p> <pre><code>-- test.zip: Hello-World.txt\nlocal z_internal_file = zip.openfile('test/Hello-world.txt')\nassert(z_internal_file)\nlocal content = z_internal_file:read('*a')\nassert(content == 'Hello, World!\\n', content)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: luazip.c#L151-L215</li> </ul>"},{"location":"globals/zip/#zipclose","title":"zip.close","text":"<pre><code>function zip.close(zfile: ZFile {\n    close = function,\n    files = function,\n    open = function,\n}) -&gt; success boolean\n</code></pre> <p>Close a zfile opened by <code>zip.open</code>.</p> <p>Example:</p> <pre><code>local z_file = zip.open('test.zip')\nlocal success = zip.close(z_file)\nassert(success == true)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: luazip.c#L121-L131</li> </ul>"},{"location":"globals/zlib/","title":"global zlib","text":"<p><code>lzlib</code>, by Tiago Dionizio.</p> <p>Reference:</p> <ul> <li>Old location: http://luaforge.net/projects/lzlib/.</li> <li>More recent git repo (archived): https://github.com/LuaDist/lzlib</li> <li>On luarocks: https://luarocks.org/modules/hisham/lzlib</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"globals/zlib/#methods","title":"methods","text":""},{"location":"globals/zlib/#zlibversion","title":"zlib.version","text":"<pre><code>function zlib.version() -&gt; version string\n</code></pre> <p>@return <code>version</code> - For example <code>1.2.13</code></p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the zlib version.</p> <p>Example:</p> <pre><code>local version = zlib.version()\nassert(version == '1.2.13')\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lzlib.c#L331-L335</li> </ul>"},{"location":"globals/zlib/#zlibadler32","title":"zlib.adler32","text":"<pre><code>function zlib.adler32(\n  adler32: number?,\n  buffer: string?\n) -&gt; adler32 number\n</code></pre> <p>Return the initial <code>adler32</code> value.</p> <p>Call to update the <code>adler32</code> value, <code>adler32</code> is the current value, <code>buffer</code> is passed to <code>adler32</code> zlib function and the updated value is returned.</p> <p>This function is not related to compression but is exported anyway because it might be useful in applications using the compression library.</p> <p>Example:</p> <pre><code>local adler = zlib.adler32()\nassert(adler == 1.0)\nadler = zlib.adler32(adler, 'some text')\nassert(adler == 300417946.0)\nadler = zlib.adler32(adler, 'some text')\nassert(adler == 1144063795.0)\nadler = zlib.adler32(adler, 'some text')\nassert(adler == 2530937548.0)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lzlib.c#L338-L355</li> </ul>"},{"location":"globals/zlib/#zlibadler32_1","title":"zlib.adler32","text":"<pre><code>function zlib.adler32(\n  crc32: number?,\n  buffer: string?\n) -&gt; crc32 number\n</code></pre> <p>Return the initial <code>crc32</code> (Cyclic Redundancy Check) value.</p> <p>Call to update the <code>crc32</code> value, <code>crc32</code> is the current value, <code>buffer</code> is passed to <code>crc32</code> zlib function and the updated value is returned.</p> <p>This function is not related to compression but is exported anyway because it might be useful in applications using the compression library.</p> <p>Example:</p> <pre><code>local crc = zlib.crc32()\nassert(crc == 0.0)\ncrc = zlib.crc32(crc, 'some text')\nassert(crc == 1337638330.0)\ncrc = zlib.crc32(crc, 'some text')\nassert(crc == 2768805016.0)\ncrc = zlib.crc32(crc, 'some text')\nassert(crc == 1021719064.0)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lzlib.c#L358-L375</li> </ul>"},{"location":"globals/zlib/#zlibcompress","title":"zlib.compress","text":"<p><pre><code>function zlib.compress(\n  buffer: string,\n  level: integer?,\n  method: integer?,\n  window_bits: integer?,\n  mem_level: sub&lt;integer,default&gt;?,\n  strategy: sub&lt;integer,default&gt;?\n) -&gt; buffer string\n</code></pre> @param <code>level</code> - The compression level must be <code>-1</code> (default compression), or between <code>0</code> and <code>9</code>: <code>1</code> gives best speed, <code>9</code> gives best compression, <code>0</code> gives no compression at all (the input data is simply copied a block at a time).</p> <p>@param <code>method</code> - The method parameter is the compression method. It must be <code>8</code> (<code>Z_DEFLATED</code>) in this version of the library.</p> <p>@param <code>window_bits</code> - <code>The window_bits</code> parameter is the base two logarithm of the maximum window size (the size of the history buffer). It should be in the range <code>8..15</code> for this version of the library, default <code>15</code>.</p> <p>@param <code>mem_level</code> - <code>8</code></p> <p>@param <code>strategy</code> - <code>Z_DEFAULT_STRATEGY</code></p> <p>Return a string containing the compressed buffer according to the given parameters.</p> <p>Example:</p> <pre><code>local orig = [[\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam\nnonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat,\nsed diam voluptua.\n]]\nassert(string.len(zlib.compress(orig)) &lt; string.len(orig))\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lzlib.c#L380-L441</li> </ul>"},{"location":"globals/zlib/#zlibdecompress","title":"zlib.decompress","text":"<p><pre><code>function zlib.decompress(\n  buffer: string,\n  window_bits: integer?\n) -&gt;  string\n</code></pre> @param <code>window_bits</code> - <code>The window_bits</code> parameter is the base two logarithm of the maximum window size (the size of the history buffer). It should be in the range <code>8..15</code> for this version of the library, default <code>15</code>.</p> <p>Return the decompressed stream after processing the given buffer.</p> <p>Example:</p> <pre><code>local uncompressed = 'Lorem ipsum'\nlocal compressed = zlib.compress(uncompressed)\nlocal result = zlib.decompress(compressed)\nassert(result == uncompressed)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lzlib.c#L445-L502</li> </ul>"},{"location":"globals/zlib/#zlibcompressobj","title":"zlib.compressobj","text":"<p><pre><code>function zlib.compressobj(\n  level: integer?,\n  method: integer?,\n  window_bits: integer?,\n  mem_level: sub&lt;integer,default&gt;?,\n  strategy: sub&lt;integer,default&gt;?\n) -&gt;  ZStream {\n    adlerreset = function,\n    compress = function,\n    decompress = function,\n    flush = function,\n    close = function,\n    adler = function,\n}\n</code></pre> @param <code>level</code> - The compression level must be <code>-1</code> (default compression), or between <code>0</code> and <code>9</code>: <code>1</code> gives best speed, <code>9</code> gives best compression, <code>0</code> gives no compression at all (the input data is simply copied a block at a time).</p> <p>@param <code>method</code> - The method parameter is the compression method. It must be <code>8</code> (<code>Z_DEFLATED</code>) in this version of the library.</p> <p>@param <code>window_bits</code> - <code>The window_bits</code> parameter is the base two logarithm of the maximum window size (the size of the history buffer). It should be in the range <code>8..15</code> for this version of the library, default <code>15</code>.</p> <p>@param <code>mem_level</code> - <code>8</code></p> <p>@param <code>strategy</code> - <code>Z_DEFAULT_STRATEGY</code></p> <p>Return a deflate stream.</p> <p>In the upstream project this function is called <code>zlib.deflate()</code>.</p> <p>Example:</p> <pre><code>local z_stream = zlib.compressobj(1)\nlocal result = z_stream:compress('test')\nassert(type(result) == 'string')\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lzlib.c#L156-L173</li> </ul>"},{"location":"globals/zlib/#zlibdecompressobj","title":"zlib.decompressobj","text":"<p><pre><code>function zlib.decompressobj(window_bits: integer?) -&gt;  ZStream {\n    adlerreset = function,\n    compress = function,\n    decompress = function,\n    flush = function,\n    close = function,\n    adler = function,\n}\n</code></pre> @param <code>window_bits</code> - <code>The window_bits</code> parameter is the base two logarithm of the maximum window size (the size of the history buffer). It should be in the range <code>8..15</code> for this version of the library, default <code>15</code>.</p> <p>Return an inflate stream.</p> <p>In the upstream project this function is called <code>zlib.inflate()</code>.</p> <p>Example:</p> <pre><code>local z_stream_com = zlib.compressobj(1)\nlocal compressed = z_stream_com:compress('test')\ncompressed = compressed .. z_stream_com:flush()\n\nlocal z_stream_decomp = zlib.decompressobj()\nlocal result = z_stream_decomp:decompress(compressed)\nassert(result == 'test')\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lzlib.c#L177-L191</li> </ul>"},{"location":"types/AccentNode/","title":"class AccentNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"accent\", nil, {\n  id = \"accent (21)\",\n  subtypes = {\n    \"bothflexible (0)\",\n    \"fixedtop (1)\",\n    \"fixedbottom (2)\",\n    \"fixedboth (3)\",\n  },\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"nucleus (4)\",\n    \"sub (5)\",\n    \"sup (6)\",\n    \"accent (7)\",\n    \"bot_accent (8)\",\n    \"top_accent (9)\",\n    \"overlay_accent (10)\",\n    \"fraction (11)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L714-L723</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/AccentNode/#fields","title":"fields","text":""},{"location":"types/AccentNode/#accentnodeattr","title":"AccentNode.attr","text":"<pre><code>AccentNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/AccentNode/#accentnodesubtype","title":"AccentNode.subtype","text":"<pre><code>AccentNode.subtype : AccentNodeSubtype\n</code></pre>"},{"location":"types/AccentNode/#accentnodenucleus","title":"AccentNode.nucleus","text":"<pre><code>AccentNode.nucleus : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>base</p>"},{"location":"types/AccentNode/#accentnodesub","title":"AccentNode.sub","text":"<pre><code>AccentNode.sub : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>subscript</p>"},{"location":"types/AccentNode/#accentnodesup","title":"AccentNode.sup","text":"<pre><code>AccentNode.sup : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>superscript</p>"},{"location":"types/AccentNode/#accentnodeaccent","title":"AccentNode.accent","text":"<pre><code>AccentNode.accent : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>top accent</p>"},{"location":"types/AccentNode/#accentnodebot_accent","title":"AccentNode.bot_accent","text":"<pre><code>AccentNode.bot_accent : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>bottom accent</p>"},{"location":"types/AccentNode/#accentnodetop_accent","title":"AccentNode.top_accent","text":"<pre><code>AccentNode.top_accent : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>top_accent</p>"},{"location":"types/AccentNode/#accentnodeoverlay_accent","title":"AccentNode.overlay_accent","text":"<pre><code>AccentNode.overlay_accent : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>overlay_accent</p>"},{"location":"types/AccentNode/#accentnodefraction","title":"AccentNode.fraction","text":"<pre><code>AccentNode.fraction : integer\n</code></pre> <p>larger step criterium (divided by 1000)</p>"},{"location":"types/AccentNodeSubtype/","title":"alias AccentNodeSubtype","text":"<pre><code>(alias) AccentNodeSubtype = (0|1|2|3)\n    | 0 -- bothflexible\n    | 1 -- fixedtop\n    | 2 -- fixedbottom\n    | 3 -- fixedboth\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L694-L697</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/AdjustNode/","title":"class AdjustNode","text":"<ul> <li>supers: Node</li> </ul> <p>An adjust node, which occurs only in horizontal lists, specifies material that will be moved out into the surrounding vertical list; i.e., it is used to implement TeX\u2019s <code>\\vadjust</code> operation.</p> <p>Example:</p> <pre><code>assert.node_type(\"adjust\", nil, {\n  id = \"adjust (5)\",\n  subtypes = { \"normal (0)\", \"pre (1)\" },\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"head (4)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L725-L727</li> <li>Donald Ervin Knuth. \u201cTeX: The Program\u201d: section 142, page 42 tex.pdf</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/AdjustNode/#fields","title":"fields","text":""},{"location":"types/AdjustNode/#adjustnodesubtype","title":"AdjustNode.subtype","text":"<pre><code>AdjustNode.subtype : AdjustNodeSubtype\n</code></pre>"},{"location":"types/AdjustNode/#adjustnodeattr","title":"AdjustNode.attr","text":"<pre><code>AdjustNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/AdjustNode/#adjustnodehead","title":"AdjustNode.head","text":"<pre><code>AdjustNode.head : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>adjusted material</p>"},{"location":"types/AdjustNode/#adjustnodelist","title":"AdjustNode.list","text":"<pre><code>AdjustNode.list : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>adjusted material</p>"},{"location":"types/AdjustNodeSubtype/","title":"alias AdjustNodeSubtype","text":"<pre><code>(alias) AdjustNodeSubtype = (0|1)\n    | 0 -- normal\n    | 1 -- pre\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L669-L670</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/AlignRecordNode/","title":"class AlignRecordNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"align_record\", nil, {\n  id = \"align_record (30)\",\n  fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\" },\n})\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/4f2b914d365bab8a2747afe6e8c86d0f1c8475f7/source/texk/web2c/luatexdir/tex/texnodes.c#L523</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/AlignStackNode/","title":"class AlignStackNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"align_stack\", nil, {\n  id = \"align_stack (42)\",\n  fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\" },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L481</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/AppendToVlistFilterCallback/","title":"alias AppendToVlistFilterCallback","text":"<pre><code>(alias) AppendToVlistFilterCallback = fun(box: Node, locationcode: AppendToVlistFilterLocationcode, prevdepth: integer, mirrored: boolean) -&gt; (Node,integer)\n</code></pre> <p>This callback is called whenever LuaTeX adds a box to a vertical list.</p> <p>It is ok to return nothing in which case you also need to flush the box or deal with it yourself. The prevdepth is also optional. You can pass <code>nil</code> instead of a node.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luanode.c#L164</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/AppendToVlistFilterLocationcode/","title":"alias AppendToVlistFilterLocationcode","text":"<pre><code>(alias) AppendToVlistFilterLocationcode = (\"box\"|\"alignment\"|\"equation\"|\"equation_number\"|\"post_linebreak\")\n    | \"box\"\n    | \"alignment\"\n    | \"equation\"\n    | \"equation_number\"\n    | \"post_linebreak\"\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/AttributeListNode/","title":"class AttributeListNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\n  \"attribute_list\",\n  nil,\n  { id = \"attribute_list (40)\", fields = { \"next (0)\", \"id (1)\" } }\n)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L733</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/AttributeNode/","title":"class AttributeNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"attribute\", nil, {\n  id = \"attribute (38)\",\n  fields = { \"next (0)\", \"id (1)\", \"number (2)\", \"value (3)\" },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L729-L731</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/AttributeNode/#fields","title":"fields","text":""},{"location":"types/AttributeNode/#attributenodenumber","title":"AttributeNode.number","text":"<pre><code>AttributeNode.number : integer\n</code></pre>"},{"location":"types/AttributeNode/#attributenodevalue","title":"AttributeNode.value","text":"<pre><code>AttributeNode.value : unknown\n</code></pre>"},{"location":"types/Blob/","title":"class Blob","text":"<p>Blobs wrap a chunk of binary data to handle lifecycle management of data while it is passed between client and HarfBuzz. Blobs are primarily used to create font faces, but also to access font face tables, as well as pass around other binary data.</p> <p>Wraps <code>hb_blob_t</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luaharfbuzz.h#L12</li> <li>HarfBuzz online documentation: hb_blob_t</li> </ul>"},{"location":"types/Blob/#methods","title":"methods","text":""},{"location":"types/Blob/#blobnew","title":"Blob.new","text":"<p><pre><code>function Blob.new(data: string) -&gt;  Blob {\n    new = function,\n    new_from_file = function,\n    get_length = function,\n    get_data = function,\n}\n</code></pre> @param <code>data</code> - A Lua string containing binary or character data.</p> <p>Create a new \"blob\" object wrapping data.</p> <p>Wraps <code>hb_blob_create</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: blob.c#L3-L14</li> <li>HarfBuzz online documentation: hb_blob_create</li> </ul>"},{"location":"types/Blob/#blobnew_from_file","title":"Blob.new_from_file","text":"<p><pre><code>function Blob.new_from_file(filename: string) -&gt;  Blob {\n    new = function,\n    new_from_file = function,\n    get_length = function,\n    get_data = function,\n}\n</code></pre> @param <code>filename</code> - lua string.</p> <p>Create a new blob containing the data from the specified binary font file.</p> <p>Wraps <code>hb_blob_create_from_file</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: blob.c#L16-L26</li> <li>HarfBuzz online documentation: hb_blob_create_from_file</li> </ul>"},{"location":"types/Blob/#blobget_length","title":"Blob.get_length","text":"<pre><code>function Blob.get_length() -&gt;  integer\n</code></pre> <p>Fetch the length of a blob's data.</p> <p>Wraps <code>hb_blob_get_length</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: blob.c#L28-L33</li> <li>HarfBuzz online documentation: hb_blob_get_length</li> </ul>"},{"location":"types/Blob/#blobget_data","title":"Blob.get_data","text":"<pre><code>function Blob.get_data() -&gt; data string\n</code></pre> <p>@return <code>data</code> - the byte data of blob as a string</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Fetch the data from a blob.</p> <p>Wraps <code>hb_blob_get_data</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: blob.c#L35-L44</li> <li>HarfBuzz online documentation: hb_blob_get_data</li> </ul>"},{"location":"types/BoundaryNode/","title":"class BoundaryNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"boundary\", nil, {\n  id = \"boundary (6)\",\n  subtypes = { \"cancel (0)\", \"user (1)\", \"protrusion (2)\", \"word (3)\" },\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"value (4)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L735-L737</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/BoundaryNode/#fields","title":"fields","text":""},{"location":"types/BoundaryNode/#boundarynodesubtype","title":"BoundaryNode.subtype","text":"<pre><code>BoundaryNode.subtype : BoundaryNodeSubtype\n</code></pre>"},{"location":"types/BoundaryNode/#boundarynodeattr","title":"BoundaryNode.attr","text":"<pre><code>BoundaryNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/BoundaryNode/#boundarynodevalue","title":"BoundaryNode.value","text":"<pre><code>BoundaryNode.value : integer\n</code></pre> <p>values 0-255 are reserved</p>"},{"location":"types/BoundaryNodeSubtype/","title":"alias BoundaryNodeSubtype","text":"<pre><code>(alias) BoundaryNodeSubtype = (0|1|2|3)\n    | 0 -- cancel\n    | 1 -- user\n    | 2 -- protrusion\n    | 3 -- word\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L582-L585</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/BuildPageInsertCallback/","title":"alias BuildPageInsertCallback","text":"<pre><code>(alias) BuildPageInsertCallback = fun(n: integer, i: integer) -&gt; integer\n</code></pre> <p>This callback is called when the pagebuilder adds an insert. There is not much control over this mechanism but this callback permits some last minute manipulations of the spacing before an insert, something that might be handy when for instance multiple inserts (types) are appended in a row.</p> <p>Reference:</p> <ul> <li><code>n</code>  the insert class</li> <li><code>i</code>  the order of the insert</li> </ul> <p>The return value is a number indicating the skip register to use for the prepended spacing. This permits for instance a different top space (when <code>i</code> equals one) and intermediate space (when <code>i</code> is larger than one). Of course you can mess with the insert box but you need to make sure that LuaTeX is happy afterwards.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: buildpage.c#L507</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/BuildpageFilterCallback/","title":"alias BuildpageFilterCallback","text":"<pre><code>(alias) BuildpageFilterCallback = fun(extrainfo: ContributeFilterExtrainfo)\n</code></pre> <p>Process objects as they are added to the main vertical list. The string argument gives some context.</p> <p>This callback is called whenever LuaTeX is ready to move stuff to the main vertical list. You can use this callback to do specialized manipulation of the page building stage like imposition or column balancing.</p> <p>The string <code>extrainfo</code> gives some additional information about what TeX's state is with respect to the \u201ccurrent page\u201d.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: align.c#L1281</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/BuildpageFilterExtrainfo/","title":"alias BuildpageFilterExtrainfo","text":"<pre><code>(alias) BuildpageFilterExtrainfo = (\"alignment\"|\"after_output\"|\"new_graf\"|\"vmode_par\"|\"hmode_par\"|\"insert\"|\"penalty\"|\"before_display\"|\"after_display\"|\"end\")\n    | \"alignment\" -- a (partial) alignment is being added\n    | \"after_output\" -- an output routine has just finished\n    | \"new_graf\" -- the beginning of a new paragraph\n    | \"vmode_par\" -- `par` was found in vertical mode\n    | \"hmode_par\" -- `par` was found in horizontal mode\n    | \"insert\" -- an insert is added\n    | \"penalty\" -- a penalty (in vertical mode)\n    | \"before_display\" -- immediately before a display starts\n    | \"after_display\" -- a display is finished\n    | \"end\" -- *LuaTeX* is terminating (it's all over)\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/CallEditCallback/","title":"alias CallEditCallback","text":"<pre><code>(alias) CallEditCallback = fun(filename: string, linenumber: integer)\n</code></pre> <p>This callback replaces the call to an external editor when \u201cE\u201d is pressed in reply to an error message. Processing will end immediately after the callback returns control to the main program.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: errors.c#L531</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/CallbackName/","title":"alias CallbackName","text":"<pre><code>(alias) CallbackName = (\"append_to_vlist_filter\"|\"build_page_insert\"|\"buildpage_filter\"|\"call_edit\"|\"contribute_filter\"|\"define_font\"|\"find_cidmap_file\"|\"find_data_file\"|\"find_enc_file\"|\"find_font_file\"...)\n    | \"append_to_vlist_filter\"\n    | \"build_page_insert\"\n    | \"buildpage_filter\"\n    | \"call_edit\"\n    | \"contribute_filter\"\n    | \"define_font\"\n    | \"find_cidmap_file\"\n    | \"find_data_file\"\n    | \"find_enc_file\"\n    | \"find_font_file\"\n    | \"find_format_file\"\n    | \"find_image_file\"\n    | \"find_map_file\"\n    | \"find_opentype_file\"\n    | \"find_output_file\"\n    | \"find_pk_file\"\n    | \"find_read_file\"\n    | \"find_truetype_file\"\n    | \"find_type1_file\"\n    | \"find_vf_file\"\n    | \"find_write_file\"\n    | \"finish_pdffile\"\n    | \"finish_pdfpage\"\n    | \"hpack_quality\"\n    | \"hyphenate\"\n    | \"input_level_string\"\n    | \"insert_local_par\"\n    | \"kerning\"\n    | \"ligaturing\"\n    | \"linebreak_filter\"\n    | \"make_extensible\"\n    | \"mlist_to_hlist\"\n    | \"new_graf\"\n    | \"open_read_file\"\n    | \"page_order_index\"\n    | \"post_linebreak_filter\"\n    | \"pre_dump\"\n    | \"pre_linebreak_filter\"\n    | \"pre_output_filter\"\n    | \"process_input_buffer\"\n    | \"process_jobname\"\n    | \"process_output_buffer\"\n    | \"process_pdf_image_content\"\n    | \"process_rule\"\n    | \"provide_charproc_data\"\n    | \"read_cidmap_file\"\n    | \"read_data_file\"\n    | \"read_enc_file\"\n    | \"read_font_file\"\n    | \"read_map_file\"\n    | \"read_opentype_file\"\n    | \"read_pk_file\"\n    | \"read_truetype_file\"\n    | \"read_type1_file\"\n    | \"read_vf_file\"\n    | \"show_error_hook\"\n    | \"show_error_message\"\n    | \"show_lua_error_hook\"\n    | \"show_warning_message\"\n    | \"start_file\"\n    | \"start_page_number\"\n    | \"start_run\"\n    | \"stop_file\"\n    | \"stop_page_number\"\n    | \"stop_run\"\n    | \"vpack_filter\"\n    | \"vpack_quality\"\n    | \"wrapup_run\"\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lcallbacklib.c#L33-L90</li> </ul> <p>Source: <code>callback.list()</code></p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Capture/","title":"alias Capture","text":"<pre><code>(alias) Capture = Pattern {\n    match: function,\n}\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/ChoiceNode/","title":"class ChoiceNode","text":"<ul> <li>supers: Node</li> </ul> <p>Warning: never assign a node list to the <code>display</code>, <code>text</code>, <code>script</code>, or <code>scriptscript</code> field unless you are sure its internal link structure is correct, otherwise an error can occur.</p> <p>Example:</p> <pre><code>assert.node_type(\"choice\", nil, {\n  id = \"choice (17)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"display (4)\",\n    \"text (5)\",\n    \"script (6)\",\n    \"scriptscript (7)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L739-L744</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/ChoiceNode/#fields","title":"fields","text":""},{"location":"types/ChoiceNode/#choicenodeattr","title":"ChoiceNode.attr","text":"<pre><code>ChoiceNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/ChoiceNode/#choicenodedisplay","title":"ChoiceNode.display","text":"<pre><code>ChoiceNode.display : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>list of display size alternatives</p>"},{"location":"types/ChoiceNode/#choicenodetext","title":"ChoiceNode.text","text":"<pre><code>ChoiceNode.text : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>list of text size alternatives</p>"},{"location":"types/ChoiceNode/#choicenodescript","title":"ChoiceNode.script","text":"<pre><code>ChoiceNode.script : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>list of scriptsize alternatives</p>"},{"location":"types/ChoiceNode/#choicenodescriptscript","title":"ChoiceNode.scriptscript","text":"<pre><code>ChoiceNode.scriptscript : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>list of scriptscriptsize alternatives</p>"},{"location":"types/CloseWhatsitNode/","title":"class CloseWhatsitNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"close\", {\n  id = \"whatsit (8)\",\n  subtype = \"close (2)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"stream (4)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L1018-L1020</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/CloseWhatsitNode/#fields","title":"fields","text":""},{"location":"types/CloseWhatsitNode/#closewhatsitnodeattr","title":"CloseWhatsitNode.attr","text":"<pre><code>CloseWhatsitNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/CloseWhatsitNode/#closewhatsitnodestream","title":"CloseWhatsitNode.stream","text":"<pre><code>CloseWhatsitNode.stream : integer\n</code></pre> <p>TeX's stream id number</p>"},{"location":"types/ContributeFilterCallback/","title":"alias ContributeFilterCallback","text":"<pre><code>(alias) ContributeFilterCallback = fun(extrainfo: ContributeFilterExtrainfo)\n</code></pre> <p>This callback is called when LuaTeX adds contents to list:</p> <p>The string reports the group code. From this you can deduce from what list you can give a treat.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luatexcallbackids.h#L163</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/ContributeFilterExtrainfo/","title":"alias ContributeFilterExtrainfo","text":"<pre><code>(alias) ContributeFilterExtrainfo = (\"pre_box\"|\"pre_adjust\"|\"box\"|\"adjust\")\n    | \"pre_box\" -- interline material is being added\n    | \"pre_adjust\" -- `vadjust` material is being added\n    | \"box\" -- a typeset box is being added (always called)\n    | \"adjust\" -- `vadjust` material is being added\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Datagram/","title":"alias Datagram","text":"<pre><code>(alias) Datagram = string\n</code></pre> <p>A string representing a datagram</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/DefineFontCallback/","title":"alias DefineFontCallback","text":"<pre><code>(alias) DefineFontCallback = fun(name: string, size: number, id: number) -&gt; (Font|integer)\n</code></pre> <p>Define a font from within lua code.</p> <p>The arguments are the user-supplied information, with negative numbers indicating <code>scaled</code>, positive numbers <code>at</code></p> <p>The string <code>name</code> is the filename part of the font specification, as given by the user.</p> <p>The number <code>size</code> is a bit special:</p> <ul> <li>If it is positive, it specifies an \u201cat size\u201d in scaled points.</li> <li>If it is negative, its absolute value represents a \u201cscaled\u201d setting relative to the designsize of the font.</li> </ul> <p>The <code>id</code> is the internal number assigned to the font.</p> <p>The internal structure of the <code>font</code> table that is to be returned is explained in chapter fonts. That table is saved internally, so you can put extra fields in the table for your later Lua code to use. In alternative, <code>retval</code> can be a previously defined fontid. This is useful if a previous definition can be reused instead of creating a whole new font structure.</p> <p>Setting this callback to <code>false</code> is pointless as it will prevent font loading completely but will nevertheless generate errors.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: dofont.c#L52</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/DelCode/","title":"alias DelCode","text":"<pre><code>(alias) DelCode = integer[]\n</code></pre> <p>The table for <code>delcode</code> (delimiter code) is an array with 4 numbers, like this:</p> <pre><code>{\n    -- small_family\n    -- small_character\n    -- large_family\n    -- large_character\n}\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/DelimNode/","title":"class DelimNode","text":"<ul> <li>supers: Node</li> </ul> <p>There is a fifth subnode type that is used exclusively for delimiter fields. As before, the <code>next</code> and <code>prev</code> fields are unused.</p> <p>The fields <code>large_char</code> and <code>large_fam</code> can be zero, in that case the font that is set for the <code>small_fam</code> is expected to provide the large version as an extension to the <code>small_char</code>.</p> <p>Example:</p> <pre><code>assert.node_type(\"delim\", nil, {\n  id = \"delim (27)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"small_fam (4)\",\n    \"small_char (5)\",\n    \"large_fam (6)\",\n    \"large_char (7)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L746-L751</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/DelimNode/#fields","title":"fields","text":""},{"location":"types/DelimNode/#delimnodeattr","title":"DelimNode.attr","text":"<pre><code>DelimNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/DelimNode/#delimnodesmall_char","title":"DelimNode.small_char","text":"<pre><code>DelimNode.small_char : integer\n</code></pre> <p>character index of base character</p>"},{"location":"types/DelimNode/#delimnodesmall_fam","title":"DelimNode.small_fam","text":"<pre><code>DelimNode.small_fam : integer\n</code></pre> <p>family number of base character</p>"},{"location":"types/DelimNode/#delimnodelarge_char","title":"DelimNode.large_char","text":"<pre><code>DelimNode.large_char : integer\n</code></pre> <p>character index of next larger character</p>"},{"location":"types/DelimNode/#delimnodelarge_fam","title":"DelimNode.large_fam","text":"<pre><code>DelimNode.large_fam : integer\n</code></pre> <p>family number of next larger character</p>"},{"location":"types/DeltaNode/","title":"class DeltaNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"delta\", nil, {\n  id = \"delta (47)\",\n  fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\" },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L486</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/DirNode/","title":"class DirNode","text":"<ul> <li>supers: Node</li> </ul> <p>Direction specifiers are three-letter combinations of <code>T</code>, <code>B</code>, <code>R</code>, and <code>L</code>. These are built up out of three separate items:</p> <ul> <li>the first is the direction of the \u201ctop\u201d of paragraphs</li> <li>the second is the direction of the \u201cstart\u201d of lines</li> <li>the third is the direction of the \u201ctop\u201d of glyphs</li> </ul> <p>However, only four combinations are accepted: <code>TLT</code>, <code>TRT</code>, <code>RTT</code>, and <code>LTL</code>. Inside actual <code>dir</code> nodes, the representation of <code>dir</code> is not a three-letter but a combination of numbers. When printed the direction is indicated by a <code>+</code> or <code>-</code>, indicating whether the value is pushed or popped from the direction stack.</p> <p>Example:</p> <pre><code>assert.node_type(\"dir\", nil, {\n  id = \"dir (10)\",\n  subtypes = { \"normal (0)\", \"cancel (1)\" },\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"dir (4)\",\n    \"level (5)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L753-L756</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/DirNode/#fields","title":"fields","text":""},{"location":"types/DirNode/#dirnodeattr","title":"DirNode.attr","text":"<pre><code>DirNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/DirNode/#dirnodedir","title":"DirNode.dir","text":"<pre><code>DirNode.dir : string\n</code></pre> <p>the direction (but see below)</p>"},{"location":"types/DirNode/#dirnodelevel","title":"DirNode.level","text":"<pre><code>DirNode.level : integer\n</code></pre> <p>nesting level of this direction whatsit</p>"},{"location":"types/DirectionParameter/","title":"alias DirectionParameter","text":"<pre><code>(alias) DirectionParameter = (\"bodydir\"|\"mathdir\"|\"pagedir\"|\"pardir\"|\"textdir\")\n    | \"bodydir\" -- The direction for vboxes, including the main body of text. Default: `TLT`.\n    | \"mathdir\" -- The direction for mathematics. Default: `TLT`.\n    | \"pagedir\" -- The direction for pages (`\\shipout`). Default: `TLT`.\n    | \"pardir\" -- The direction for paragraphs. Default: `TLT`.\n    | \"textdir\" -- The direction for text and hboxes. Default: `TLT`.\n</code></pre> <p>The direction parameters are read-only and return a Lua string.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L465-469</li> </ul>"},{"location":"types/DirectionSpecifier/","title":"alias DirectionSpecifier","text":"<pre><code>(alias) DirectionSpecifier = (\"TLT\"|\"TRT\"|\"LTL\"|\"RTT\")\n    | \"TLT\" -- 0 latin\n    | \"TRT\" -- 1 arabic\n    | \"LTL\" -- 2 mongolian\n    | \"RTT\" -- 3 cjk\n</code></pre> <p>LuaTeX only understands 4 of the 16 direction specifiers of aleph: <code>TLT</code> (latin), <code>TRT</code> (arabic), <code>RTT</code> (cjk), <code>LTL</code> (mongolian). All other direction specifiers generate an error.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/DirectionSpecifierId/","title":"alias DirectionSpecifierId","text":"<pre><code>(alias) DirectionSpecifierId = (0|1|2|3)\n    | 0 -- \"TLT\" latin\n    | 1 -- \"TRT\" arabic\n    | 2 -- \"LTL\" mongolian\n    | 3 -- \"RTT\" cjk\n</code></pre> <p>In addition to a keyword driven model we also provide an integer driven one.</p>"},{"location":"types/DiscNode/","title":"class DiscNode","text":"<ul> <li>supers: Node</li> </ul> <p>A disc node, which occurs only in horizontal lists, specifies a \u201cdiscretionary\u201d line break. If such a break occurs at a node, the text that starts at <code>pre</code> will precede the break, the text that starts at <code>post</code> will follow the break, and text that appears in <code>replace</code> will be ignored.</p> <p>Example:</p> <pre><code>assert.node_type(\"disc\", nil, {\n  id = \"disc (7)\",\n  subtypes = {\n    \"discretionary (0)\",\n    \"explicit (1)\",\n    \"automatic (2)\",\n    \"regular (3)\",\n    \"first (4)\",\n    \"second (5)\",\n  },\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"pre (4)\",\n    \"post (5)\",\n    \"replace (6)\",\n    \"penalty (7)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L758-L763</li> <li>Donald Ervin Knuth. \u201cTeX: The Program\u201d: section 145, page 53 tex.pdf</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/DiscNode/#fields","title":"fields","text":""},{"location":"types/DiscNode/#discnodesubtype","title":"DiscNode.subtype","text":"<pre><code>DiscNode.subtype : DiscNodeSubtype\n</code></pre>"},{"location":"types/DiscNode/#discnodeattr","title":"DiscNode.attr","text":"<pre><code>DiscNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/DiscNode/#discnodepre","title":"DiscNode.pre","text":"<pre><code>DiscNode.pre : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A pointer to the pre-break text.</p>"},{"location":"types/DiscNode/#discnodepost","title":"DiscNode.post","text":"<pre><code>DiscNode.post : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A pointer to the post-break text.</p>"},{"location":"types/DiscNode/#discnodereplace","title":"DiscNode.replace","text":"<pre><code>DiscNode.replace : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A pointer to the no-break text.</p>"},{"location":"types/DiscNode/#discnodepenalty","title":"DiscNode.penalty","text":"<pre><code>DiscNode.penalty : integer\n</code></pre> <p>The penalty associated with the break, normally <code>hyphenpenalty</code> or <code>exhyphenpenalty</code>.</p>"},{"location":"types/DiscNodeSubtype/","title":"alias DiscNodeSubtype","text":"<pre><code>(alias) DiscNodeSubtype = (0|1|2|3|4|5)\n    | 0 -- discretionary\n    | 1 -- explicit\n    | 2 -- automatic\n    | 3 -- regular\n    | 4 -- first\n    | 5 -- second\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L620-L625</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/ExprStackNode/","title":"class ExprStackNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"expr_stack\", nil, {\n  id = \"expr_stack (35)\",\n  fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\" },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L474</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FenceNode/","title":"class FenceNode","text":"<ul> <li>supers: Node</li> </ul> <p>Warning: some of these fields are used by the renderer and might get adapted in the process.</p> <p>Example:</p> <pre><code>assert.node_type(\"fence\", nil, {\n  id = \"fence (22)\",\n  subtypes = { \"unset (0)\", \"left (1)\", \"middle (2)\", \"right (3)\", \"no (4)\" },\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"delim (4)\",\n    \"italic (5)\",\n    \"height (6)\",\n    \"depth (7)\",\n    \"options (8)\",\n    \"class (9)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L765-L772</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FenceNode/#fields","title":"fields","text":""},{"location":"types/FenceNode/#fencenodesubtype","title":"FenceNode.subtype","text":"<pre><code>FenceNode.subtype : FenceNodeSubtype\n</code></pre>"},{"location":"types/FenceNode/#fencenodeattr","title":"FenceNode.attr","text":"<pre><code>FenceNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>list of attributes</p>"},{"location":"types/FenceNode/#fencenodedelim","title":"FenceNode.delim","text":"<pre><code>FenceNode.delim : DelimNode {\n    attr: Node,\n    small_char: integer,\n    small_fam: integer,\n    large_char: integer,\n    large_fam: integer,\n}\n</code></pre> <p>delimiter specification</p>"},{"location":"types/FenceNode/#fencenodeitalic","title":"FenceNode.italic","text":"<pre><code>FenceNode.italic : integer\n</code></pre> <p>italic correction</p>"},{"location":"types/FenceNode/#fencenodeheight","title":"FenceNode.height","text":"<pre><code>FenceNode.height : integer\n</code></pre> <p>required height</p>"},{"location":"types/FenceNode/#fencenodedepth","title":"FenceNode.depth","text":"<pre><code>FenceNode.depth : integer\n</code></pre> <p>required depth</p>"},{"location":"types/FenceNode/#fencenodeoptions","title":"FenceNode.options","text":"<pre><code>FenceNode.options : integer\n</code></pre> <p>bitset of rendering options</p>"},{"location":"types/FenceNode/#fencenodeclass","title":"FenceNode.class","text":"<pre><code>FenceNode.class : integer\n</code></pre> <p>spacing related class</p>"},{"location":"types/FenceNodeSubtype/","title":"alias FenceNodeSubtype","text":"<pre><code>(alias) FenceNodeSubtype = (0|1|2|3|4)\n    | 0 -- unset\n    | 1 -- left\n    | 2 -- middle\n    | 3 -- right\n    | 4 -- no\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L627-L631</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FindDataFileCallback/","title":"alias FindDataFileCallback","text":"<pre><code>(alias) FindDataFileCallback = fun(asked_name: string) -&gt; string?\n</code></pre> <p>Find an input data file for PDF attachment.</p> <p>Like <code>find_font_file</code>, but for embedded files (<code>\\pdfobj file '...'</code>).</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FindEncFileCallback/","title":"alias FindEncFileCallback","text":"<pre><code>(alias) FindEncFileCallback = fun(asked_name: string) -&gt; string?\n</code></pre> <p>Find a font encoding file.</p> <p>Like <code>find_font_file</code>, but for enc files.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FindFontFileCallback/","title":"alias FindFontFileCallback","text":"<pre><code>(alias) FindFontFileCallback = fun(asked_name: string) -&gt; string?\n</code></pre> <p>Find a font metrics file.</p> <p>The <code>asked_name</code> is an OTF or TFM font metrics file.</p> <p>Return <code>nil</code> if the file cannot be found.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FindFormatFileCallback/","title":"alias FindFormatFileCallback","text":"<pre><code>(alias) FindFormatFileCallback = fun(asked_name: string) -&gt; string?\n</code></pre> <p>Find the format file.</p> <p>The <code>asked_name</code> is a format file for reading (the format file for writing is always opened in the current directory).</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FindImageFileCallback/","title":"alias FindImageFileCallback","text":"<pre><code>(alias) FindImageFileCallback = fun(asked_name: string) -&gt; string?\n</code></pre> <p>Find an image file for inclusion.</p> <p>The <code>asked_name</code> is an image file. Your return value is used to open a file from the hard disk, so make sure you return something that is considered the name of a valid file by your operating system.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FindMapFileCallback/","title":"alias FindMapFileCallback","text":"<pre><code>(alias) FindMapFileCallback = fun(asked_name: string) -&gt; string?\n</code></pre> <p>Like <code>find_font_file</code>, but for map files.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FindOpentypeFileCallback/","title":"alias FindOpentypeFileCallback","text":"<pre><code>(alias) FindOpentypeFileCallback = fun(asked_name: string) -&gt; string?\n</code></pre> <p>Find an OpenType font file.</p> <p>Like <code>find_font_file</code>, but for OpenType font files.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FindOutputFileCallback/","title":"alias FindOutputFileCallback","text":"<pre><code>(alias) FindOutputFileCallback = fun(asked_name: string) -&gt; string?\n</code></pre> <p>The <code>asked_name</code> is the PDF or DVI file for writing.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FindPkFileCallback/","title":"alias FindPkFileCallback","text":"<pre><code>(alias) FindPkFileCallback = fun(asked_name: string, dpi: integer) -&gt; string?\n</code></pre> <p>Find a PK font bitmap file.</p> <p>Like <code>find_font_file</code>, but for pk bitmap files. This callback takes two arguments: <code>name</code> and <code>dpi</code>. In your callback you can decide to look for:</p> <pre><code>&lt;base res&gt;dpi/&lt;fontname&gt;.&lt;actual res&gt;pk\n</code></pre> <p>but other strategies are possible. It is up to you to find a \u201creasonable\u201d bitmap file to go with that specification.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FindReadFileCallback/","title":"alias FindReadFileCallback","text":"<pre><code>(alias) FindReadFileCallback = fun(id_number: integer, asked_name: string) -&gt; string?\n</code></pre> <p>Find a file for <code>input</code> (0) or <code>openin</code> (higher integers).</p> <p>Arguments:</p> <p>id_number</p> <p>This number is zero for the log or <code>input</code> files. For TeX's <code>read</code> or <code>write</code> the number is incremented by one, so <code>\\read0</code> becomes 1.</p> <p>asked_name</p> <p>This is the user-supplied filename, as found by <code>input</code>, <code>openin</code> or <code>openout</code>.</p> <p>Return value:</p> <p>actual_name</p> <p>This is the filename used. For the very first file that is read in by TeX, you have to make sure you return an <code>actual_name</code> that has an extension and that is suitable for use as <code>jobname</code>. If you don't, you will have to manually fix the name of the log file and output file after LuaTeX is finished, and an eventual format filename will become mangled. That is because these file names depend on the jobname.</p> <p>You have to return <code>nil</code> if the file cannot be found.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FindTruetypeFileCallback/","title":"alias FindTruetypeFileCallback","text":"<pre><code>(alias) FindTruetypeFileCallback = fun(asked_name: string) -&gt; string?\n</code></pre> <p>Find a TrueType font file.</p> <p>The <code>asked_name</code> is a font file. This callback is called while LuaTeX is building its internal list of needed font files, so the actual timing may surprise you. Your return value is later fed back into the matching <code>read_file</code> callback.</p> <p>Strangely enough, <code>find_type1_file</code> is also used for OpenType (OTF) fonts.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FindType1FileCallback/","title":"alias FindType1FileCallback","text":"<pre><code>(alias) FindType1FileCallback = fun(asked_name: string) -&gt; string?\n</code></pre> <p>Find an Type1 (PostScript) font file.</p> <p>The <code>asked_name</code> is a font file. This callback is called while LuaTeX is building its internal list of needed font files, so the actual timing may surprise you. Your return value is later fed back into the matching <code>read_file</code> callback.</p> <p>Strangely enough, <code>find_type1_file</code> is also used for OpenType (OTF) fonts.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FindVfFileCallback/","title":"alias FindVfFileCallback","text":"<pre><code>(alias) FindVfFileCallback = fun(asked_name: string) -&gt; string?\n</code></pre> <p>Find a VF (virtual font) file.</p> <p>Like <code>find_font_file</code>, but for virtual fonts. This applies to both ALEPH's OVF files and traditional Knuthian VF* files.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FindWriteFileCallback/","title":"alias FindWriteFileCallback","text":"<pre><code>(alias) FindWriteFileCallback = fun(id_number: integer, asked_name: string) -&gt; string?\n</code></pre> <p>Find a file for writing to the log file (0) or with <code>write</code> (higher integers).</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FinishPdffileCallback/","title":"alias FinishPdffileCallback","text":"<pre><code>(alias) FinishPdffileCallback = fun()\n</code></pre> <p>Run actions just before the PDF closing takes place.</p> <p>This callback is called when all document pages are already written to the PDF file and LuaTeX is about to finalize the output document structure. Its intended use is final update of PDF dictionaries such as <code>/Catalog</code> or <code>/Info</code>. The callback does not replace any code. There are neither arguments nor return values.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: pdfgen.c#L2244</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FinishPdfpageCallback/","title":"alias FinishPdfpageCallback","text":"<pre><code>(alias) FinishPdfpageCallback = fun(shippingout: string)\n</code></pre> <pre><code>function(shippingout)\nend\n</code></pre> <p>This callback is called after the PDF page stream has been assembled and before the page object gets finalized.</p> <ul> <li>Corresponding C source code: pdfgen.c#L1788</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FinishSynctexCallback/","title":"alias FinishSynctexCallback","text":"<pre><code>(alias) FinishSynctexCallback = fun()\n</code></pre> <p>This callback can be used to wrap up alternative synctex methods. It kicks in after the normal synctex finalizer (that happens to remove the synctex files after a run when native synctex is not enabled).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: mainbody.c#L668</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Font/","title":"class Font","text":"<p>All TeX fonts are represented to Lua code as tables, and internally as C code structures. All keys in the table below are saved in the internal font structure if they are present in the table returned by the <code>define_font</code> callback, or if they result from the normal tfm/vf reading routines if there is no <code>define_font</code> callback defined.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Font/#fields","title":"fields","text":""},{"location":"types/Font/#fontname","title":"Font.name","text":"<pre><code>Font.name : string\n</code></pre> <p>metric (file) name</p>"},{"location":"types/Font/#fontarea","title":"Font.area","text":"<pre><code>Font.area : string\n</code></pre> <p>(directory) location, typically empty</p>"},{"location":"types/Font/#fontused","title":"Font.used","text":"<pre><code>Font.used : boolean\n</code></pre> <p>Indicates usage (initial: false). The key <code>used</code> is set by the engine when a font is actively in use. This makes sure that the font's definition is written to the output file (DVI or PDF). The tfm reader sets it to false.</p>"},{"location":"types/Font/#fontcharacters","title":"Font.characters","text":"<pre><code>Font.characters : table&lt;integer,FontCharacter&gt;\n</code></pre> <p>the defined glyphs of this font</p>"},{"location":"types/Font/#fontchecksum","title":"Font.checksum","text":"<pre><code>Font.checksum : integer\n</code></pre> <p>default: 0</p>"},{"location":"types/Font/#fontdesignsize","title":"Font.designsize","text":"<pre><code>Font.designsize : integer\n</code></pre> <p>expected size (default: 655360 == 10pt)</p>"},{"location":"types/Font/#fontdirection","title":"Font.direction","text":"<pre><code>Font.direction : FontDirection\n</code></pre> <p>default: 0</p>"},{"location":"types/Font/#fontencodingbytes","title":"Font.encodingbytes","text":"<pre><code>Font.encodingbytes : integer\n</code></pre> <p>default: depends on <code>format</code></p>"},{"location":"types/Font/#fontencodingname","title":"Font.encodingname","text":"<pre><code>Font.encodingname : string\n</code></pre> <p>encoding name</p>"},{"location":"types/Font/#fontfonts","title":"Font.fonts","text":"<pre><code>Font.fonts : table\n</code></pre> <p>locally used fonts</p>"},{"location":"types/Font/#fontpsname","title":"Font.psname","text":"<pre><code>Font.psname : string\n</code></pre> <p>This is the PostScript fontname in the incoming font source, and it's used as fontname identifier in the PDF output. This has to be a valid string, e.g.\\ no spaces and such, as the backend will not do a cleanup. This gives complete control to the loader.</p>"},{"location":"types/Font/#fontfullname","title":"Font.fullname","text":"<pre><code>Font.fullname : string\n</code></pre> <p>output font name, used as a fallback in the PDF output if the <code>psname</code> is not set</p>"},{"location":"types/Font/#fontsubfont","title":"Font.subfont","text":"<pre><code>Font.subfont : number\n</code></pre> <p>default: 0, index in (<code>ttc</code>) font with multiple fonts. The <code>subfont</code> parameter can be used to specify the subfont in a <code>ttc</code> font. When given, it is used instead of the <code>psname</code> and <code>fullname</code> combination. The first subfont has number 1. A zero value signals using the names as lookup.</p>"},{"location":"types/Font/#fontheader","title":"Font.header","text":"<pre><code>Font.header : string\n</code></pre> <p>header comments, if any</p>"},{"location":"types/Font/#fonthyphenchar","title":"Font.hyphenchar","text":"<pre><code>Font.hyphenchar : integer\n</code></pre> <p>default: TeX's <code>hyphenchar</code></p>"},{"location":"types/Font/#fontparameters","title":"Font.parameters","text":"<pre><code>Font.parameters : FontParameters\n</code></pre> <p>default: 7 parameters, all zero</p>"},{"location":"types/Font/#fontsize","title":"Font.size","text":"<pre><code>Font.size : integer\n</code></pre> <p>the required scaling (by default the same as designsize)</p>"},{"location":"types/Font/#fontskewchar","title":"Font.skewchar","text":"<pre><code>Font.skewchar : integer\n</code></pre> <p>default: TeX's <code>skewchar</code></p>"},{"location":"types/Font/#fonttype","title":"Font.type","text":"<pre><code>Font.type : FontType\n</code></pre> <p>basic type of this font</p>"},{"location":"types/Font/#fontformat","title":"Font.format","text":"<pre><code>Font.format : FontFormat\n</code></pre> <p>disk format type</p>"},{"location":"types/Font/#fontembedding","title":"Font.embedding","text":"<pre><code>Font.embedding : FontEmbedding\n</code></pre> <p>PDF inclusion</p>"},{"location":"types/Font/#fontfilename","title":"Font.filename","text":"<pre><code>Font.filename : string\n</code></pre> <p>the name of the font on disk</p>"},{"location":"types/Font/#fonttounicode","title":"Font.tounicode","text":"<pre><code>Font.tounicode : integer\n</code></pre> <p>When this is set to 1 LuaTeX assumes per-glyph tounicode entries are present in the font.</p>"},{"location":"types/Font/#fontstretch","title":"Font.stretch","text":"<pre><code>Font.stretch : integer\n</code></pre> <p>the \u201cstretch\u201d value from <code>expandglyphsinfont</code></p>"},{"location":"types/Font/#fontshrink","title":"Font.shrink","text":"<pre><code>Font.shrink : integer\n</code></pre> <p>the \u201cshrink\u201d value from <code>expandglyphsinfont</code></p>"},{"location":"types/Font/#fontstep","title":"Font.step","text":"<pre><code>Font.step : integer\n</code></pre> <p>the \u201cstep\u201d value from <code>expandglyphsinfont</code></p>"},{"location":"types/Font/#fontexpansion_factor","title":"Font.expansion_factor","text":"<pre><code>Font.expansion_factor : integer\n</code></pre> <p>the actual expansion factor of an expanded font</p>"},{"location":"types/Font/#fontattributes","title":"Font.attributes","text":"<pre><code>Font.attributes : string\n</code></pre> <p>the <code>pdffontattr</code>. The key <code>attributes</code> can be used to set font attributes in the PDF file.</p>"},{"location":"types/Font/#fontcache","title":"Font.cache","text":"<pre><code>Font.cache : string\n</code></pre> <p>This key controls caching of the Lua table on the TeX end where <code>yes</code> means: use a reference to the table that is passed to LuaTeX (this is the default), and <code>no</code> means: don't store the table reference, don't cache any Lua data for this font while <code>renew</code> means: don't store the table reference, but save a reference to the table that is created at the first access to one of its fields in the font.</p>"},{"location":"types/Font/#fontnomath","title":"Font.nomath","text":"<pre><code>Font.nomath : boolean\n</code></pre> <p>This key allows a minor speedup for text fonts. If it is present and true, then LuaTeX will not check the character entries for math-specific keys.</p>"},{"location":"types/Font/#fontoldmath","title":"Font.oldmath","text":"<pre><code>Font.oldmath : boolean\n</code></pre> <p>This key flags a font as representing an old school TeX math font and disables the OpenType code path.</p>"},{"location":"types/Font/#fontslant","title":"Font.slant","text":"<pre><code>Font.slant : integer\n</code></pre> <p>This parameter will tilt the font and does the same as <code>SlantFont</code> in the map file for Type1 fonts.</p>"},{"location":"types/Font/#fontextend","title":"Font.extend","text":"<pre><code>Font.extend : integer\n</code></pre> <p>This parameter will scale the font horizontally and does the same as <code>ExtendFont</code> in the map file for Type1 fonts.</p>"},{"location":"types/Font/#fontsqueeze","title":"Font.squeeze","text":"<pre><code>Font.squeeze : integer\n</code></pre> <p>This parameter will scale the font vertically and has no equivalent in the map file.</p>"},{"location":"types/Font/#fontwidth","title":"Font.width","text":"<pre><code>Font.width : integer\n</code></pre> <p>The backend will inject PDF operators that set the penwidth. The value is (as usual in TeX) divided by 1000. It works with the <code>mode</code> file.</p>"},{"location":"types/Font/#fontmode","title":"Font.mode","text":"<pre><code>Font.mode : integer\n</code></pre> <p>The backend will inject PDF operators that relate to the drawing mode with 0 being a fill, 1 being an outline, 2 both draw and fill and 3 no painting at all.</p>"},{"location":"types/FontCharacter/","title":"class FontCharacter","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontCharacter/#fields","title":"fields","text":""},{"location":"types/FontCharacter/#fontcharacterwidth","title":"FontCharacter.width","text":"<pre><code>FontCharacter.width : integer\n</code></pre> <p>The character's width, in sp (default 0)</p>"},{"location":"types/FontCharacter/#fontcharacterheight","title":"FontCharacter.height","text":"<pre><code>FontCharacter.height : integer\n</code></pre> <p>The character's height, in sp (default 0)</p>"},{"location":"types/FontCharacter/#fontcharacterdepth","title":"FontCharacter.depth","text":"<pre><code>FontCharacter.depth : integer\n</code></pre> <p>The character's depth, in sp (default 0)</p>"},{"location":"types/FontCharacter/#fontcharacteritalic","title":"FontCharacter.italic","text":"<pre><code>FontCharacter.italic : integer\n</code></pre> <p>The character's italic correction, in sp (default zero)</p>"},{"location":"types/FontCharacter/#fontcharactertop_accent","title":"FontCharacter.top_accent","text":"<pre><code>FontCharacter.top_accent : integer\n</code></pre> <p>The character's top accent alignment place, in sp (default zero)</p>"},{"location":"types/FontCharacter/#fontcharacterbot_accent","title":"FontCharacter.bot_accent","text":"<pre><code>FontCharacter.bot_accent : integer\n</code></pre> <p>The character's bottom accent alignment place, in sp (default zero)</p>"},{"location":"types/FontCharacter/#fontcharacterleft_protruding","title":"FontCharacter.left_protruding","text":"<pre><code>FontCharacter.left_protruding : integer\n</code></pre> <p>The character's <code>lpcode</code></p>"},{"location":"types/FontCharacter/#fontcharacterright_protruding","title":"FontCharacter.right_protruding","text":"<pre><code>FontCharacter.right_protruding : integer\n</code></pre> <p>The character's <code>rpcode</code></p>"},{"location":"types/FontCharacter/#fontcharacterexpansion_factor","title":"FontCharacter.expansion_factor","text":"<pre><code>FontCharacter.expansion_factor : integer\n</code></pre> <p>The character's <code>efcode</code></p>"},{"location":"types/FontCharacter/#fontcharactertounicode","title":"FontCharacter.tounicode","text":"<pre><code>FontCharacter.tounicode : string\n</code></pre> <p>The character's Unicode equivalent(s), in UTF-8-16BE hexadecimal format</p>"},{"location":"types/FontCharacter/#fontcharacternext","title":"FontCharacter.next","text":"<pre><code>FontCharacter.next : integer\n</code></pre> <p>The \u201cnext larger\u201d character index</p>"},{"location":"types/FontCharacter/#fontcharacterextensible","title":"FontCharacter.extensible","text":"<pre><code>FontCharacter.extensible : FontCharacterExtensible {\n    top: integer,\n    mid: integer,\n    bot: integer,\n    rep: integer,\n}\n</code></pre> <p>The constituent parts of an extensible recipe</p>"},{"location":"types/FontCharacter/#fontcharactervert_variants","title":"FontCharacter.vert_variants","text":"<pre><code>FontCharacter.vert_variants : FontCharacterComponent[]\n</code></pre> <p>The constituent parts of a vertical variant set</p>"},{"location":"types/FontCharacter/#fontcharacterhoriz_variants","title":"FontCharacter.horiz_variants","text":"<pre><code>FontCharacter.horiz_variants : FontCharacterComponent[]\n</code></pre> <p>The constituent parts of a horizontal variant set</p>"},{"location":"types/FontCharacter/#fontcharacterkerns","title":"FontCharacter.kerns","text":"<pre><code>FontCharacter.kerns : table\n</code></pre> <p>The kerning information. The <code>kerns</code> table is a hash indexed by character index (and \u201ccharacter index\u201d is defined as either a non-negative integer or the string value <code>right_boundary</code>), with the values of the kerning to be applied, in scaled points.</p>"},{"location":"types/FontCharacter/#fontcharacterligatures","title":"FontCharacter.ligatures","text":"<pre><code>FontCharacter.ligatures : table&lt;(integer|\"right_boundary\"),FontCharacterLigature&gt;\n</code></pre> <p>The ligaturing information. The <code>ligatures</code> table is a hash indexed by character index (and \u201ccharacter index\u201d is defined as either a non-negative integer or the string value <code>right_boundary</code>), with the values being yet another small hash.</p>"},{"location":"types/FontCharacter/#fontcharactercommands","title":"FontCharacter.commands","text":"<pre><code>FontCharacter.commands : FontCharacterCommands\n</code></pre> <p>The virtual font commands</p>"},{"location":"types/FontCharacter/#fontcharactername","title":"FontCharacter.name","text":"<pre><code>FontCharacter.name : string\n</code></pre> <p>The character (PostScript) name</p>"},{"location":"types/FontCharacter/#fontcharacterindex","title":"FontCharacter.index","text":"<pre><code>FontCharacter.index : integer\n</code></pre> <p>The (OpenType or TrueType) font glyph index</p>"},{"location":"types/FontCharacter/#fontcharacterused","title":"FontCharacter.used","text":"<pre><code>FontCharacter.used : boolean\n</code></pre> <p>Already typeset (default: false)</p>"},{"location":"types/FontCharacter/#fontcharactermathkern","title":"FontCharacter.mathkern","text":"<pre><code>FontCharacter.mathkern : table\n</code></pre> <p>The math cut-in specifications</p>"},{"location":"types/FontCharacterCommands/","title":"alias FontCharacterCommands","text":"<pre><code>(alias) FontCharacterCommands = any[]\n</code></pre> command arguments type description <code>font</code> 1 number select a new font from the local `fonts table <code>char</code> 1 number typeset this character number from the current font, and move right by the character's width <code>node</code> 1 node output this node # (list), and move right by the width of this list <code>slot</code> 2 2 numbers a shortcut for the combination of a font and char command <code>push</code> 0 save current position <code>nop</code> 0 do nothing <code>pop</code> 0 pop position <code>rule</code> 2 2 numbers output a rule <code>ht*wd</code>, and move right. <code>down</code> 1 number move down on the page <code>right</code> 1 number move right on the page <code>special</code> 1 string output a <code>special</code> command <code>pdf</code> 2 2 strings output a PDF literal, the first string is one of <code>origin</code>, <code>page</code>, <code>text</code>, <code>font</code>, <code>direct</code> or <code>raw</code>; if you have one string only <code>origin</code> is assumed <code>lua</code> 1 string, function execute a Lua script when the glyph is embedded; in case of a function it gets the font id and character code passed <code>image</code> 1 image output an image (the argument can be either an <code>&lt;image&gt;</code> variable or an <code>image_spec</code> table) <code>comment</code> any any the arguments of this command are ignored <p>Example:</p> <pre><code>commands = {\n    { \"push\" },                     -- remember where we are\n    { \"right\", 5000 },              -- move right about 0.08pt\n    { \"font\", 3 },                  -- select the fonts[3] entry\n    { \"char\", 97 },                 -- place character 97 (ASCII 'a')\n -- { \"slot\", 2, 97 },              -- an alternative for the previous two\n    { \"pop\" },                      -- go all the way back\n    { \"down\", -200000 },            -- move upwards by about 3pt\n    { \"special\", \"pdf: 1 0 0 rg\" }  -- switch to red color\n -- { \"pdf\", \"origin\", \"1 0 0 rg\" } -- switch to red color (alternative)\n    { \"rule\", 500000, 20000 }       -- draw a bar\n    { \"special\", \"pdf: 0 g\" }       -- back to black\n -- { \"pdf\", \"origin\", \"0 g\" }      -- back to black (alternative)\n}\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontCharacterComponent/","title":"class FontCharacterComponent","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontCharacterComponent/#fields","title":"fields","text":""},{"location":"types/FontCharacterComponent/#fontcharactercomponentglyph","title":"FontCharacterComponent.glyph","text":"<pre><code>FontCharacterComponent.glyph : integer\n</code></pre> <p>The character index. Note that this is an encoding number, not a name.</p>"},{"location":"types/FontCharacterComponent/#fontcharactercomponentextender","title":"FontCharacterComponent.extender","text":"<pre><code>FontCharacterComponent.extender : integer\n</code></pre> <p>One (1) if this part is repeatable, zero (0) otherwise.</p>"},{"location":"types/FontCharacterComponent/#fontcharactercomponentstart","title":"FontCharacterComponent.start","text":"<pre><code>FontCharacterComponent.start : integer\n</code></pre> <p>The maximum overlap at the starting side (in scaled points).</p>"},{"location":"types/FontCharacterComponent/#fontcharactercomponentend","title":"FontCharacterComponent.end","text":"<pre><code>FontCharacterComponent.end : integer\n</code></pre> <p>The maximum overlap at the ending side (in scaled points).</p>"},{"location":"types/FontCharacterComponent/#fontcharactercomponentadvance","title":"FontCharacterComponent.advance","text":"<pre><code>FontCharacterComponent.advance : integer\n</code></pre> <p>The total advance width of this item. It can be zero or missing, then the natural size of the glyph for character <code>component</code> is used.</p>"},{"location":"types/FontCharacterExtensible/","title":"class FontCharacterExtensible","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontCharacterExtensible/#fields","title":"fields","text":""},{"location":"types/FontCharacterExtensible/#fontcharacterextensibletop","title":"FontCharacterExtensible.top","text":"<pre><code>FontCharacterExtensible.top : integer\n</code></pre> <p>The top character index.</p>"},{"location":"types/FontCharacterExtensible/#fontcharacterextensiblemid","title":"FontCharacterExtensible.mid","text":"<pre><code>FontCharacterExtensible.mid : integer\n</code></pre> <p>The middle character index.</p>"},{"location":"types/FontCharacterExtensible/#fontcharacterextensiblebot","title":"FontCharacterExtensible.bot","text":"<pre><code>FontCharacterExtensible.bot : integer\n</code></pre> <p>The bottom character index.</p>"},{"location":"types/FontCharacterExtensible/#fontcharacterextensiblerep","title":"FontCharacterExtensible.rep","text":"<pre><code>FontCharacterExtensible.rep : integer\n</code></pre> <p>The repeatable character index.</p>"},{"location":"types/FontCharacterLigature/","title":"class FontCharacterLigature","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontCharacterLigature/#fields","title":"fields","text":""},{"location":"types/FontCharacterLigature/#fontcharacterligaturetype","title":"FontCharacterLigature.type","text":"<pre><code>FontCharacterLigature.type : integer\n</code></pre> <p>the type of this ligature command, default 0</p>"},{"location":"types/FontCharacterLigature/#fontcharacterligaturechar","title":"FontCharacterLigature.char","text":"<pre><code>FontCharacterLigature.char : integer\n</code></pre> <p>the character index of the resultant ligature</p>"},{"location":"types/FontDirection/","title":"alias FontDirection","text":"<pre><code>(alias) FontDirection = (0|1|2|3|4|5|6|7|8|9...)\n    | 0 -- LT\n    | 1 -- LL\n    | 2 -- LB\n    | 3 -- LR\n    | 4 -- RT\n    | 5 -- RL\n    | 6 -- RB\n    | 7 -- RR\n    | 8 -- TT\n    | 9 -- TL\n    | 10 -- TB\n    | 11 -- TR\n    | 12 -- BT\n    | 13 -- BL\n    | 14 -- BB\n    | 15 -- BR\n</code></pre> <p>The <code>direction</code> is a number signalling the \u201cnormal\u201d direction for this font. There are sixteen possibilities.</p> <p>These are Omega-style direction abbreviations: the first character indicates the \u201cfirst\u201d edge of the character glyphs (the edge that is seen first in the writing direction), the second the \u201ctop\u201d side. Keep in mind that LuaTeX has a bit different directional model so these values are not used for anything.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontEmbedding/","title":"alias FontEmbedding","text":"<pre><code>(alias) FontEmbedding = ()\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontExtens/","title":"class FontExtens","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontExtens/#fields","title":"fields","text":""},{"location":"types/FontExtens/#fontextensascender","title":"FontExtens.ascender","text":"<pre><code>FontExtens.ascender : integer\n</code></pre> <p>typographic ascender.</p>"},{"location":"types/FontExtens/#fontextensdescender","title":"FontExtens.descender","text":"<pre><code>FontExtens.descender : integer\n</code></pre> <p>typographic descender.</p>"},{"location":"types/FontExtens/#fontextensline_gap","title":"FontExtens.line_gap","text":"<pre><code>FontExtens.line_gap : integer\n</code></pre> <p>line spacing gap.</p>"},{"location":"types/FontFormat/","title":"alias FontFormat","text":"<pre><code>(alias) FontFormat = ()\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontInfo/","title":"class FontInfo","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L2256-2283</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontInfo/#fields","title":"fields","text":""},{"location":"types/FontInfo/#fontinfofontname","title":"FontInfo.fontname","text":"<pre><code>FontInfo.fontname : string\n</code></pre> <p>The PostScript name of the font, for example <code>NimbusRoman-Regular</code>.</p>"},{"location":"types/FontInfo/#fontinfofullname","title":"FontInfo.fullname","text":"<pre><code>FontInfo.fullname : string\n</code></pre> <p>The formal name of the font, for example <code>NimbusRoman-Regular</code>.</p>"},{"location":"types/FontInfo/#fontinfofamilyname","title":"FontInfo.familyname","text":"<pre><code>FontInfo.familyname : string\n</code></pre> <p>The family name this font belongs to, for example <code>Nimbus Roman</code>.</p>"},{"location":"types/FontInfo/#fontinfoweight","title":"FontInfo.weight","text":"<pre><code>FontInfo.weight : string\n</code></pre> <p>A string indicating the color value of the font, for example <code>Book</code>.</p>"},{"location":"types/FontInfo/#fontinfoversion","title":"FontInfo.version","text":"<pre><code>FontInfo.version : string\n</code></pre> <p>The internal font version, for example <code>1.00</code>,</p>"},{"location":"types/FontInfo/#fontinfoitalicangle","title":"FontInfo.italicangle","text":"<pre><code>FontInfo.italicangle : number\n</code></pre> <p>The slant angle, for example <code>0.0</code>, <code>-12.0</code>, <code>-9.4626</code>, <code>-10.5</code>, <code>-15.5</code> or <code>11.0</code>.</p>"},{"location":"types/FontInfo/#fontinfounits_per_em","title":"FontInfo.units_per_em","text":"<pre><code>FontInfo.units_per_em : number\n</code></pre> <p><code>1000</code> for PostScript-based fonts, usually <code>2048</code> for TrueType, for example <code>1000</code>.</p>"},{"location":"types/FontInfo/#fontinfopfminfo","title":"FontInfo.pfminfo","text":"<pre><code>FontInfo.pfminfo : FontloaderPfminfo {\n    pfmset: integer,\n    winascent_add: integer,\n    windescent_add: integer,\n    hheadascent_add: integer,\n    hheaddescent_add: integer,\n    typoascent_add: integer,\n    typodescent_add: integer,\n    subsuper_set: integer,\n    panose_set: integer,\n    hheadset: integer,\n    vheadset: integer,\n    pfmfamily: integer,\n    ...(+34)\n}\n</code></pre>"},{"location":"types/FontInfo/#fontinfonames","title":"FontInfo.names","text":"<pre><code>FontInfo.names : FontloaderLangName {\n    lang: string,\n    names: FontloaderTrueTypeNames,\n}\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/a4b8e13d3879e95c21e1719af0c3e31722bedd4f/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2278-2282</p>"},{"location":"types/FontParameterKey/","title":"alias FontParameterKey","text":"<pre><code>(alias) FontParameterKey = ()\n</code></pre> <p>The <code>parameters</code> is a hash with mixed key types. There are seven possible string keys, as well as a number of integer indices (these start from 8 up). The seven strings are actually used instead of the bottom seven indices, because that gives a nicer user interface.</p> <p>The names and their internal remapping are:</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontParameters/","title":"alias FontParameters","text":"<pre><code>(alias) FontParameters = table&lt;(FontParameterKey|integer),any&gt;\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontType/","title":"alias FontType","text":"<pre><code>(alias) FontType = ()\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderAltuni/","title":"class FontloaderAltuni","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L692-L714</li> </ul> <p>An array of alternate Unicode values. Inside that array are hashes with:</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderAltuni/#fields","title":"fields","text":""},{"location":"types/FontloaderAltuni/#fontloaderaltuniunicode","title":"FontloaderAltuni.unicode","text":"<pre><code>FontloaderAltuni.unicode : number\n</code></pre> <p>this glyph is also used for this unicode</p>"},{"location":"types/FontloaderAltuni/#fontloaderaltunivariant","title":"FontloaderAltuni.variant","text":"<pre><code>FontloaderAltuni.variant : number\n</code></pre> <p>the alternative is driven by this unicode selector</p>"},{"location":"types/FontloaderAnchorClasses/","title":"class FontloaderAnchorClasses","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1448-L1452</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderAnchorClasses/#fields","title":"fields","text":""},{"location":"types/FontloaderAnchorClasses/#fontloaderanchorclassesname","title":"FontloaderAnchorClasses.name","text":"<pre><code>FontloaderAnchorClasses.name : string\n</code></pre> <p>a descriptive id of this anchor class</p>"},{"location":"types/FontloaderAnchorClasses/#fontloaderanchorclasseslookup","title":"FontloaderAnchorClasses.lookup","text":"<pre><code>FontloaderAnchorClasses.lookup : string\n</code></pre>"},{"location":"types/FontloaderAnchorClasses/#fontloaderanchorclassestype","title":"FontloaderAnchorClasses.type","text":"<pre><code>FontloaderAnchorClasses.type : unknown\n</code></pre> <p>type is actually a lookup subtype, not a feature name. Officially, these strings should be gpos_mark2mark etc.</p>"},{"location":"types/FontloaderAxismaps/","title":"class FontloaderAxismaps","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1820-L1839</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderAxismaps/#fields","title":"fields","text":""},{"location":"types/FontloaderAxismaps/#fontloaderaxismapsblends","title":"FontloaderAxismaps.blends","text":"<pre><code>FontloaderAxismaps.blends : table\n</code></pre> <p>an array of blend points</p>"},{"location":"types/FontloaderAxismaps/#fontloaderaxismapsdesigns","title":"FontloaderAxismaps.designs","text":"<pre><code>FontloaderAxismaps.designs : table\n</code></pre> <p>an array of design values</p>"},{"location":"types/FontloaderAxismaps/#fontloaderaxismapsmin","title":"FontloaderAxismaps.min","text":"<pre><code>FontloaderAxismaps.min : integer\n</code></pre>"},{"location":"types/FontloaderAxismaps/#fontloaderaxismapsdef","title":"FontloaderAxismaps.def","text":"<pre><code>FontloaderAxismaps.def : integer\n</code></pre>"},{"location":"types/FontloaderAxismaps/#fontloaderaxismapsmax","title":"FontloaderAxismaps.max","text":"<pre><code>FontloaderAxismaps.max : integer\n</code></pre>"},{"location":"types/FontloaderCidinfo/","title":"class FontloaderCidinfo","text":"<p>CID fonts (Character Identifier Fonts) were developed by Adobe to display Asian font formats with many different symbols. In CID fonts, CIDs (Character Identifiers) are used to address glyph descriptions within the font. A so-called CMap (Character Map) is used to establish correspondences between the CIDs and the character codes.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L2053-L2058</li> <li>https://www.compart.com/de/glossar/cid-fonts</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderCidinfo/#fields","title":"fields","text":""},{"location":"types/FontloaderCidinfo/#fontloadercidinforegistry","title":"FontloaderCidinfo.registry","text":"<pre><code>FontloaderCidinfo.registry : string\n</code></pre>"},{"location":"types/FontloaderCidinfo/#fontloadercidinfoordering","title":"FontloaderCidinfo.ordering","text":"<pre><code>FontloaderCidinfo.ordering : string\n</code></pre>"},{"location":"types/FontloaderCidinfo/#fontloadercidinfosupplement","title":"FontloaderCidinfo.supplement","text":"<pre><code>FontloaderCidinfo.supplement : integer\n</code></pre> <p>For example <code>0</code>.</p>"},{"location":"types/FontloaderCidinfo/#fontloadercidinfoversion","title":"FontloaderCidinfo.version","text":"<pre><code>FontloaderCidinfo.version : number\n</code></pre> <p>For example <code>0</code>.</p>"},{"location":"types/FontloaderEnc/","title":"class FontloaderEnc","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1284-L1336</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderEnc/#fields","title":"fields","text":""},{"location":"types/FontloaderEnc/#fontloaderencenc_name","title":"FontloaderEnc.enc_name","text":"<pre><code>FontloaderEnc.enc_name : string\n</code></pre>"},{"location":"types/FontloaderEnc/#fontloaderencchar_cnt","title":"FontloaderEnc.char_cnt","text":"<pre><code>FontloaderEnc.char_cnt : integer\n</code></pre>"},{"location":"types/FontloaderEnc/#fontloaderencchar_max","title":"FontloaderEnc.char_max","text":"<pre><code>FontloaderEnc.char_max : integer\n</code></pre>"},{"location":"types/FontloaderEnc/#fontloaderencunicode","title":"FontloaderEnc.unicode","text":"<pre><code>FontloaderEnc.unicode : integer[]\n</code></pre> <p>array of Unicode position numbers</p>"},{"location":"types/FontloaderEnc/#fontloaderencpsnames","title":"FontloaderEnc.psnames","text":"<pre><code>FontloaderEnc.psnames : string[]\n</code></pre> <p>array of PostScript glyph names</p>"},{"location":"types/FontloaderEnc/#fontloaderencbuiltin","title":"FontloaderEnc.builtin","text":"<pre><code>FontloaderEnc.builtin : integer\n</code></pre>"},{"location":"types/FontloaderEnc/#fontloaderenchidden","title":"FontloaderEnc.hidden","text":"<pre><code>FontloaderEnc.hidden : integer\n</code></pre>"},{"location":"types/FontloaderEnc/#fontloaderenconly_1byte","title":"FontloaderEnc.only_1byte","text":"<pre><code>FontloaderEnc.only_1byte : integer\n</code></pre>"},{"location":"types/FontloaderEnc/#fontloaderenchas_1byte","title":"FontloaderEnc.has_1byte","text":"<pre><code>FontloaderEnc.has_1byte : integer\n</code></pre>"},{"location":"types/FontloaderEnc/#fontloaderenchas_2byte","title":"FontloaderEnc.has_2byte","text":"<pre><code>FontloaderEnc.has_2byte : integer\n</code></pre>"},{"location":"types/FontloaderEnc/#fontloaderencis_unicodebmp","title":"FontloaderEnc.is_unicodebmp","text":"<pre><code>FontloaderEnc.is_unicodebmp : integer\n</code></pre> <p>only if non-zero</p>"},{"location":"types/FontloaderEnc/#fontloaderencis_unicodefull","title":"FontloaderEnc.is_unicodefull","text":"<pre><code>FontloaderEnc.is_unicodefull : integer\n</code></pre> <p>only if non-zero</p>"},{"location":"types/FontloaderEnc/#fontloaderencis_custom","title":"FontloaderEnc.is_custom","text":"<pre><code>FontloaderEnc.is_custom : integer\n</code></pre> <p>only if non-zero</p>"},{"location":"types/FontloaderEnc/#fontloaderencis_original","title":"FontloaderEnc.is_original","text":"<pre><code>FontloaderEnc.is_original : integer\n</code></pre> <p>only if non-zero</p>"},{"location":"types/FontloaderEnc/#fontloaderencis_compact","title":"FontloaderEnc.is_compact","text":"<pre><code>FontloaderEnc.is_compact : integer\n</code></pre> <p>only if non-zero</p>"},{"location":"types/FontloaderEnc/#fontloaderencis_japanese","title":"FontloaderEnc.is_japanese","text":"<pre><code>FontloaderEnc.is_japanese : integer\n</code></pre> <p>only if non-zero</p>"},{"location":"types/FontloaderEnc/#fontloaderencis_korean","title":"FontloaderEnc.is_korean","text":"<pre><code>FontloaderEnc.is_korean : integer\n</code></pre> <p>only if non-zero</p>"},{"location":"types/FontloaderEnc/#fontloaderencis_tradchinese","title":"FontloaderEnc.is_tradchinese","text":"<pre><code>FontloaderEnc.is_tradchinese : integer\n</code></pre> <p>only if non-zero [name?]</p>"},{"location":"types/FontloaderEnc/#fontloaderencis_simplechinese","title":"FontloaderEnc.is_simplechinese","text":"<pre><code>FontloaderEnc.is_simplechinese : integer\n</code></pre> <p>only if non-zero</p>"},{"location":"types/FontloaderEnc/#fontloaderenclow_page","title":"FontloaderEnc.low_page","text":"<pre><code>FontloaderEnc.low_page : integer\n</code></pre>"},{"location":"types/FontloaderEnc/#fontloaderenchigh_page","title":"FontloaderEnc.high_page","text":"<pre><code>FontloaderEnc.high_page : integer\n</code></pre>"},{"location":"types/FontloaderEnc/#fontloaderenciconv_name","title":"FontloaderEnc.iconv_name","text":"<pre><code>FontloaderEnc.iconv_name : string\n</code></pre>"},{"location":"types/FontloaderEnc/#fontloaderenciso_2022_escape","title":"FontloaderEnc.iso_2022_escape","text":"<pre><code>FontloaderEnc.iso_2022_escape : string\n</code></pre>"},{"location":"types/FontloaderFont/","title":"class FontloaderFont","text":"<p>Example:</p> <pre><code>local f = fontloader.open('/usr/share/fonts/opentype/urw-base35/NimbusRoman-Regular.otf')\n\nfor _, value in ipairs(fontloader.fields(f)) do\n    print(value, f[value])\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1899-2241</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderFont/#fields","title":"fields","text":""},{"location":"types/FontloaderFont/#fontloaderfonttable_version","title":"FontloaderFont.table_version","text":"<pre><code>FontloaderFont.table_version : string\n</code></pre> <p>Indicates the metrics version (currently <code>0.3</code>), for example <code>0.5</code>; Corresponding C source code: luafflib.c#L2772-L2774.</p>"},{"location":"types/FontloaderFont/#fontloaderfontfontname","title":"FontloaderFont.fontname","text":"<pre><code>FontloaderFont.fontname : string\n</code></pre> <p>The PostScript font name, for example <code>NimbusRoman-Regular</code>; Corresponding C source code: luafflib.c#L2775-L2777.</p>"},{"location":"types/FontloaderFont/#fontloaderfontfullname","title":"FontloaderFont.fullname","text":"<pre><code>FontloaderFont.fullname : string\n</code></pre> <p>The official (human-oriented) font name, for example <code>Nimbus Roman Regular</code>; Corresponding C source code: luafflib.c#L2778-L2780.</p>"},{"location":"types/FontloaderFont/#fontloaderfontfamilyname","title":"FontloaderFont.familyname","text":"<pre><code>FontloaderFont.familyname : string\n</code></pre> <p>The family name, for example <code>Nimbus Roman</code>; Corresponding C source code: luafflib.c#L2781-L2783.</p>"},{"location":"types/FontloaderFont/#fontloaderfontweight","title":"FontloaderFont.weight","text":"<pre><code>FontloaderFont.weight : string\n</code></pre> <p>The weight indicator, for example <code>Regular</code>; Corresponding C source code: luafflib.c#L2784-L2786.</p>"},{"location":"types/FontloaderFont/#fontloaderfontcopyright","title":"FontloaderFont.copyright","text":"<pre><code>FontloaderFont.copyright : string\n</code></pre> <p>The copyright information, for example <code>Copyright (URW)++,Copyright 2014 by (URW)++ Design &amp; Development</code>; Corresponding C source code: luafflib.c#L2787-L2789.</p>"},{"location":"types/FontloaderFont/#fontloaderfontfilename","title":"FontloaderFont.filename","text":"<pre><code>FontloaderFont.filename : string\n</code></pre> <p>The file name; Corresponding C source code: luafflib.c#L2790-L2792.</p>"},{"location":"types/FontloaderFont/#fontloaderfontversion","title":"FontloaderFont.version","text":"<pre><code>FontloaderFont.version : string\n</code></pre> <p>The font version; Corresponding C source code: luafflib.c#L2793-L2795.</p>"},{"location":"types/FontloaderFont/#fontloaderfontitalicangle","title":"FontloaderFont.italicangle","text":"<pre><code>FontloaderFont.italicangle : integer\n</code></pre> <p>The slant angle; Corresponding C source code: luafflib.c#L2796-L2798</p>"},{"location":"types/FontloaderFont/#fontloaderfontunits_per_em","title":"FontloaderFont.units_per_em","text":"<pre><code>FontloaderFont.units_per_em : integer\n</code></pre> <p><code>1000</code> for PostScript-based fonts, usually <code>2048</code> for TrueType; Corresponding C source code: luafflib.c#L2827-L2829.</p>"},{"location":"types/FontloaderFont/#fontloaderfontascent","title":"FontloaderFont.ascent","text":"<pre><code>FontloaderFont.ascent : integer\n</code></pre> <p>The height of ascender in <code>units_per_em</code>; Corresponding C source code: luafflib.c#L2805-L2807. https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2808-L2810</p>"},{"location":"types/FontloaderFont/#fontloaderfontdescent","title":"FontloaderFont.descent","text":"<pre><code>FontloaderFont.descent : integer\n</code></pre> <p>The depth of descender in <code>units_per_em</code>; Corresponding C source code: luafflib.c#L2808-L2810.</p>"},{"location":"types/FontloaderFont/#fontloaderfontupos","title":"FontloaderFont.upos","text":"<pre><code>FontloaderFont.upos : integer\n</code></pre> <p>Corresponding C source code: luafflib.c#L2799-L2801</p>"},{"location":"types/FontloaderFont/#fontloaderfontuwidth","title":"FontloaderFont.uwidth","text":"<pre><code>FontloaderFont.uwidth : integer\n</code></pre> <p>Corresponding C source code: luafflib.c#L2802-L2804</p>"},{"location":"types/FontloaderFont/#fontloaderfontuniqueid","title":"FontloaderFont.uniqueid","text":"<pre><code>FontloaderFont.uniqueid : integer\n</code></pre> <p>Corresponding C source code: luafflib.c#L2811-L2813</p>"},{"location":"types/FontloaderFont/#fontloaderfontglyphs","title":"FontloaderFont.glyphs","text":"<pre><code>FontloaderFont.glyphs : FontloaderGlyph[]\n</code></pre> <p>The <code>glyphs</code> is an array containing the per-character information (quite a few of these are only present if non-zero); Corresponding C source code: luafflib.c#L2838-L2845.</p>"},{"location":"types/FontloaderFont/#fontloaderfontglyphcnt","title":"FontloaderFont.glyphcnt","text":"<pre><code>FontloaderFont.glyphcnt : integer\n</code></pre> <p>The number of included glyphs; Corresponding C source code: luafflib.c#L2814-L2820.</p>"},{"location":"types/FontloaderFont/#fontloaderfontglyphmax","title":"FontloaderFont.glyphmax","text":"<pre><code>FontloaderFont.glyphmax : integer\n</code></pre> <p>The maximum used index the glyphs array; Corresponding C source code: luafflib.c#L2821-L2823.</p>"},{"location":"types/FontloaderFont/#fontloaderfontglyphmin","title":"FontloaderFont.glyphmin","text":"<pre><code>FontloaderFont.glyphmin : integer\n</code></pre> <p>The minimum used index the glyphs array; Corresponding C source code: luafflib.c#L2824-L2826.</p>"},{"location":"types/FontloaderFont/#fontloaderfontnotdef_loc","title":"FontloaderFont.notdef_loc","text":"<pre><code>FontloaderFont.notdef_loc : integer\n</code></pre> <p>The location of the <code>.notdef</code> glyph or <code>-1</code> when not present, for example <code>0</code>, <code>-1</code>, <code>854</code>; Corresponding C source code: luafflib.c#L1920.</p>"},{"location":"types/FontloaderFont/#fontloaderfonthasvmetrics","title":"FontloaderFont.hasvmetrics","text":"<pre><code>FontloaderFont.hasvmetrics : integer\n</code></pre> <p>Corresponding C source code: luafflib.c#L2846-L2848.</p>"},{"location":"types/FontloaderFont/#fontloaderfontonlybitmaps","title":"FontloaderFont.onlybitmaps","text":"<pre><code>FontloaderFont.onlybitmaps : integer\n</code></pre> <p>Corresponding C source code: luafflib.c#L2849-L2851.</p>"},{"location":"types/FontloaderFont/#fontloaderfontserifcheck","title":"FontloaderFont.serifcheck","text":"<pre><code>FontloaderFont.serifcheck : integer\n</code></pre> <p>Corresponding C source code: luafflib.c#L2852-L2854.</p>"},{"location":"types/FontloaderFont/#fontloaderfontisserif","title":"FontloaderFont.isserif","text":"<pre><code>FontloaderFont.isserif : integer\n</code></pre> <p>Corresponding C source code: luafflib.c#L2855-L2857.</p>"},{"location":"types/FontloaderFont/#fontloaderfontissans","title":"FontloaderFont.issans","text":"<pre><code>FontloaderFont.issans : integer\n</code></pre> <p>Corresponding C source code: luafflib.c#L2858-L2860.</p>"},{"location":"types/FontloaderFont/#fontloaderfontencodingchanged","title":"FontloaderFont.encodingchanged","text":"<pre><code>FontloaderFont.encodingchanged : integer\n</code></pre> <p>Corresponding C source code: luafflib.c#L2861-L2863.</p>"},{"location":"types/FontloaderFont/#fontloaderfontstrokedfont","title":"FontloaderFont.strokedfont","text":"<pre><code>FontloaderFont.strokedfont : integer\n</code></pre> <p>Corresponding C source code: luafflib.c#L2864-L2866.</p>"},{"location":"types/FontloaderFont/#fontloaderfontuse_typo_metrics","title":"FontloaderFont.use_typo_metrics","text":"<pre><code>FontloaderFont.use_typo_metrics : integer\n</code></pre> <p>Corresponding C source code: luafflib.c#L2867-L2869.</p>"},{"location":"types/FontloaderFont/#fontloaderfontweight_width_slope_only","title":"FontloaderFont.weight_width_slope_only","text":"<pre><code>FontloaderFont.weight_width_slope_only : integer\n</code></pre> <p>Corresponding C source code: luafflib.c#L2870-L2872.</p>"},{"location":"types/FontloaderFont/#fontloaderfonthead_optimized_for_cleartype","title":"FontloaderFont.head_optimized_for_cleartype","text":"<pre><code>FontloaderFont.head_optimized_for_cleartype : integer\n</code></pre> <p>Corresponding C source code: luafflib.c#L2873-L2875.</p>"},{"location":"types/FontloaderFont/#fontloaderfontuni_interp","title":"FontloaderFont.uni_interp","text":"<pre><code>FontloaderFont.uni_interp : unknown\n</code></pre> <p>for example <code>none</code>; Corresponding C source code: luafflib.c#L2876-L2878.</p>"},{"location":"types/FontloaderFont/#fontloaderfontorigname","title":"FontloaderFont.origname","text":"<pre><code>FontloaderFont.origname : string\n</code></pre> <p>The file name, as supplied by the user; Corresponding C source code: luafflib.c#L2887-L2889.</p>"},{"location":"types/FontloaderFont/#fontloaderfontmap","title":"FontloaderFont.map","text":"<pre><code>FontloaderFont.map : FontloaderMap {\n    enccount: integer,\n    encmax: integer,\n    backmax: integer,\n    remap: FontloaderRemap,\n    map: table&lt;integer,integer&gt;,\n    backmap: integer[],\n    enc: FontloaderEnc,\n}\n</code></pre> <p>Corresponding C source code: luafflib.c#L2879-L2886.</p>"},{"location":"types/FontloaderFont/#fontloaderfontprivate","title":"FontloaderFont.private","text":"<pre><code>FontloaderFont.private : FontloaderPrivate\n</code></pre> <p>Corresponding C source code: luafflib.c#L2890-L2897.</p>"},{"location":"types/FontloaderFont/#fontloaderfontxuid","title":"FontloaderFont.xuid","text":"<pre><code>FontloaderFont.xuid : string\n</code></pre> <p><code>[1021 618 1197637146 7437765]</code>; Corresponding C source code: luafflib.c#L2041.</p>"},{"location":"types/FontloaderFont/#fontloaderfontpfminfo","title":"FontloaderFont.pfminfo","text":"<pre><code>FontloaderFont.pfminfo : FontloaderPfminfo {\n    pfmset: integer,\n    winascent_add: integer,\n    windescent_add: integer,\n    hheadascent_add: integer,\n    hheaddescent_add: integer,\n    typoascent_add: integer,\n    typodescent_add: integer,\n    subsuper_set: integer,\n    panose_set: integer,\n    hheadset: integer,\n    vheadset: integer,\n    pfmfamily: integer,\n    ...(+34)\n}\n</code></pre> <p>Corresponding C source code: luafflib.c#L2901-L2904.</p>"},{"location":"types/FontloaderFont/#fontloaderfontnames","title":"FontloaderFont.names","text":"<pre><code>FontloaderFont.names : FontloaderLangName {\n    lang: string,\n    names: FontloaderTrueTypeNames,\n}\n</code></pre> <p>Corresponding C source code: luafflib.c#L2905-L2912</p>"},{"location":"types/FontloaderFont/#fontloaderfontcidinfo","title":"FontloaderFont.cidinfo","text":"<pre><code>FontloaderFont.cidinfo : FontloaderCidinfo {\n    registry: string,\n    ordering: string,\n    supplement: integer,\n    version: number,\n}\n</code></pre> <p>Corresponding C source code: luafflib.c#L2913-L2919.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2920-L2930</p>"},{"location":"types/FontloaderFont/#fontloaderfontsubfonts","title":"FontloaderFont.subfonts","text":"<pre><code>FontloaderFont.subfonts : table?\n</code></pre>"},{"location":"types/FontloaderFont/#fontloaderfontcommments","title":"FontloaderFont.commments","text":"<pre><code>FontloaderFont.commments : string?\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2931-L2933</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2934-L2936</p>"},{"location":"types/FontloaderFont/#fontloaderfontfontlog","title":"FontloaderFont.fontlog","text":"<pre><code>FontloaderFont.fontlog : string?\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2937-L2947</p>"},{"location":"types/FontloaderFont/#fontloaderfontcvt_names","title":"FontloaderFont.cvt_names","text":"<pre><code>FontloaderFont.cvt_names : table?\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2979-L2986</p>"},{"location":"types/FontloaderFont/#fontloaderfontanchor_classes","title":"FontloaderFont.anchor_classes","text":"<pre><code>FontloaderFont.anchor_classes : FontloaderAnchorClasses {\n    name: string,\n    lookup: string,\n    type: unknown,\n}\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2948-L2955</p>"},{"location":"types/FontloaderFont/#fontloaderfontttf_tables","title":"FontloaderFont.ttf_tables","text":"<pre><code>FontloaderFont.ttf_tables : FontloaderTtfTables?\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2956-L2963</p>"},{"location":"types/FontloaderFont/#fontloaderfontttf_tab_saved","title":"FontloaderFont.ttf_tab_saved","text":"<pre><code>FontloaderFont.ttf_tab_saved : FontloaderTtfTables?\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2964-L2978</p>"},{"location":"types/FontloaderFont/#fontloaderfonttexdata","title":"FontloaderFont.texdata","text":"<pre><code>FontloaderFont.texdata : FontloaderTexdata?\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2987-L2994</p>"},{"location":"types/FontloaderFont/#fontloaderfontkerns","title":"FontloaderFont.kerns","text":"<pre><code>FontloaderFont.kerns : FontloaderGlyph[]?\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2995-L3002</p>"},{"location":"types/FontloaderFont/#fontloaderfontvkerns","title":"FontloaderFont.vkerns","text":"<pre><code>FontloaderFont.vkerns : FontloaderGlyph[]?\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2830-L2837</p>"},{"location":"types/FontloaderFont/#fontloaderfontlookups","title":"FontloaderFont.lookups","text":"<pre><code>FontloaderFont.lookups : FontloaderLockup {\n    type: string,\n    format: unknown,\n    tag: string,\n    current_class: string[],\n    before_class: string[],\n    after_class: string[],\n    rules: FontloaderLockupRule[],\n}\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L3011-L3018</p>"},{"location":"types/FontloaderFont/#fontloaderfontgpos","title":"FontloaderFont.gpos","text":"<pre><code>FontloaderFont.gpos : FontloaderGpos {\n    type: unknown,\n}\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L3019-L3026</p>"},{"location":"types/FontloaderFont/#fontloaderfontgsub","title":"FontloaderFont.gsub","text":"<pre><code>FontloaderFont.gsub : FontloaderGsub?\n</code></pre>"},{"location":"types/FontloaderFont/#fontloaderfontfeatures","title":"FontloaderFont.features","text":"<pre><code>FontloaderFont.features : nil\n</code></pre>"},{"location":"types/FontloaderFont/#fontloaderfontmm","title":"FontloaderFont.mm","text":"<pre><code>FontloaderFont.mm : FontloaderMm?\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L3019-L3026</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L3027-L3029</p>"},{"location":"types/FontloaderFont/#fontloaderfontchosenname","title":"FontloaderFont.chosenname","text":"<pre><code>FontloaderFont.chosenname : string?\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L3030-L3032</p>"},{"location":"types/FontloaderFont/#fontloaderfontmacstyle","title":"FontloaderFont.macstyle","text":"<pre><code>FontloaderFont.macstyle : integer\n</code></pre> <p>for example <code>-1</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L3033-L3035</p>"},{"location":"types/FontloaderFont/#fontloaderfontfondname","title":"FontloaderFont.fondname","text":"<pre><code>FontloaderFont.fondname : string?\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L3036-L3038</p>"},{"location":"types/FontloaderFont/#fontloaderfontdesign_size","title":"FontloaderFont.design_size","text":"<pre><code>FontloaderFont.design_size : integer\n</code></pre> <p>for example <code>0</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L3039-L3041</p>"},{"location":"types/FontloaderFont/#fontloaderfontfontstyle_id","title":"FontloaderFont.fontstyle_id","text":"<pre><code>FontloaderFont.fontstyle_id : integer\n</code></pre> <p>for example <code>0</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L3042-L3049</p>"},{"location":"types/FontloaderFont/#fontloaderfontfontstyle_name","title":"FontloaderFont.fontstyle_name","text":"<pre><code>FontloaderFont.fontstyle_name : table?\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2155</p>"},{"location":"types/FontloaderFont/#fontloaderfontdesign_range_bottom","title":"FontloaderFont.design_range_bottom","text":"<pre><code>FontloaderFont.design_range_bottom : integer\n</code></pre> <p>for example <code>0</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L3053-L3055</p>"},{"location":"types/FontloaderFont/#fontloaderfontdesign_range_top","title":"FontloaderFont.design_range_top","text":"<pre><code>FontloaderFont.design_range_top : integer\n</code></pre> <p>for example <code>0</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L3056-L3058</p>"},{"location":"types/FontloaderFont/#fontloaderfontstrokewidth","title":"FontloaderFont.strokewidth","text":"<pre><code>FontloaderFont.strokewidth : integer\n</code></pre> <p>for example <code>0</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L3059-L3072</p>"},{"location":"types/FontloaderFont/#fontloaderfontmark_classes","title":"FontloaderFont.mark_classes","text":"<pre><code>FontloaderFont.mark_classes : FontloaderMarkClasses?\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2171</p>"},{"location":"types/FontloaderFont/#fontloaderfontcreationtime","title":"FontloaderFont.creationtime","text":"<pre><code>FontloaderFont.creationtime : integer\n</code></pre> <p>for example <code>1495029639</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2172</p>"},{"location":"types/FontloaderFont/#fontloaderfontmodificationtime","title":"FontloaderFont.modificationtime","text":"<pre><code>FontloaderFont.modificationtime : integer\n</code></pre> <p>for example <code>1495029639</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2174</p>"},{"location":"types/FontloaderFont/#fontloaderfontos2_version","title":"FontloaderFont.os2_version","text":"<pre><code>FontloaderFont.os2_version : integer\n</code></pre> <p>for example <code>3</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L1705-L1764</p>"},{"location":"types/FontloaderFont/#fontloaderfontmath","title":"FontloaderFont.math","text":"<pre><code>FontloaderFont.math : FontloaderMath?\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2228</p>"},{"location":"types/FontloaderFont/#fontloaderfontvalidation_state","title":"FontloaderFont.validation_state","text":"<pre><code>FontloaderFont.validation_state : FontloaderValidationState?\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2234</p>"},{"location":"types/FontloaderFont/#fontloaderfonthoriz_base","title":"FontloaderFont.horiz_base","text":"<pre><code>FontloaderFont.horiz_base : FontloaderHorizVertBase?\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2239</p>"},{"location":"types/FontloaderFont/#fontloaderfontvert_base","title":"FontloaderFont.vert_base","text":"<pre><code>FontloaderFont.vert_base : FontloaderHorizVertBase?\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L2241</p>"},{"location":"types/FontloaderFont/#fontloaderfontextrema_bound","title":"FontloaderFont.extrema_bound","text":"<pre><code>FontloaderFont.extrema_bound : integer\n</code></pre> <p>for example <code>0</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luafontloader/src/luafflib.c#L1931-L1939</p>"},{"location":"types/FontloaderFont/#fontloaderfonttruetype","title":"FontloaderFont.truetype","text":"<pre><code>FontloaderFont.truetype : integer\n</code></pre> <p>signals a TrueType font</p>"},{"location":"types/FontloaderFontField/","title":"alias FontloaderFontField","text":"<pre><code>(alias) FontloaderFontField = ()\n</code></pre>"},{"location":"types/FontloaderGlyph/","title":"class FontloaderGlyph","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L959-L1120</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderGlyph/#fields","title":"fields","text":""},{"location":"types/FontloaderGlyph/#fontloaderglyphname","title":"FontloaderGlyph.name","text":"<pre><code>FontloaderGlyph.name : string\n</code></pre> <p>The glyph name, for example <code>space</code>.</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphunicode","title":"FontloaderGlyph.unicode","text":"<pre><code>FontloaderGlyph.unicode : integer\n</code></pre> <p>The unicode code point, or -1 , for example <code>32</code>.</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphboundingbox","title":"FontloaderGlyph.boundingbox","text":"<pre><code>FontloaderGlyph.boundingbox : integer[]\n</code></pre> <p>Array of four numbers, for example <code>{ 0, 0, 0, 0 }</code>.</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphwidth","title":"FontloaderGlyph.width","text":"<pre><code>FontloaderGlyph.width : integer\n</code></pre> <p>Only for horizontal fonts</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphvwidth","title":"FontloaderGlyph.vwidth","text":"<pre><code>FontloaderGlyph.vwidth : integer\n</code></pre> <p>Only for vertical fonts</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphtsidebearing","title":"FontloaderGlyph.tsidebearing","text":"<pre><code>FontloaderGlyph.tsidebearing : integer\n</code></pre> <p>Only for vertical ttf/otf fonts, and only if non-zero</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphlsidebearing","title":"FontloaderGlyph.lsidebearing","text":"<pre><code>FontloaderGlyph.lsidebearing : integer\n</code></pre> <p>Only if non-zero and not equal to boundingbox[1]</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphclass","title":"FontloaderGlyph.class","text":"<pre><code>FontloaderGlyph.class : string\n</code></pre> <p>one of \"none\", \"base\", \"ligature\", \"mark\", \"component\" (if not present, the glyph class is \u201cautomatic\u201d)</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphkerns","title":"FontloaderGlyph.kerns","text":"<pre><code>FontloaderGlyph.kerns : FontloaderGlyphKern[]\n</code></pre> <p>only for horizontal fonts, if set</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphvkerns","title":"FontloaderGlyph.vkerns","text":"<pre><code>FontloaderGlyph.vkerns : table\n</code></pre> <p>only for vertical fonts, if set</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphdependents","title":"FontloaderGlyph.dependents","text":"<pre><code>FontloaderGlyph.dependents : string[]\n</code></pre> <p>linear array of glyph name strings, only if nonempty</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphlookups","title":"FontloaderGlyph.lookups","text":"<pre><code>FontloaderGlyph.lookups : table\n</code></pre> <p>only if nonempty</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphligatures","title":"FontloaderGlyph.ligatures","text":"<pre><code>FontloaderGlyph.ligatures : table\n</code></pre> <p>only if nonempty</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphanchors","title":"FontloaderGlyph.anchors","text":"<pre><code>FontloaderGlyph.anchors : table\n</code></pre> <p>only if set</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphcomment","title":"FontloaderGlyph.comment","text":"<pre><code>FontloaderGlyph.comment : string\n</code></pre> <p>only if set</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphtex_height","title":"FontloaderGlyph.tex_height","text":"<pre><code>FontloaderGlyph.tex_height : integer\n</code></pre> <p>only if set</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphtex_depth","title":"FontloaderGlyph.tex_depth","text":"<pre><code>FontloaderGlyph.tex_depth : integer\n</code></pre> <p>only if set</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphitalic_correction","title":"FontloaderGlyph.italic_correction","text":"<pre><code>FontloaderGlyph.italic_correction : integer\n</code></pre> <p>only if set</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphtop_accent","title":"FontloaderGlyph.top_accent","text":"<pre><code>FontloaderGlyph.top_accent : integer\n</code></pre> <p>only if set</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphis_extended_shape","title":"FontloaderGlyph.is_extended_shape","text":"<pre><code>FontloaderGlyph.is_extended_shape : integer\n</code></pre> <p>only if this character is part of a math extension list</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphaltuni","title":"FontloaderGlyph.altuni","text":"<pre><code>FontloaderGlyph.altuni : table\n</code></pre> <p>alternate Unicode items</p>"},{"location":"types/FontloaderGlyph/#fontloaderglyphvert_variants","title":"FontloaderGlyph.vert_variants","text":"<pre><code>FontloaderGlyph.vert_variants : FontloaderVertHorizVariants {\n    variants: string,\n    italic_correction: number,\n    parts: FontloaderParts[],\n}\n</code></pre>"},{"location":"types/FontloaderGlyph/#fontloaderglyphhoriz_variants","title":"FontloaderGlyph.horiz_variants","text":"<pre><code>FontloaderGlyph.horiz_variants : FontloaderVertHorizVariants {\n    variants: string,\n    italic_correction: number,\n    parts: FontloaderParts[],\n}\n</code></pre>"},{"location":"types/FontloaderGlyph/#fontloaderglyphmathkern","title":"FontloaderGlyph.mathkern","text":"<pre><code>FontloaderGlyph.mathkern : FontloaderMathkern {\n    top_right: FontloaderMathkernSubtable,\n    bottom_right: FontloaderMathkernSubtable,\n    top_left: FontloaderMathkernSubtable,\n    bottom_left: FontloaderMathkernSubtable,\n}\n</code></pre>"},{"location":"types/FontloaderGlyphField/","title":"alias FontloaderGlyphField","text":"<pre><code>(alias) FontloaderGlyphField = ()\n</code></pre>"},{"location":"types/FontloaderGlyphKern/","title":"class FontloaderGlyphKern","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderGlyphKern/#fields","title":"fields","text":""},{"location":"types/FontloaderGlyphKern/#fontloaderglyphkernchar","title":"FontloaderGlyphKern.char","text":"<pre><code>FontloaderGlyphKern.char : string\n</code></pre> <p>for example <code>afii10065</code>.</p>"},{"location":"types/FontloaderGlyphKern/#fontloaderglyphkernlookup","title":"FontloaderGlyphKern.lookup","text":"<pre><code>FontloaderGlyphKern.lookup : string\n</code></pre> <p>for example <code>pp_l_0_s</code>.</p>"},{"location":"types/FontloaderGlyphKern/#fontloaderglyphkernoff","title":"FontloaderGlyphKern.off","text":"<pre><code>FontloaderGlyphKern.off : integer\n</code></pre> <p>for example <code>7</code>.</p>"},{"location":"types/FontloaderGpos/","title":"class FontloaderGpos","text":"<ul> <li>supers: FontloaderGposSub</li> </ul> <p>The <code>gpos</code> table has one array entry for each lookup. (The <code>gpos_</code> prefix is somewhat redundant.)</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L74-L76</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderGpos/#fields","title":"fields","text":""},{"location":"types/FontloaderGpos/#fontloadergpostype","title":"FontloaderGpos.type","text":"<pre><code>FontloaderGpos.type : unknown\n</code></pre>"},{"location":"types/FontloaderGposFeatures/","title":"class FontloaderGposFeatures","text":"<p>The features subtable items of gpos have</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L523-L531</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderGposFeatures/#fields","title":"fields","text":""},{"location":"types/FontloaderGposFeatures/#fontloadergposfeaturestag","title":"FontloaderGposFeatures.tag","text":"<pre><code>FontloaderGposFeatures.tag : string\n</code></pre>"},{"location":"types/FontloaderGposFeatures/#fontloadergposfeaturesscripts","title":"FontloaderGposFeatures.scripts","text":"<pre><code>FontloaderGposFeatures.scripts : FontloaderGposFeaturesScripts {\n    script: string,\n    langs: string[],\n}\n</code></pre>"},{"location":"types/FontloaderGposFeaturesScripts/","title":"class FontloaderGposFeaturesScripts","text":"<p>The scripts table within features has:</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L492-L515</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderGposFeaturesScripts/#fields","title":"fields","text":""},{"location":"types/FontloaderGposFeaturesScripts/#fontloadergposfeaturesscriptsscript","title":"FontloaderGposFeaturesScripts.script","text":"<pre><code>FontloaderGposFeaturesScripts.script : string\n</code></pre>"},{"location":"types/FontloaderGposFeaturesScripts/#fontloadergposfeaturesscriptslangs","title":"FontloaderGposFeaturesScripts.langs","text":"<pre><code>FontloaderGposFeaturesScripts.langs : string[]\n</code></pre>"},{"location":"types/FontloaderGposFlags/","title":"class FontloaderGposFlags","text":"<p>The flags table has a true value for each of the lookup flags that is actually set:</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L587-L612</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderGposFlags/#fields","title":"fields","text":""},{"location":"types/FontloaderGposFlags/#fontloadergposflagsr2l","title":"FontloaderGposFlags.r2l","text":"<pre><code>FontloaderGposFlags.r2l : boolean\n</code></pre>"},{"location":"types/FontloaderGposFlags/#fontloadergposflagsignorebaseglyphs","title":"FontloaderGposFlags.ignorebaseglyphs","text":"<pre><code>FontloaderGposFlags.ignorebaseglyphs : boolean\n</code></pre>"},{"location":"types/FontloaderGposFlags/#fontloadergposflagsignoreligatures","title":"FontloaderGposFlags.ignoreligatures","text":"<pre><code>FontloaderGposFlags.ignoreligatures : boolean\n</code></pre>"},{"location":"types/FontloaderGposFlags/#fontloadergposflagsignorecombiningmarks","title":"FontloaderGposFlags.ignorecombiningmarks","text":"<pre><code>FontloaderGposFlags.ignorecombiningmarks : boolean\n</code></pre>"},{"location":"types/FontloaderGposFlags/#fontloadergposflagsmark_class","title":"FontloaderGposFlags.mark_class","text":"<pre><code>FontloaderGposFlags.mark_class : string\n</code></pre>"},{"location":"types/FontloaderGposSub/","title":"class FontloaderGposSub","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L580-L643</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderGposSub/#fields","title":"fields","text":""},{"location":"types/FontloaderGposSub/#fontloadergpossubflags","title":"FontloaderGposSub.flags","text":"<pre><code>FontloaderGposSub.flags : FontloaderGposFlags {\n    r2l: boolean,\n    ignorebaseglyphs: boolean,\n    ignoreligatures: boolean,\n    ignorecombiningmarks: boolean,\n    mark_class: string,\n}\n</code></pre>"},{"location":"types/FontloaderGposSub/#fontloadergpossubname","title":"FontloaderGposSub.name","text":"<pre><code>FontloaderGposSub.name : string\n</code></pre>"},{"location":"types/FontloaderGposSub/#fontloadergpossubfeatures","title":"FontloaderGposSub.features","text":"<pre><code>FontloaderGposSub.features : FontloaderGposFeatures {\n    tag: string,\n    scripts: FontloaderGposFeaturesScripts,\n}\n</code></pre>"},{"location":"types/FontloaderGposSub/#fontloadergpossubsubtables","title":"FontloaderGposSub.subtables","text":"<pre><code>FontloaderGposSub.subtables : FontloaderGposSubtables {\n    name: string,\n    suffix: string,\n    anchor_classes: number,\n    vertical_kerning: number,\n    kernclass: FontloaderGposSubtablesKernclass,\n}\n</code></pre>"},{"location":"types/FontloaderGposSubtables/","title":"class FontloaderGposSubtables","text":"<p>The subtables table has:</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L541-L572</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderGposSubtables/#fields","title":"fields","text":""},{"location":"types/FontloaderGposSubtables/#fontloadergpossubtablesname","title":"FontloaderGposSubtables.name","text":"<pre><code>FontloaderGposSubtables.name : string\n</code></pre>"},{"location":"types/FontloaderGposSubtables/#fontloadergpossubtablessuffix","title":"FontloaderGposSubtables.suffix","text":"<pre><code>FontloaderGposSubtables.suffix : string\n</code></pre> <p>(only if used) % used by gpos_single to get a default</p>"},{"location":"types/FontloaderGposSubtables/#fontloadergpossubtablesanchor_classes","title":"FontloaderGposSubtables.anchor_classes","text":"<pre><code>FontloaderGposSubtables.anchor_classes : number\n</code></pre> <p>(only if used)</p>"},{"location":"types/FontloaderGposSubtables/#fontloadergpossubtablesvertical_kerning","title":"FontloaderGposSubtables.vertical_kerning","text":"<pre><code>FontloaderGposSubtables.vertical_kerning : number\n</code></pre> <p>(only if used)</p>"},{"location":"types/FontloaderGposSubtables/#fontloadergpossubtableskernclass","title":"FontloaderGposSubtables.kernclass","text":"<pre><code>FontloaderGposSubtables.kernclass : FontloaderGposSubtablesKernclass {\n    firsts: string[],\n    seconds: string[],\n    lookup: string,\n    offsets: integer[],\n}\n</code></pre> <p>(only if used)</p>"},{"location":"types/FontloaderGposSubtablesKernclass/","title":"class FontloaderGposSubtablesKernclass","text":"<p>Note: the kernclass (as far as we can see) always has one entry so it could be one level deep instead. Also the seconds start at <code>[2]</code> which is close to the fontforge internals so we keep that too.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1469-L1518</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderGposSubtablesKernclass/#fields","title":"fields","text":""},{"location":"types/FontloaderGposSubtablesKernclass/#fontloadergpossubtableskernclassfirsts","title":"FontloaderGposSubtablesKernclass.firsts","text":"<pre><code>FontloaderGposSubtablesKernclass.firsts : string[]\n</code></pre>"},{"location":"types/FontloaderGposSubtablesKernclass/#fontloadergpossubtableskernclassseconds","title":"FontloaderGposSubtablesKernclass.seconds","text":"<pre><code>FontloaderGposSubtablesKernclass.seconds : string[]\n</code></pre>"},{"location":"types/FontloaderGposSubtablesKernclass/#fontloadergpossubtableskernclasslookup","title":"FontloaderGposSubtablesKernclass.lookup","text":"<pre><code>FontloaderGposSubtablesKernclass.lookup : string\n</code></pre> <p>or an array of associated lookup(s)</p>"},{"location":"types/FontloaderGposSubtablesKernclass/#fontloadergpossubtableskernclassoffsets","title":"FontloaderGposSubtablesKernclass.offsets","text":"<pre><code>FontloaderGposSubtablesKernclass.offsets : integer[]\n</code></pre>"},{"location":"types/FontloaderGsub/","title":"class FontloaderGsub","text":"<ul> <li>supers: FontloaderGposSub</li> </ul> <p>This has identical layout to the <code>gpos</code> table, except for the type:</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L56-L58</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderGsub/#fields","title":"fields","text":""},{"location":"types/FontloaderGsub/#fontloadergsubtype","title":"FontloaderGsub.type","text":"<pre><code>FontloaderGsub.type : unknown\n</code></pre>"},{"location":"types/FontloaderHorizVertBase/","title":"class FontloaderHorizVertBase","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1785-L1818</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderHorizVertBase/#fields","title":"fields","text":""},{"location":"types/FontloaderHorizVertBase/#fontloaderhorizvertbasetags","title":"FontloaderHorizVertBase.tags","text":"<pre><code>FontloaderHorizVertBase.tags : table\n</code></pre> <p>an array of script list tags</p>"},{"location":"types/FontloaderHorizVertBase/#fontloaderhorizvertbasescripts","title":"FontloaderHorizVertBase.scripts","text":"<pre><code>FontloaderHorizVertBase.scripts : FontloaderScripts {\n    baseline: table,\n    default_baseline: number,\n    lang: FontloaderLang,\n}\n</code></pre>"},{"location":"types/FontloaderLang/","title":"class FontloaderLang","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1769-L1777</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderLang/#fields","title":"fields","text":""},{"location":"types/FontloaderLang/#fontloaderlangtag","title":"FontloaderLang.tag","text":"<pre><code>FontloaderLang.tag : string\n</code></pre> <p>a script tag</p>"},{"location":"types/FontloaderLang/#fontloaderlangascent","title":"FontloaderLang.ascent","text":"<pre><code>FontloaderLang.ascent : number\n</code></pre>"},{"location":"types/FontloaderLang/#fontloaderlangdescent","title":"FontloaderLang.descent","text":"<pre><code>FontloaderLang.descent : number\n</code></pre>"},{"location":"types/FontloaderLang/#fontloaderlangfeatures","title":"FontloaderLang.features","text":"<pre><code>FontloaderLang.features : table\n</code></pre> <p>The <code>features</code> points to an array of tables with the same layout except that in those nested tables, the tag represents a language.</p>"},{"location":"types/FontloaderLangName/","title":"class FontloaderLangName","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1418-L1416</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderLangName/#fields","title":"fields","text":""},{"location":"types/FontloaderLangName/#fontloaderlangnamelang","title":"FontloaderLangName.lang","text":"<pre><code>FontloaderLangName.lang : string\n</code></pre> <p>The language for this entry, for example <code>Basque</code>, <code>Spanish Mexico</code>, <code>Portuguese (Brasil)</code>, <code>Spanish (Modern)</code>, <code>French Canadian</code> or <code>English (US)</code></p>"},{"location":"types/FontloaderLangName/#fontloaderlangnamenames","title":"FontloaderLangName.names","text":"<pre><code>FontloaderLangName.names : FontloaderTrueTypeNames {\n    copyright: string,\n    family: string,\n    subfamily: string,\n    uniqueid: string,\n    fullname: string,\n    version: string,\n    postscriptname: string,\n    trademark: string,\n    manufacturer: string,\n    designer: string,\n    descriptor: string,\n    venderurl: string,\n    ...(+11)\n}\n</code></pre> <p>The <code>names</code> keys are the actual TrueType name strings.</p>"},{"location":"types/FontloaderLockup/","title":"class FontloaderLockup","text":"<p>Top-level <code>lookups</code> is quite different from the ones at character level. The keys in this hash are strings, the values the actual lookups, represented as dictionary tables.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1628-L1661</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderLockup/#fields","title":"fields","text":""},{"location":"types/FontloaderLockup/#fontloaderlockuptype","title":"FontloaderLockup.type","text":"<pre><code>FontloaderLockup.type : string\n</code></pre>"},{"location":"types/FontloaderLockup/#fontloaderlockupformat","title":"FontloaderLockup.format","text":"<pre><code>FontloaderLockup.format : unknown\n</code></pre>"},{"location":"types/FontloaderLockup/#fontloaderlockuptag","title":"FontloaderLockup.tag","text":"<pre><code>FontloaderLockup.tag : string\n</code></pre>"},{"location":"types/FontloaderLockup/#fontloaderlockupcurrent_class","title":"FontloaderLockup.current_class","text":"<pre><code>FontloaderLockup.current_class : string[]\n</code></pre>"},{"location":"types/FontloaderLockup/#fontloaderlockupbefore_class","title":"FontloaderLockup.before_class","text":"<pre><code>FontloaderLockup.before_class : string[]\n</code></pre>"},{"location":"types/FontloaderLockup/#fontloaderlockupafter_class","title":"FontloaderLockup.after_class","text":"<pre><code>FontloaderLockup.after_class : string[]\n</code></pre>"},{"location":"types/FontloaderLockup/#fontloaderlockuprules","title":"FontloaderLockup.rules","text":"<pre><code>FontloaderLockup.rules : FontloaderLockupRule[]\n</code></pre> <p>an array of rule items</p>"},{"location":"types/FontloaderLockupClass/","title":"class FontloaderLockupClass","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1570-L1580</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderLockupClass/#fields","title":"fields","text":""},{"location":"types/FontloaderLockupClass/#fontloaderlockupclassbefore","title":"FontloaderLockupClass.before","text":"<pre><code>FontloaderLockupClass.before : number[]\n</code></pre>"},{"location":"types/FontloaderLockupClass/#fontloaderlockupclassafter","title":"FontloaderLockupClass.after","text":"<pre><code>FontloaderLockupClass.after : number[]\n</code></pre>"},{"location":"types/FontloaderLockupGlyph/","title":"class FontloaderLockupGlyph","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1562-L1568</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderLockupGlyph/#fields","title":"fields","text":""},{"location":"types/FontloaderLockupGlyph/#fontloaderlockupglyphnames","title":"FontloaderLockupGlyph.names","text":"<pre><code>FontloaderLockupGlyph.names : string\n</code></pre>"},{"location":"types/FontloaderLockupGlyph/#fontloaderlockupglyphback","title":"FontloaderLockupGlyph.back","text":"<pre><code>FontloaderLockupGlyph.back : string\n</code></pre>"},{"location":"types/FontloaderLockupGlyph/#fontloaderlockupglyphfore","title":"FontloaderLockupGlyph.fore","text":"<pre><code>FontloaderLockupGlyph.fore : string\n</code></pre>"},{"location":"types/FontloaderLockupReverseCoverage/","title":"class FontloaderLockupReverseCoverage","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1593-L1604</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderLockupReverseCoverage/#fields","title":"fields","text":""},{"location":"types/FontloaderLockupReverseCoverage/#fontloaderlockupreversecoveragecurrent","title":"FontloaderLockupReverseCoverage.current","text":"<pre><code>FontloaderLockupReverseCoverage.current : string[]\n</code></pre>"},{"location":"types/FontloaderLockupReverseCoverage/#fontloaderlockupreversecoveragebefore","title":"FontloaderLockupReverseCoverage.before","text":"<pre><code>FontloaderLockupReverseCoverage.before : string[]\n</code></pre>"},{"location":"types/FontloaderLockupReverseCoverage/#fontloaderlockupreversecoverageafter","title":"FontloaderLockupReverseCoverage.after","text":"<pre><code>FontloaderLockupReverseCoverage.after : string[]\n</code></pre>"},{"location":"types/FontloaderLockupReverseCoverage/#fontloaderlockupreversecoveragereplacements","title":"FontloaderLockupReverseCoverage.replacements","text":"<pre><code>FontloaderLockupReverseCoverage.replacements : string\n</code></pre>"},{"location":"types/FontloaderLockupRule/","title":"class FontloaderLockupRule","text":"<p>Rule items have one common item and one specialized item:</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1558-L1626</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderLockupRule/#fields","title":"fields","text":""},{"location":"types/FontloaderLockupRule/#fontloaderlockuprulelookups","title":"FontloaderLockupRule.lookups","text":"<pre><code>FontloaderLockupRule.lookups : string[]\n</code></pre> <p>a linear array of lookup names</p>"},{"location":"types/FontloaderLockupRule/#fontloaderlockupruleglyphs","title":"FontloaderLockupRule.glyphs","text":"<pre><code>FontloaderLockupRule.glyphs : FontloaderLockupGlyph[]\n</code></pre> <p>only if the parent's format is <code>glyphs</code></p>"},{"location":"types/FontloaderLockupRule/#fontloaderlockupruleclass","title":"FontloaderLockupRule.class","text":"<pre><code>FontloaderLockupRule.class : FontloaderLockupClass[]\n</code></pre> <p>only if the parent's format is <code>class</code></p>"},{"location":"types/FontloaderLockupRule/#fontloaderlockuprulecoverage","title":"FontloaderLockupRule.coverage","text":"<pre><code>FontloaderLockupRule.coverage : FontloaderLockupsCoverage[]\n</code></pre> <p>only if the parent's format is <code>coverage</code></p>"},{"location":"types/FontloaderLockupRule/#fontloaderlockuprulereversecoverage","title":"FontloaderLockupRule.reversecoverage","text":"<pre><code>FontloaderLockupRule.reversecoverage : FontloaderLockupReverseCoverage[]\n</code></pre> <p>only if the parent's format is <code>reversecoverage</code></p>"},{"location":"types/FontloaderLockupsCoverage/","title":"class FontloaderLockupsCoverage","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1582-L1591</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderLockupsCoverage/#fields","title":"fields","text":""},{"location":"types/FontloaderLockupsCoverage/#fontloaderlockupscoveragecurrent","title":"FontloaderLockupsCoverage.current","text":"<pre><code>FontloaderLockupsCoverage.current : string[]\n</code></pre>"},{"location":"types/FontloaderLockupsCoverage/#fontloaderlockupscoveragebefore","title":"FontloaderLockupsCoverage.before","text":"<pre><code>FontloaderLockupsCoverage.before : string[]\n</code></pre>"},{"location":"types/FontloaderLockupsCoverage/#fontloaderlockupscoverageafter","title":"FontloaderLockupsCoverage.after","text":"<pre><code>FontloaderLockupsCoverage.after : string[]\n</code></pre>"},{"location":"types/FontloaderMap/","title":"class FontloaderMap","text":"<p>The top-level map is a list of encoding mappings. Each of those is a table itself.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1346-L1404</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderMap/#fields","title":"fields","text":""},{"location":"types/FontloaderMap/#fontloadermapenccount","title":"FontloaderMap.enccount","text":"<pre><code>FontloaderMap.enccount : integer\n</code></pre> <p>for example <code>65537</code></p>"},{"location":"types/FontloaderMap/#fontloadermapencmax","title":"FontloaderMap.encmax","text":"<pre><code>FontloaderMap.encmax : integer\n</code></pre> <p>for example <code>65537</code></p>"},{"location":"types/FontloaderMap/#fontloadermapbackmax","title":"FontloaderMap.backmax","text":"<pre><code>FontloaderMap.backmax : integer\n</code></pre> <p>for example <code>855</code></p>"},{"location":"types/FontloaderMap/#fontloadermapremap","title":"FontloaderMap.remap","text":"<pre><code>FontloaderMap.remap : FontloaderRemap {\n    firstenc: integer,\n    lastenc: integer,\n    infont: integer,\n}\n</code></pre>"},{"location":"types/FontloaderMap/#fontloadermapmap","title":"FontloaderMap.map","text":"<pre><code>FontloaderMap.map : table&lt;integer,integer&gt;\n</code></pre> <p>non-linear array of mappings, for example <code>{ [32] = 1, [33] = 2, [34] = 3 }</code></p>"},{"location":"types/FontloaderMap/#fontloadermapbackmap","title":"FontloaderMap.backmap","text":"<pre><code>FontloaderMap.backmap : integer[]\n</code></pre> <p>non-linear array of backward mappings, for example <code>{ 32, 33, 34, 35, 36, 37, 38, 8217 }</code></p>"},{"location":"types/FontloaderMap/#fontloadermapenc","title":"FontloaderMap.enc","text":"<pre><code>FontloaderMap.enc : FontloaderEnc {\n    enc_name: string,\n    char_cnt: integer,\n    char_max: integer,\n    unicode: integer[],\n    psnames: string[],\n    builtin: integer,\n    hidden: integer,\n    only_1byte: integer,\n    has_1byte: integer,\n    has_2byte: integer,\n    is_unicodebmp: integer,\n    is_unicodefull: integer,\n    ...(+11)\n}\n</code></pre>"},{"location":"types/FontloaderMarkClasses/","title":"alias FontloaderMarkClasses","text":"<pre><code>(alias) FontloaderMarkClasses = string&lt;string,string&gt;\n</code></pre> <p>The keys in this table are mark class names, and the values are a space-separated string of glyph names in this class.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L2159-L2169</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderMath/","title":"class FontloaderMath","text":"<p>The math table has the variables that are also discussed in the chapter about math</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1706-L1767</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderMath/#fields","title":"fields","text":""},{"location":"types/FontloaderMath/#fontloadermathscriptpercentscaledown","title":"FontloaderMath.ScriptPercentScaleDown","text":"<pre><code>FontloaderMath.ScriptPercentScaleDown : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathscriptscriptpercentscaledown","title":"FontloaderMath.ScriptScriptPercentScaleDown","text":"<pre><code>FontloaderMath.ScriptScriptPercentScaleDown : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathdelimitedsubformulaminheight","title":"FontloaderMath.DelimitedSubFormulaMinHeight","text":"<pre><code>FontloaderMath.DelimitedSubFormulaMinHeight : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathdisplayoperatorminheight","title":"FontloaderMath.DisplayOperatorMinHeight","text":"<pre><code>FontloaderMath.DisplayOperatorMinHeight : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathmathleading","title":"FontloaderMath.MathLeading","text":"<pre><code>FontloaderMath.MathLeading : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathaxisheight","title":"FontloaderMath.AxisHeight","text":"<pre><code>FontloaderMath.AxisHeight : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathaccentbaseheight","title":"FontloaderMath.AccentBaseHeight","text":"<pre><code>FontloaderMath.AccentBaseHeight : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathflattenedaccentbaseheight","title":"FontloaderMath.FlattenedAccentBaseHeight","text":"<pre><code>FontloaderMath.FlattenedAccentBaseHeight : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathsubscriptshiftdown","title":"FontloaderMath.SubscriptShiftDown","text":"<pre><code>FontloaderMath.SubscriptShiftDown : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathsubscripttopmax","title":"FontloaderMath.SubscriptTopMax","text":"<pre><code>FontloaderMath.SubscriptTopMax : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathsubscriptbaselinedropmin","title":"FontloaderMath.SubscriptBaselineDropMin","text":"<pre><code>FontloaderMath.SubscriptBaselineDropMin : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathsuperscriptshiftup","title":"FontloaderMath.SuperscriptShiftUp","text":"<pre><code>FontloaderMath.SuperscriptShiftUp : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathsuperscriptshiftupcramped","title":"FontloaderMath.SuperscriptShiftUpCramped","text":"<pre><code>FontloaderMath.SuperscriptShiftUpCramped : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathsuperscriptbottommin","title":"FontloaderMath.SuperscriptBottomMin","text":"<pre><code>FontloaderMath.SuperscriptBottomMin : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathsuperscriptbaselinedropmax","title":"FontloaderMath.SuperscriptBaselineDropMax","text":"<pre><code>FontloaderMath.SuperscriptBaselineDropMax : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathsubsuperscriptgapmin","title":"FontloaderMath.SubSuperscriptGapMin","text":"<pre><code>FontloaderMath.SubSuperscriptGapMin : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathsuperscriptbottommaxwithsubscript","title":"FontloaderMath.SuperscriptBottomMaxWithSubscript","text":"<pre><code>FontloaderMath.SuperscriptBottomMaxWithSubscript : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathspaceafterscript","title":"FontloaderMath.SpaceAfterScript","text":"<pre><code>FontloaderMath.SpaceAfterScript : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathupperlimitgapmin","title":"FontloaderMath.UpperLimitGapMin","text":"<pre><code>FontloaderMath.UpperLimitGapMin : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathupperlimitbaselinerisemin","title":"FontloaderMath.UpperLimitBaselineRiseMin","text":"<pre><code>FontloaderMath.UpperLimitBaselineRiseMin : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathlowerlimitgapmin","title":"FontloaderMath.LowerLimitGapMin","text":"<pre><code>FontloaderMath.LowerLimitGapMin : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathlowerlimitbaselinedropmin","title":"FontloaderMath.LowerLimitBaselineDropMin","text":"<pre><code>FontloaderMath.LowerLimitBaselineDropMin : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathstacktopshiftup","title":"FontloaderMath.StackTopShiftUp","text":"<pre><code>FontloaderMath.StackTopShiftUp : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathstacktopdisplaystyleshiftup","title":"FontloaderMath.StackTopDisplayStyleShiftUp","text":"<pre><code>FontloaderMath.StackTopDisplayStyleShiftUp : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathstackbottomshiftdown","title":"FontloaderMath.StackBottomShiftDown","text":"<pre><code>FontloaderMath.StackBottomShiftDown : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathstackbottomdisplaystyleshiftdown","title":"FontloaderMath.StackBottomDisplayStyleShiftDown","text":"<pre><code>FontloaderMath.StackBottomDisplayStyleShiftDown : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathstackgapmin","title":"FontloaderMath.StackGapMin","text":"<pre><code>FontloaderMath.StackGapMin : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathstackdisplaystylegapmin","title":"FontloaderMath.StackDisplayStyleGapMin","text":"<pre><code>FontloaderMath.StackDisplayStyleGapMin : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathstretchstacktopshiftup","title":"FontloaderMath.StretchStackTopShiftUp","text":"<pre><code>FontloaderMath.StretchStackTopShiftUp : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathstretchstackbottomshiftdown","title":"FontloaderMath.StretchStackBottomShiftDown","text":"<pre><code>FontloaderMath.StretchStackBottomShiftDown : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathstretchstackgapabovemin","title":"FontloaderMath.StretchStackGapAboveMin","text":"<pre><code>FontloaderMath.StretchStackGapAboveMin : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathstretchstackgapbelowmin","title":"FontloaderMath.StretchStackGapBelowMin","text":"<pre><code>FontloaderMath.StretchStackGapBelowMin : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathfractionnumeratorshiftup","title":"FontloaderMath.FractionNumeratorShiftUp","text":"<pre><code>FontloaderMath.FractionNumeratorShiftUp : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathfractionnumeratordisplaystyleshiftup","title":"FontloaderMath.FractionNumeratorDisplayStyleShiftUp","text":"<pre><code>FontloaderMath.FractionNumeratorDisplayStyleShiftUp : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathfractiondenominatorshiftdown","title":"FontloaderMath.FractionDenominatorShiftDown","text":"<pre><code>FontloaderMath.FractionDenominatorShiftDown : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathfractiondenominatordisplaystyleshiftdown","title":"FontloaderMath.FractionDenominatorDisplayStyleShiftDown","text":"<pre><code>FontloaderMath.FractionDenominatorDisplayStyleShiftDown : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathfractionnumeratorgapmin","title":"FontloaderMath.FractionNumeratorGapMin","text":"<pre><code>FontloaderMath.FractionNumeratorGapMin : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathfractionnumeratordisplaystylegapmin","title":"FontloaderMath.FractionNumeratorDisplayStyleGapMin","text":"<pre><code>FontloaderMath.FractionNumeratorDisplayStyleGapMin : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathfractionrulethickness","title":"FontloaderMath.FractionRuleThickness","text":"<pre><code>FontloaderMath.FractionRuleThickness : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathfractiondenominatorgapmin","title":"FontloaderMath.FractionDenominatorGapMin","text":"<pre><code>FontloaderMath.FractionDenominatorGapMin : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathfractiondenominatordisplaystylegapmin","title":"FontloaderMath.FractionDenominatorDisplayStyleGapMin","text":"<pre><code>FontloaderMath.FractionDenominatorDisplayStyleGapMin : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathskewedfractionhorizontalgap","title":"FontloaderMath.SkewedFractionHorizontalGap","text":"<pre><code>FontloaderMath.SkewedFractionHorizontalGap : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathskewedfractionverticalgap","title":"FontloaderMath.SkewedFractionVerticalGap","text":"<pre><code>FontloaderMath.SkewedFractionVerticalGap : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathoverbarverticalgap","title":"FontloaderMath.OverbarVerticalGap","text":"<pre><code>FontloaderMath.OverbarVerticalGap : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathoverbarrulethickness","title":"FontloaderMath.OverbarRuleThickness","text":"<pre><code>FontloaderMath.OverbarRuleThickness : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathoverbarextraascender","title":"FontloaderMath.OverbarExtraAscender","text":"<pre><code>FontloaderMath.OverbarExtraAscender : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathunderbarverticalgap","title":"FontloaderMath.UnderbarVerticalGap","text":"<pre><code>FontloaderMath.UnderbarVerticalGap : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathunderbarrulethickness","title":"FontloaderMath.UnderbarRuleThickness","text":"<pre><code>FontloaderMath.UnderbarRuleThickness : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathunderbarextradescender","title":"FontloaderMath.UnderbarExtraDescender","text":"<pre><code>FontloaderMath.UnderbarExtraDescender : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathradicalverticalgap","title":"FontloaderMath.RadicalVerticalGap","text":"<pre><code>FontloaderMath.RadicalVerticalGap : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathradicaldisplaystyleverticalgap","title":"FontloaderMath.RadicalDisplayStyleVerticalGap","text":"<pre><code>FontloaderMath.RadicalDisplayStyleVerticalGap : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathradicalrulethickness","title":"FontloaderMath.RadicalRuleThickness","text":"<pre><code>FontloaderMath.RadicalRuleThickness : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathradicalextraascender","title":"FontloaderMath.RadicalExtraAscender","text":"<pre><code>FontloaderMath.RadicalExtraAscender : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathradicalkernbeforedegree","title":"FontloaderMath.RadicalKernBeforeDegree","text":"<pre><code>FontloaderMath.RadicalKernBeforeDegree : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathradicalkernafterdegree","title":"FontloaderMath.RadicalKernAfterDegree","text":"<pre><code>FontloaderMath.RadicalKernAfterDegree : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathradicaldegreebottomraisepercent","title":"FontloaderMath.RadicalDegreeBottomRaisePercent","text":"<pre><code>FontloaderMath.RadicalDegreeBottomRaisePercent : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathminconnectoroverlap","title":"FontloaderMath.MinConnectorOverlap","text":"<pre><code>FontloaderMath.MinConnectorOverlap : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathfractiondelimitersize","title":"FontloaderMath.FractionDelimiterSize","text":"<pre><code>FontloaderMath.FractionDelimiterSize : integer\n</code></pre>"},{"location":"types/FontloaderMath/#fontloadermathfractiondelimiterdisplaystylesize","title":"FontloaderMath.FractionDelimiterDisplayStyleSize","text":"<pre><code>FontloaderMath.FractionDelimiterDisplayStyleSize : integer\n</code></pre>"},{"location":"types/FontloaderMathkern/","title":"class FontloaderMathkern","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L943-L957</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderMathkern/#fields","title":"fields","text":""},{"location":"types/FontloaderMathkern/#fontloadermathkerntop_right","title":"FontloaderMathkern.top_right","text":"<pre><code>FontloaderMathkern.top_right : FontloaderMathkernSubtable {\n    height: number,\n    kern: number,\n}\n</code></pre>"},{"location":"types/FontloaderMathkern/#fontloadermathkernbottom_right","title":"FontloaderMathkern.bottom_right","text":"<pre><code>FontloaderMathkern.bottom_right : FontloaderMathkernSubtable {\n    height: number,\n    kern: number,\n}\n</code></pre>"},{"location":"types/FontloaderMathkern/#fontloadermathkerntop_left","title":"FontloaderMathkern.top_left","text":"<pre><code>FontloaderMathkern.top_left : FontloaderMathkernSubtable {\n    height: number,\n    kern: number,\n}\n</code></pre>"},{"location":"types/FontloaderMathkern/#fontloadermathkernbottom_left","title":"FontloaderMathkern.bottom_left","text":"<pre><code>FontloaderMathkern.bottom_left : FontloaderMathkernSubtable {\n    height: number,\n    kern: number,\n}\n</code></pre>"},{"location":"types/FontloaderMathkernSubtable/","title":"class FontloaderMathkernSubtable","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L932-L941</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderMathkernSubtable/#fields","title":"fields","text":""},{"location":"types/FontloaderMathkernSubtable/#fontloadermathkernsubtableheight","title":"FontloaderMathkernSubtable.height","text":"<pre><code>FontloaderMathkernSubtable.height : number\n</code></pre>"},{"location":"types/FontloaderMathkernSubtable/#fontloadermathkernsubtablekern","title":"FontloaderMathkernSubtable.kern","text":"<pre><code>FontloaderMathkernSubtable.kern : number\n</code></pre>"},{"location":"types/FontloaderMm/","title":"class FontloaderMm","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1841-L1898</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderMm/#fields","title":"fields","text":""},{"location":"types/FontloaderMm/#fontloadermmaxes","title":"FontloaderMm.axes","text":"<pre><code>FontloaderMm.axes : table\n</code></pre> <p>array of axis names</p>"},{"location":"types/FontloaderMm/#fontloadermminstance_count","title":"FontloaderMm.instance_count","text":"<pre><code>FontloaderMm.instance_count : integer\n</code></pre>"},{"location":"types/FontloaderMm/#fontloadermmpositions","title":"FontloaderMm.positions","text":"<pre><code>FontloaderMm.positions : table\n</code></pre> <p>array of instance positions (#axes * instances )</p>"},{"location":"types/FontloaderMm/#fontloadermmdefweights","title":"FontloaderMm.defweights","text":"<pre><code>FontloaderMm.defweights : table\n</code></pre> <p>array of default weights for instances</p>"},{"location":"types/FontloaderMm/#fontloadermmcdv","title":"FontloaderMm.cdv","text":"<pre><code>FontloaderMm.cdv : string\n</code></pre>"},{"location":"types/FontloaderMm/#fontloadermmndv","title":"FontloaderMm.ndv","text":"<pre><code>FontloaderMm.ndv : string\n</code></pre>"},{"location":"types/FontloaderMm/#fontloadermmaxismaps","title":"FontloaderMm.axismaps","text":"<pre><code>FontloaderMm.axismaps : table\n</code></pre>"},{"location":"types/FontloaderPanose/","title":"class FontloaderPanose","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1222-L1232</li> <li>https://learn.microsoft.com/en-us/typography/opentype/spec/os2#panose</li> <li>https://monotype.github.io/panose/pan1.htm</li> <li>https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6OS2.html</li> <li>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/a4b8e13d3879e95c21e1719af0c3e31722bedd4f/manual/luatex-fontloader.tex#L694-715</li> <li>https://learn.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-panose</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderPanose/#fields","title":"fields","text":""},{"location":"types/FontloaderPanose/#fontloaderpanosefamilytype","title":"FontloaderPanose.familytype","text":"<pre><code>FontloaderPanose.familytype : `No\n</code></pre> <p>Fit<code>|</code>Text and Display<code>|</code>Script<code>|</code>Decorative<code>|</code>Pictorial<code># Values as in the *OpenType* font specification, for example</code>Text and Display`; Corresponding C source code: luafflib.c#L1122-1124.</p>"},{"location":"types/FontloaderPanose/#fontloaderpanoseserifstyle","title":"FontloaderPanose.serifstyle","text":"<pre><code>FontloaderPanose.serifstyle : `No\n</code></pre> <p>Fit<code>|</code>Cove<code>|</code>Obtuse Cove<code>|</code>Square Cove<code>|</code>Obtuse Square Cove<code>|</code>Square<code>|</code>Thin<code>|</code>Bone<code>|</code>Exaggerated<code>|</code>Triangle<code>|</code>Normal Sans<code>|</code>Obtuse Sans<code>|</code>Perp Sans<code>|</code>Flared<code>|</code>Rounded<code># See the *OpenType* font specification for values, for example</code>Normal Sans`; Corresponding C source code: luafflib.c#L1126-1131.</p>"},{"location":"types/FontloaderPanose/#fontloaderpanoseweight","title":"FontloaderPanose.weight","text":"<pre><code>FontloaderPanose.weight : `No\n</code></pre> <p>Fit<code>|</code>Very Light<code>|</code>Light<code>|</code>Thin<code>|</code>Book<code>|</code>Medium<code>|</code>Demi<code>|</code>Bold<code>|</code>Heavy<code>|</code>Black<code>|</code>Nord<code># For example</code>Medium`; Corresponding C source code: luafflib.c#L1133-1136.</p>"},{"location":"types/FontloaderPanose/#fontloaderpanoseproportion","title":"FontloaderPanose.proportion","text":"<pre><code>FontloaderPanose.proportion : `No\n</code></pre> <p>Fit<code>|</code>Old Style<code>|</code>Modern<code>|</code>Even Width<code>|</code>Expanded<code>|</code>Condensed<code>|</code>Very Expanded<code>|</code>Very Condensed<code>|</code>Monospaced<code># Values as in the *OpenType* font specification, for example</code>Monospaced`; Corresponding C source code: luafflib.c#L1138-1141.</p>"},{"location":"types/FontloaderPanose/#fontloaderpanosecontrast","title":"FontloaderPanose.contrast","text":"<pre><code>FontloaderPanose.contrast : `No\n</code></pre> <p>Fit<code>|</code>None<code>|</code>Very Low<code>|</code>Low<code>|</code>Medium Low<code>|</code>Medium<code>|</code>Medium High<code>|</code>High<code>|</code>Very High<code># Values as in the *OpenType* font specification, for example</code>Medium`; Corresponding C source code: luafflib.c#L1143-1146.</p>"},{"location":"types/FontloaderPanose/#fontloaderpanosestrokevariation","title":"FontloaderPanose.strokevariation","text":"<pre><code>FontloaderPanose.strokevariation : `No\n</code></pre> <p>Fit<code>|</code>Gradual/Diagonal<code>|</code>Gradual/Transitional<code>|</code>Gradual/Vertical<code>|</code>Gradual/Horizontal<code>|</code>Rapid/Vertical<code>|</code>Rapid/Horizontal<code>|</code>Instant/Vertical<code># Values as in the *OpenType* font specification, for example</code>No Fit`; Corresponding C source code: luafflib.c#L1148-1153.</p>"},{"location":"types/FontloaderPanose/#fontloaderpanosearmstyle","title":"FontloaderPanose.armstyle","text":"<pre><code>FontloaderPanose.armstyle : `No\n</code></pre> <p>Fit<code>|</code>Straight Arms/Horizontal<code>|</code>Straight Arms/Wedge<code>|</code>Straight Arms/Vertical<code>|</code>Straight Arms/Single Serif<code>|</code>Straight Arms/Double Serif<code>|</code>Non-Straight Arms/Horizontal<code>|</code>Non-Straight Arms/Wedge<code>|</code>Non-Straight Arms/Vertical<code>|</code>Non-Straight Arms/Single Serif<code>|</code>Non-Straight Arms/Double Serif<code># Values as in the *OpenType* font specification, for example</code>Straight Arms/Horizontal`; Corresponding C source code: luafflib.c#L1155-1163.</p>"},{"location":"types/FontloaderPanose/#fontloaderpanoseletterform","title":"FontloaderPanose.letterform","text":"<pre><code>FontloaderPanose.letterform : `No\n</code></pre> <p>Fit<code>|</code>Normal/Contact<code>|</code>Normal/Weighted<code>|</code>Normal/Boxed<code>|</code>Normal/Flattened<code>|</code>Normal/Rounded<code>|</code>Normal/Off Center<code>|</code>Normal/Square<code>|</code>Oblique/Contact<code>|</code>Oblique/Weighted<code>|</code>Oblique/Boxed<code>|</code>Oblique/Flattened<code>|</code>Oblique/Rounded<code>|</code>Oblique/Off Center<code>|</code>Oblique/Square<code># Values as in the *OpenType* font specification, for example</code>Oblique/Weighted`; Corresponding C source code: luafflib.c#L1165-1172.</p>"},{"location":"types/FontloaderPanose/#fontloaderpanosemidline","title":"FontloaderPanose.midline","text":"<pre><code>FontloaderPanose.midline : `No\n</code></pre> <p>Fit<code>|</code>Standard/Trimmed<code>|</code>Standard/Pointed<code>|</code>Standard/Serifed<code>|</code>High/Trimmed<code>|</code>High/Pointed<code>|</code>High/Serifed<code>|</code>Constant/Trimmed<code>|</code>Constant/Pointed<code>|</code>Constant/Serifed<code>|</code>Low/Trimmed<code>|</code>Low/Pointed<code>|</code>Low/Serifed<code># Values as in the *OpenType* font specification, for example</code>Standard/Pointed`; Corresponding C source code: luafflib.c#L1174-1180.</p>"},{"location":"types/FontloaderPanose/#fontloaderpanosexheight","title":"FontloaderPanose.xheight","text":"<pre><code>FontloaderPanose.xheight : `No\n</code></pre> <p>Fit<code>|</code>Constant/Small<code>|</code>Constant/Standard<code>|</code>Constant/Large<code>|</code>Ducking/Small<code>|</code>Ducking/Standard<code>|</code>Ducking/Large<code># Values as in the *OpenType* font specification, for example</code>Constant/Small`; Corresponding C source code: luafflib.c#L1182-1185.</p>"},{"location":"types/FontloaderParts/","title":"class FontloaderParts","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L914-L930</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderParts/#fields","title":"fields","text":""},{"location":"types/FontloaderParts/#fontloaderpartscomponent","title":"FontloaderParts.component","text":"<pre><code>FontloaderParts.component : string\n</code></pre>"},{"location":"types/FontloaderParts/#fontloaderpartsextender","title":"FontloaderParts.extender","text":"<pre><code>FontloaderParts.extender : number\n</code></pre>"},{"location":"types/FontloaderParts/#fontloaderpartsstart","title":"FontloaderParts.start","text":"<pre><code>FontloaderParts.start : number\n</code></pre>"},{"location":"types/FontloaderParts/#fontloaderpartsend","title":"FontloaderParts.end","text":"<pre><code>FontloaderParts.end : number\n</code></pre>"},{"location":"types/FontloaderParts/#fontloaderpartsadvance","title":"FontloaderParts.advance","text":"<pre><code>FontloaderParts.advance : number\n</code></pre>"},{"location":"types/FontloaderPfminfo/","title":"class FontloaderPfminfo","text":"<p>The <code>pfminfo</code> table contains most of the OS/2 information.</p> <p>PFM stands for PostScript Font Metrics and is the suffix of a file associated with a PostScript Type 1 font. The PFM file contains metric data such as kerning values.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1200-L1281</li> <li>https://www.typografie.info/3/wiki.html/p/pfm-r2/</li> <li>https://github.com/fontforge/fontforge/blob/2d4ccf06b68ce1e31386cbfa5822d448378b6500/fontforge/splinefont.h#L1112-L1148</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderPfminfo/#fields","title":"fields","text":""},{"location":"types/FontloaderPfminfo/#fontloaderpfminfopfmset","title":"FontloaderPfminfo.pfmset","text":"<pre><code>FontloaderPfminfo.pfmset : integer\n</code></pre> <p>for example <code>0</code> or <code>1</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfowinascent_add","title":"FontloaderPfminfo.winascent_add","text":"<pre><code>FontloaderPfminfo.winascent_add : integer\n</code></pre> <p>for example <code>0</code> or <code>1</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfowindescent_add","title":"FontloaderPfminfo.windescent_add","text":"<pre><code>FontloaderPfminfo.windescent_add : integer\n</code></pre> <p>for example <code>0</code> or <code>1</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfohheadascent_add","title":"FontloaderPfminfo.hheadascent_add","text":"<pre><code>FontloaderPfminfo.hheadascent_add : integer\n</code></pre> <p>for example <code>0</code> or <code>1</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfohheaddescent_add","title":"FontloaderPfminfo.hheaddescent_add","text":"<pre><code>FontloaderPfminfo.hheaddescent_add : integer\n</code></pre> <p>for example <code>0</code> or <code>1</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfotypoascent_add","title":"FontloaderPfminfo.typoascent_add","text":"<pre><code>FontloaderPfminfo.typoascent_add : integer\n</code></pre> <p>for example <code>0</code> or <code>1</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfotypodescent_add","title":"FontloaderPfminfo.typodescent_add","text":"<pre><code>FontloaderPfminfo.typodescent_add : integer\n</code></pre> <p>for example <code>0</code> or <code>1</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfosubsuper_set","title":"FontloaderPfminfo.subsuper_set","text":"<pre><code>FontloaderPfminfo.subsuper_set : integer\n</code></pre> <p>for example <code>0</code> or <code>1</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfopanose_set","title":"FontloaderPfminfo.panose_set","text":"<pre><code>FontloaderPfminfo.panose_set : integer\n</code></pre> <p>for example <code>0</code> or <code>1</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfohheadset","title":"FontloaderPfminfo.hheadset","text":"<pre><code>FontloaderPfminfo.hheadset : integer\n</code></pre> <p>for example <code>0</code> or <code>1</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfovheadset","title":"FontloaderPfminfo.vheadset","text":"<pre><code>FontloaderPfminfo.vheadset : integer\n</code></pre> <p>for example <code>0</code> or <code>1</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfopfmfamily","title":"FontloaderPfminfo.pfmfamily","text":"<pre><code>FontloaderPfminfo.pfmfamily : integer\n</code></pre> <p>for example <code>17</code>, <code>65</code> or <code>81</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoweight","title":"FontloaderPfminfo.weight","text":"<pre><code>FontloaderPfminfo.weight : integer\n</code></pre> <p>for example <code>400</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfowidth","title":"FontloaderPfminfo.width","text":"<pre><code>FontloaderPfminfo.width : integer\n</code></pre> <p>for example <code>5</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoavgwidth","title":"FontloaderPfminfo.avgwidth","text":"<pre><code>FontloaderPfminfo.avgwidth : integer\n</code></pre> <p>for example <code>725</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfofirstchar","title":"FontloaderPfminfo.firstchar","text":"<pre><code>FontloaderPfminfo.firstchar : integer\n</code></pre> <p>for example <code>32</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfolastchar","title":"FontloaderPfminfo.lastchar","text":"<pre><code>FontloaderPfminfo.lastchar : integer\n</code></pre> <p>for example <code>61440</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfofstype","title":"FontloaderPfminfo.fstype","text":"<pre><code>FontloaderPfminfo.fstype : integer\n</code></pre> <p>for example <code>0</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfolinegap","title":"FontloaderPfminfo.linegap","text":"<pre><code>FontloaderPfminfo.linegap : integer\n</code></pre> <p>for example <code>0</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfovlinegap","title":"FontloaderPfminfo.vlinegap","text":"<pre><code>FontloaderPfminfo.vlinegap : integer\n</code></pre> <p>for example <code>0</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfohhead_ascent","title":"FontloaderPfminfo.hhead_ascent","text":"<pre><code>FontloaderPfminfo.hhead_ascent : integer\n</code></pre> <p>for example <code>870</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfohhead_descent","title":"FontloaderPfminfo.hhead_descent","text":"<pre><code>FontloaderPfminfo.hhead_descent : number\n</code></pre> <p>for example <code>-373</code>.</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_typoascent","title":"FontloaderPfminfo.os2_typoascent","text":"<pre><code>FontloaderPfminfo.os2_typoascent : integer\n</code></pre> <p>The typographic ascender for this font. This field should be combined with the sTypoDescender and sTypoLineGap values to determine default line spacing. https://learn.microsoft.com/en-us/typography/opentype/spec/os2#stypoascender</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_typodescent","title":"FontloaderPfminfo.os2_typodescent","text":"<pre><code>FontloaderPfminfo.os2_typodescent : integer\n</code></pre> <p>The typographic descender for this font. This field should be combined with the sTypoAscender and sTypoLineGap values to determine default line spacing. https://learn.microsoft.com/en-us/typography/opentype/spec/os2#stypodescender</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_typolinegap","title":"FontloaderPfminfo.os2_typolinegap","text":"<pre><code>FontloaderPfminfo.os2_typolinegap : integer\n</code></pre> <p>The typographic line gap for this font. This field should be combined with the sTypoAscender and sTypoDescender values to determine default line spacing. https://learn.microsoft.com/en-us/typography/opentype/spec/os2#stypolinegap</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_winascent","title":"FontloaderPfminfo.os2_winascent","text":"<pre><code>FontloaderPfminfo.os2_winascent : integer\n</code></pre> <p>https://learn.microsoft.com/en-us/typography/opentype/spec/os2#uswinascent</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_windescent","title":"FontloaderPfminfo.os2_windescent","text":"<pre><code>FontloaderPfminfo.os2_windescent : integer\n</code></pre> <p>https://learn.microsoft.com/en-us/typography/opentype/spec/os2#uswindescent</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_subxsize","title":"FontloaderPfminfo.os2_subxsize","text":"<pre><code>FontloaderPfminfo.os2_subxsize : integer\n</code></pre> <p>The recommended horizontal size in font design units for subscripts for this font. Should be &gt; 0. https://learn.microsoft.com/en-us/typography/opentype/spec/os2#ysubscriptxsize</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_subysize","title":"FontloaderPfminfo.os2_subysize","text":"<pre><code>FontloaderPfminfo.os2_subysize : integer\n</code></pre> <p>The recommended vertical size in font design units for subscripts for this font. Should be &gt; 0. https://learn.microsoft.com/en-us/typography/opentype/spec/os2#ysubscriptysize</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_subxoff","title":"FontloaderPfminfo.os2_subxoff","text":"<pre><code>FontloaderPfminfo.os2_subxoff : integer\n</code></pre> <p>The recommended horizontal offset in font design units for subscripts for this font. https://learn.microsoft.com/en-us/typography/opentype/spec/os2#ysubscriptxoffset</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_subyoff","title":"FontloaderPfminfo.os2_subyoff","text":"<pre><code>FontloaderPfminfo.os2_subyoff : integer\n</code></pre> <p>The recommended vertical offset in font design units from the baseline for subscripts for this font. https://learn.microsoft.com/en-us/typography/opentype/spec/os2#ysubscriptyoffset</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_supxsize","title":"FontloaderPfminfo.os2_supxsize","text":"<pre><code>FontloaderPfminfo.os2_supxsize : integer\n</code></pre> <p>The recommended horizontal size in font design units for superscripts for this font. Should be &gt; 0. https://learn.microsoft.com/en-us/typography/opentype/spec/os2#ysuperscriptxsize</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_supysize","title":"FontloaderPfminfo.os2_supysize","text":"<pre><code>FontloaderPfminfo.os2_supysize : integer\n</code></pre> <p>The recommended vertical size in font design units for superscripts for this font. Should be &gt; 0. https://learn.microsoft.com/en-us/typography/opentype/spec/os2#ysuperscriptysize</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_supxoff","title":"FontloaderPfminfo.os2_supxoff","text":"<pre><code>FontloaderPfminfo.os2_supxoff : integer\n</code></pre> <p>The recommended horizontal offset in font design units for superscripts for this font. https://learn.microsoft.com/en-us/typography/opentype/spec/os2#ysuperscriptxoffset</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_supyoff","title":"FontloaderPfminfo.os2_supyoff","text":"<pre><code>FontloaderPfminfo.os2_supyoff : integer\n</code></pre> <p>The recommended vertical offset in font design units from the baseline for superscripts for this font. https://learn.microsoft.com/en-us/typography/opentype/spec/os2#ysuperscriptyoffset</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_strikeysize","title":"FontloaderPfminfo.os2_strikeysize","text":"<pre><code>FontloaderPfminfo.os2_strikeysize : integer\n</code></pre> <p>Thickness of the strikeout stroke in font design units. Should be &gt; 0. https://learn.microsoft.com/en-us/typography/opentype/spec/os2#ystrikeoutsize</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_strikeypos","title":"FontloaderPfminfo.os2_strikeypos","text":"<pre><code>FontloaderPfminfo.os2_strikeypos : integer\n</code></pre> <p>The position of the top of the strikeout stroke relative to the baseline in font design units. https://learn.microsoft.com/en-us/typography/opentype/spec/os2#ystrikeoutposition</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_family_class","title":"FontloaderPfminfo.os2_family_class","text":"<pre><code>FontloaderPfminfo.os2_family_class : integer\n</code></pre> <p>This field provides a classification of font-family design. # https://learn.microsoft.com/en-us/typography/opentype/spec/os2#sfamilyclass</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_xheight","title":"FontloaderPfminfo.os2_xheight","text":"<pre><code>FontloaderPfminfo.os2_xheight : integer\n</code></pre> <p>The height of lower case letters such as \u201cx\u201d</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_capheight","title":"FontloaderPfminfo.os2_capheight","text":"<pre><code>FontloaderPfminfo.os2_capheight : integer\n</code></pre> <p>This metric specifies the distance between the baseline and the approximate height of uppercase letters measured in font design units. https://learn.microsoft.com/en-us/typography/opentype/spec/os2#scapheight</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_defaultchar","title":"FontloaderPfminfo.os2_defaultchar","text":"<pre><code>FontloaderPfminfo.os2_defaultchar : integer\n</code></pre> <p>This is the Unicode code point, in UTF-16 encoding, of a character that can be used for a default glyph if a requested character is not supported in the font. https://learn.microsoft.com/en-us/typography/opentype/spec/os2#scapheight</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_breakchar","title":"FontloaderPfminfo.os2_breakchar","text":"<pre><code>FontloaderPfminfo.os2_breakchar : integer\n</code></pre> <p>This is the Unicode code point, in UTF-16 encoding, of a character that can be used as a default break character. https://learn.microsoft.com/en-us/typography/opentype/spec/os2#usbreakchar</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfoos2_vendor","title":"FontloaderPfminfo.os2_vendor","text":"<pre><code>FontloaderPfminfo.os2_vendor : string\n</code></pre> <p>The four character identifier for the vendor of the given typeface. https://learn.microsoft.com/en-us/typography/opentype/spec/os2#achvendid</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfocodepages","title":"FontloaderPfminfo.codepages","text":"<pre><code>FontloaderPfminfo.codepages : table\n</code></pre> <p>A two-number array of encoded code pages</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfounicoderages","title":"FontloaderPfminfo.unicoderages","text":"<pre><code>FontloaderPfminfo.unicoderages : table\n</code></pre> <p>A four-number array of encoded unicode ranges</p>"},{"location":"types/FontloaderPfminfo/#fontloaderpfminfopanose","title":"FontloaderPfminfo.panose","text":"<pre><code>FontloaderPfminfo.panose : table\n</code></pre>"},{"location":"types/FontloaderPrivate/","title":"alias FontloaderPrivate","text":"<pre><code>(alias) FontloaderPrivate = string&lt;string,string&gt;\n</code></pre> <p>This is the font's private PostScript dictionary, if any. Keys and values are both strings.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L2035-L2039</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderRemap/","title":"class FontloaderRemap","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1353-L1359</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderRemap/#fields","title":"fields","text":""},{"location":"types/FontloaderRemap/#fontloaderremapfirstenc","title":"FontloaderRemap.firstenc","text":"<pre><code>FontloaderRemap.firstenc : integer\n</code></pre>"},{"location":"types/FontloaderRemap/#fontloaderremaplastenc","title":"FontloaderRemap.lastenc","text":"<pre><code>FontloaderRemap.lastenc : integer\n</code></pre>"},{"location":"types/FontloaderRemap/#fontloaderremapinfont","title":"FontloaderRemap.infont","text":"<pre><code>FontloaderRemap.infont : integer\n</code></pre>"},{"location":"types/FontloaderScripts/","title":"class FontloaderScripts","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1785-L1818</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderScripts/#fields","title":"fields","text":""},{"location":"types/FontloaderScripts/#fontloaderscriptsbaseline","title":"FontloaderScripts.baseline","text":"<pre><code>FontloaderScripts.baseline : table\n</code></pre>"},{"location":"types/FontloaderScripts/#fontloaderscriptsdefault_baseline","title":"FontloaderScripts.default_baseline","text":"<pre><code>FontloaderScripts.default_baseline : number\n</code></pre>"},{"location":"types/FontloaderScripts/#fontloaderscriptslang","title":"FontloaderScripts.lang","text":"<pre><code>FontloaderScripts.lang : FontloaderLang {\n    tag: string,\n    ascent: number,\n    descent: number,\n    features: table,\n}\n</code></pre>"},{"location":"types/FontloaderTexdata/","title":"class FontloaderTexdata","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L2096-L2107</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderTexdata/#fields","title":"fields","text":""},{"location":"types/FontloaderTexdata/#fontloadertexdatatype","title":"FontloaderTexdata.type","text":"<pre><code>FontloaderTexdata.type : unknown\n</code></pre>"},{"location":"types/FontloaderTexdata/#fontloadertexdataparams","title":"FontloaderTexdata.params","text":"<pre><code>FontloaderTexdata.params : table\n</code></pre> <p>22 font numeric parameters</p>"},{"location":"types/FontloaderTrueTypeNames/","title":"class FontloaderTrueTypeNames","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L108-L115</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderTrueTypeNames/#fields","title":"fields","text":""},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenamescopyright","title":"FontloaderTrueTypeNames.copyright","text":"<pre><code>FontloaderTrueTypeNames.copyright : string\n</code></pre> <p>for example <code>Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved. DejaVu changes are in public domain, math extensions are in public domain.</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenamesfamily","title":"FontloaderTrueTypeNames.family","text":"<pre><code>FontloaderTrueTypeNames.family : string\n</code></pre> <p>for example <code>DejaVu Math TeX Gyre</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenamessubfamily","title":"FontloaderTrueTypeNames.subfamily","text":"<pre><code>FontloaderTrueTypeNames.subfamily : string\n</code></pre> <p>for example <code>Bold</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenamesuniqueid","title":"FontloaderTrueTypeNames.uniqueid","text":"<pre><code>FontloaderTrueTypeNames.uniqueid : string\n</code></pre> <p>for example <code>Monotype:Arial Bold:Version 2.82 (Microsoft)</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenamesfullname","title":"FontloaderTrueTypeNames.fullname","text":"<pre><code>FontloaderTrueTypeNames.fullname : string\n</code></pre> <p>for example <code>DejaVuMathTeXGyre-Regular</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenamesversion","title":"FontloaderTrueTypeNames.version","text":"<pre><code>FontloaderTrueTypeNames.version : string\n</code></pre> <p>for example <code>Version 2.82</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenamespostscriptname","title":"FontloaderTrueTypeNames.postscriptname","text":"<pre><code>FontloaderTrueTypeNames.postscriptname : string\n</code></pre> <p>for example <code>Arial-BoldMT</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenamestrademark","title":"FontloaderTrueTypeNames.trademark","text":"<pre><code>FontloaderTrueTypeNames.trademark : string\n</code></pre> <p>for example <code>Arial\u00ae Trademark of The Monotype Corporation plc registered in the US Pat &amp; TM Off. and elsewhere.</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenamesmanufacturer","title":"FontloaderTrueTypeNames.manufacturer","text":"<pre><code>FontloaderTrueTypeNames.manufacturer : string\n</code></pre> <p>for example <code>Monotype Typography</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenamesdesigner","title":"FontloaderTrueTypeNames.designer","text":"<pre><code>FontloaderTrueTypeNames.designer : string\n</code></pre> <p>for example <code>Monotype Type Drawing Office - Robin Nicholas, Patricia Saunders 1982</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenamesdescriptor","title":"FontloaderTrueTypeNames.descriptor","text":"<pre><code>FontloaderTrueTypeNames.descriptor : string\n</code></pre> <p>for example <code>Contemporary sans serif design, Arial contains ...</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenamesvenderurl","title":"FontloaderTrueTypeNames.venderurl","text":"<pre><code>FontloaderTrueTypeNames.venderurl : string\n</code></pre> <p>for example <code>http://www.monotype.com/html/mtname/ms_arial.html</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenamesdesignerurl","title":"FontloaderTrueTypeNames.designerurl","text":"<pre><code>FontloaderTrueTypeNames.designerurl : string\n</code></pre> <p>for example <code>http://www.monotype.com/html/mtname/ms_welcome.html</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenameslicense","title":"FontloaderTrueTypeNames.license","text":"<pre><code>FontloaderTrueTypeNames.license : string\n</code></pre> <p>for example <code>NOTIFICATION OF LICENSE AGREEMENT\\r\\n\\r\\nThis typeface is the property of Monotype Typography and its use by you is covered under the terms of a license agreement. ...</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenameslicenseurl","title":"FontloaderTrueTypeNames.licenseurl","text":"<pre><code>FontloaderTrueTypeNames.licenseurl : string\n</code></pre> <p>for example <code>http://dejavu-fonts.org/wiki/License</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenamesidontknow","title":"FontloaderTrueTypeNames.idontknow","text":"<pre><code>FontloaderTrueTypeNames.idontknow : string\n</code></pre>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenamespreffamilyname","title":"FontloaderTrueTypeNames.preffamilyname","text":"<pre><code>FontloaderTrueTypeNames.preffamilyname : string\n</code></pre> <p>for example <code>JetBrains Mono NL</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenamesprefmodifiers","title":"FontloaderTrueTypeNames.prefmodifiers","text":"<pre><code>FontloaderTrueTypeNames.prefmodifiers : string\n</code></pre> <p>for example <code>65 Bold</code> or <code>Light Italic</code> or <code>SemiCondensed SemiBold</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenamescompatfull","title":"FontloaderTrueTypeNames.compatfull","text":"<pre><code>FontloaderTrueTypeNames.compatfull : string\n</code></pre> <p>for example <code>Noto Looped Lao ExtraCondensed SemiBold</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenamessampletext","title":"FontloaderTrueTypeNames.sampletext","text":"<pre><code>FontloaderTrueTypeNames.sampletext : string\n</code></pre> <p>for example <code>How razorback-jumping frogs can level six piqued gymnasts!</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenamescidfindfontname","title":"FontloaderTrueTypeNames.cidfindfontname","text":"<pre><code>FontloaderTrueTypeNames.cidfindfontname : string\n</code></pre> <p>for example <code>Vemana2000</code>.</p>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenameswwsfamily","title":"FontloaderTrueTypeNames.wwsfamily","text":"<pre><code>FontloaderTrueTypeNames.wwsfamily : string\n</code></pre>"},{"location":"types/FontloaderTrueTypeNames/#fontloadertruetypenameswwssubfamily","title":"FontloaderTrueTypeNames.wwssubfamily","text":"<pre><code>FontloaderTrueTypeNames.wwssubfamily : string\n</code></pre> <p>for example ``.</p>"},{"location":"types/FontloaderTtfTables/","title":"class FontloaderTtfTables","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L1454-L1461</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderTtfTables/#fields","title":"fields","text":""},{"location":"types/FontloaderTtfTables/#fontloaderttftablestag","title":"FontloaderTtfTables.tag","text":"<pre><code>FontloaderTtfTables.tag : string\n</code></pre>"},{"location":"types/FontloaderTtfTables/#fontloaderttftableslen","title":"FontloaderTtfTables.len","text":"<pre><code>FontloaderTtfTables.len : integer\n</code></pre>"},{"location":"types/FontloaderTtfTables/#fontloaderttftablesmaxlen","title":"FontloaderTtfTables.maxlen","text":"<pre><code>FontloaderTtfTables.maxlen : integer\n</code></pre>"},{"location":"types/FontloaderTtfTables/#fontloaderttftablesdata","title":"FontloaderTtfTables.data","text":"<pre><code>FontloaderTtfTables.data : integer\n</code></pre>"},{"location":"types/FontloaderValidationState/","title":"class FontloaderValidationState","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L2183-L2229</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderValidationState/#fields","title":"fields","text":""},{"location":"types/FontloaderValidationState/#fontloadervalidationstatebad_ps_fontname","title":"FontloaderValidationState.bad_ps_fontname","text":"<pre><code>FontloaderValidationState.bad_ps_fontname : string\n</code></pre>"},{"location":"types/FontloaderValidationState/#fontloadervalidationstatebad_glyph_table","title":"FontloaderValidationState.bad_glyph_table","text":"<pre><code>FontloaderValidationState.bad_glyph_table : table\n</code></pre>"},{"location":"types/FontloaderValidationState/#fontloadervalidationstatebad_cff_table","title":"FontloaderValidationState.bad_cff_table","text":"<pre><code>FontloaderValidationState.bad_cff_table : table\n</code></pre>"},{"location":"types/FontloaderValidationState/#fontloadervalidationstatebad_metrics_table","title":"FontloaderValidationState.bad_metrics_table","text":"<pre><code>FontloaderValidationState.bad_metrics_table : table\n</code></pre>"},{"location":"types/FontloaderValidationState/#fontloadervalidationstatebad_cmap_table","title":"FontloaderValidationState.bad_cmap_table","text":"<pre><code>FontloaderValidationState.bad_cmap_table : table\n</code></pre>"},{"location":"types/FontloaderValidationState/#fontloadervalidationstatebad_bitmaps_table","title":"FontloaderValidationState.bad_bitmaps_table","text":"<pre><code>FontloaderValidationState.bad_bitmaps_table : table\n</code></pre>"},{"location":"types/FontloaderValidationState/#fontloadervalidationstatebad_gx_table","title":"FontloaderValidationState.bad_gx_table","text":"<pre><code>FontloaderValidationState.bad_gx_table : table\n</code></pre>"},{"location":"types/FontloaderValidationState/#fontloadervalidationstatebad_ot_table","title":"FontloaderValidationState.bad_ot_table","text":"<pre><code>FontloaderValidationState.bad_ot_table : table\n</code></pre>"},{"location":"types/FontloaderValidationState/#fontloadervalidationstatebad_os2_version","title":"FontloaderValidationState.bad_os2_version","text":"<pre><code>FontloaderValidationState.bad_os2_version : any\n</code></pre>"},{"location":"types/FontloaderValidationState/#fontloadervalidationstatebad_sfnt_header","title":"FontloaderValidationState.bad_sfnt_header","text":"<pre><code>FontloaderValidationState.bad_sfnt_header : any\n</code></pre>"},{"location":"types/FontloaderVertHorizVariants/","title":"class FontloaderVertHorizVariants","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: luafflib.c#L914-L930</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FontloaderVertHorizVariants/#fields","title":"fields","text":""},{"location":"types/FontloaderVertHorizVariants/#fontloaderverthorizvariantsvariants","title":"FontloaderVertHorizVariants.variants","text":"<pre><code>FontloaderVertHorizVariants.variants : string\n</code></pre>"},{"location":"types/FontloaderVertHorizVariants/#fontloaderverthorizvariantsitalic_correction","title":"FontloaderVertHorizVariants.italic_correction","text":"<pre><code>FontloaderVertHorizVariants.italic_correction : number\n</code></pre>"},{"location":"types/FontloaderVertHorizVariants/#fontloaderverthorizvariantsparts","title":"FontloaderVertHorizVariants.parts","text":"<pre><code>FontloaderVertHorizVariants.parts : FontloaderParts[]\n</code></pre> <p>The <code>parts</code> table is an array of smaller tables.</p>"},{"location":"types/FractionNode/","title":"class FractionNode","text":"<ul> <li>supers: Node</li> </ul> <p>Warning: never assign a node list to the <code>num</code>, or <code>denom</code> field unless you are sure its internal link structure is correct, otherwise an error can result.</p> <p>Example:</p> <pre><code>assert.node_type(\"fraction\", nil, {\n  id = \"fraction (20)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"width (4)\",\n    \"num (5)\",\n    \"denom (6)\",\n    \"left (7)\",\n    \"right (8)\",\n    \"middle (9)\",\n    \"fam (10)\",\n    \"options (11)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L774-L783</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/FractionNode/#fields","title":"fields","text":""},{"location":"types/FractionNode/#fractionnodeattr","title":"FractionNode.attr","text":"<pre><code>FractionNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/FractionNode/#fractionnodewidth","title":"FractionNode.width","text":"<pre><code>FractionNode.width : integer\n</code></pre> <p>(optional) width of the fraction</p>"},{"location":"types/FractionNode/#fractionnodenum","title":"FractionNode.num","text":"<pre><code>FractionNode.num : KernNode {\n    subtype: KernNodeSubtype,\n    kern: integer,\n}\n</code></pre> <p>numerator</p>"},{"location":"types/FractionNode/#fractionnodedenom","title":"FractionNode.denom","text":"<pre><code>FractionNode.denom : KernNode {\n    subtype: KernNodeSubtype,\n    kern: integer,\n}\n</code></pre> <p>denominator</p>"},{"location":"types/FractionNode/#fractionnodeleft","title":"FractionNode.left","text":"<pre><code>FractionNode.left : DelimNode {\n    attr: Node,\n    small_char: integer,\n    small_fam: integer,\n    large_char: integer,\n    large_fam: integer,\n}\n</code></pre> <p>left side symbol</p>"},{"location":"types/FractionNode/#fractionnoderight","title":"FractionNode.right","text":"<pre><code>FractionNode.right : DelimNode {\n    attr: Node,\n    small_char: integer,\n    small_fam: integer,\n    large_char: integer,\n    large_fam: integer,\n}\n</code></pre> <p>right side symbol</p>"},{"location":"types/FractionNode/#fractionnodemiddle","title":"FractionNode.middle","text":"<pre><code>FractionNode.middle : DelimNode {\n    attr: Node,\n    small_char: integer,\n    small_fam: integer,\n    large_char: integer,\n    large_fam: integer,\n}\n</code></pre> <p>middle symbol</p>"},{"location":"types/FractionNode/#fractionnodeoptions","title":"FractionNode.options","text":"<pre><code>FractionNode.options : integer\n</code></pre> <p>bitset of rendering options</p>"},{"location":"types/GFile/","title":"class GFile","text":""},{"location":"types/GFile/#methods","title":"methods","text":""},{"location":"types/GFile/#gfileflush","title":"GFile.flush","text":"<pre><code>function GFile.flush()\n</code></pre> <p>This function takes no parameters and flushes all output to working file. The same as calling 'gzflush(file, Z_FINISH)' so writing to the file will most likely not work as expected. This is subject to change in the future if there is a strong reason for it to happen.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lgzip.c#L327-L329</li> </ul>"},{"location":"types/GFile/#gfileread","title":"GFile.read","text":"<pre><code>function GFile.read(\n  format1,\n  ...\n)\n</code></pre> <p>Reads the file file, according to the given formats, which specify what to read. For each format, the function returns a string with the characters read, or nil if it cannot read data with the specified format. When called without formats, it uses a default format that reads the entire next line (see below).</p> <p>The available formats are</p> <p><code>*a</code>   reads the whole file, starting at the current position. On end of file, it returns the empty string. <code>*l</code>   reads the next line (skipping the end of line), returning nil on end of file. This is the default format. number reads a string with up to that number of characters, returning nil on end of file. If number is zero, it reads nothing and returns an empty string, or nil on end of file.</p> <p>Unlink io.read, the <code>*n</code> format will not be available.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lgzip.c#L263-L265</li> </ul>"},{"location":"types/GFile/#gfilelines","title":"GFile.lines","text":"<pre><code>function GFile.lines()\n</code></pre> <p>Returns an iterator function that, each time it is called, returns a new line from the file. Therefore, the construction for line in file:lines() do ... end will iterate over all lines of the file. (Unlike gzip.lines, this function does not close the file when the loop ends.)</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lgzip.c#L152-L156</li> </ul>"},{"location":"types/GFile/#gfileseek","title":"GFile.seek","text":"<pre><code>function GFile.seek(\n  whence,\n  offset\n)\n</code></pre> <p>Sets and gets the file position, measured from the beginning of the file, to the position given by offset plus a base specified by the string whence, as follows:</p> <p><code>set</code> base is position 0 (beginning of the file); <code>cur</code> base is current position;</p> <p>In case of success, function seek returns the final file position, measured in bytes from the beginning of ---the file. If this function fails, it returns nil, plus a string describing the error. The default value for whence is <code>cur</code>, and for offset is 0. Therefore, the call file:seek() returns the ---current file position, without changing it; the call file:seek(\"set\") sets the position to the beginning of ---the file (and returns 0); and the call file:seek(\"end\") sets the position to the end of the file, and ---returns its size.</p> <p>This function is subject to limitations imposed by <code>gzseek</code> function from <code>zlib</code> library, such as the inability to use <code>end</code> as the base for seeking and the inability to seek backwards when writing.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lgzip.c#L310-L324</li> </ul>"},{"location":"types/GFile/#gfilewrite","title":"GFile.write","text":"<pre><code>function GFile.write(\n  value1,\n  ...\n)\n</code></pre> <p>Write the value of each of its arguments to the filehandle file.</p> <p>The arguments must be strings or numbers. To write other values, use tostring or string.format before write</p> <p>Example:</p> <pre><code>local g_file = gzip.open('test.gz', 'wb9')\nassert(g_file)\nfor i = 1, 10 do\n  g_file:write('This is line ' .. i, '\\n')\nend\ng_file:close()\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lgzip.c#L305-L307</li> </ul>"},{"location":"types/GFile/#gfileclose","title":"GFile.close","text":"<pre><code>function GFile.close()\n</code></pre> <p>Close the file.</p> <p>Example:</p> <pre><code>local g_file = gzip.open('test.gz', 'wb9')\nassert(g_file)\nfor i = 1, 10 do\n  g_file:write('This is line ' .. i, '\\n')\nend\ng_file:close()\n</code></pre>"},{"location":"types/GlueNode/","title":"class GlueNode","text":"<ul> <li>supers: Node</li> </ul> <p>A regular word space also results in a <code>spaceskip</code> subtype (this used to be a <code>userskip</code> with subtype zero).</p> <p>Example:</p> <pre><code>assert.node_type(\"glue\", nil, {\n  id = \"glue (12)\",\n  subtypes = {\n    \"userskip (0)\",\n    \"lineskip (1)\",\n    \"baselineskip (2)\",\n    \"parskip (3)\",\n    \"abovedisplayskip (4)\",\n    \"belowdisplayskip (5)\",\n    \"abovedisplayshortskip (6)\",\n    \"belowdisplayshortskip (7)\",\n    \"leftskip (8)\",\n    \"rightskip (9)\",\n    \"topskip (10)\",\n    \"splittopskip (11)\",\n    \"tabskip (12)\",\n    \"spaceskip (13)\",\n    \"xspaceskip (14)\",\n    \"parfillskip (15)\",\n    \"mathskip (16)\",\n    \"thinmuskip (17)\",\n    \"medmuskip (18)\",\n    \"thickmuskip (19)\",\n    \"conditionalmathskip (98)\",\n    \"muglue (99)\",\n    \"leaders (100)\",\n  },\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"leader (4)\",\n    \"width (5)\",\n    \"stretch (6)\",\n    \"shrink (7)\",\n    \"stretch_order (8)\",\n    \"shrink_order (9)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L785-L792</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/GlueNode/#fields","title":"fields","text":""},{"location":"types/GlueNode/#gluenodesubtype","title":"GlueNode.subtype","text":"<pre><code>GlueNode.subtype : GlueNodeSubtype\n</code></pre>"},{"location":"types/GlueNode/#gluenodeleader","title":"GlueNode.leader","text":"<pre><code>GlueNode.leader : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A pointer to a box or rule for leaders.</p>"},{"location":"types/GlueNode/#gluenodewidth","title":"GlueNode.width","text":"<pre><code>GlueNode.width : integer\n</code></pre> <p>The horizontal or vertical displacement.</p>"},{"location":"types/GlueNode/#gluenodestretch","title":"GlueNode.stretch","text":"<pre><code>GlueNode.stretch : integer\n</code></pre> <p>An extra (positive) displacement or stretch amount.</p>"},{"location":"types/GlueNode/#gluenodestretch_order","title":"GlueNode.stretch_order","text":"<pre><code>GlueNode.stretch_order : integer\n</code></pre> <p>Factor applied to stretch amount.</p>"},{"location":"types/GlueNode/#gluenodeshrink","title":"GlueNode.shrink","text":"<pre><code>GlueNode.shrink : integer\n</code></pre> <p>An extra (negative) displacement or shrink amount.</p>"},{"location":"types/GlueNode/#gluenodeshrink_order","title":"GlueNode.shrink_order","text":"<pre><code>GlueNode.shrink_order : integer\n</code></pre> <p>Factor applied to shrink amount.</p>"},{"location":"types/GlueNodeSubtype/","title":"alias GlueNodeSubtype","text":"<pre><code>(alias) GlueNodeSubtype = (0|1|2|3|4|5|6|7|8|9...)\n    | 0 -- userskip\n    | 1 -- lineskip\n    | 2 -- baselineskip\n    | 3 -- parskip\n    | 4 -- abovedisplayskip\n    | 5 -- belowdisplayskip\n    | 6 -- abovedisplayshortskip\n    | 7 -- belowdisplayshortskip\n    | 8 -- leftskip\n    | 9 -- rightskip\n    | 10 -- topskip\n    | 11 -- splittopskip\n    | 12 -- tabskip\n    | 13 -- spaceskip\n    | 14 -- xspaceskip\n    | 15 -- parfillskip\n    | 16 -- mathskip\n    | 17 -- thinmuskip\n    | 18 -- medmuskip\n    | 19 -- thickmuskip\n    | 98 -- conditionalmathskip\n    | 99 -- muglue\n    | 100 -- leaders\n    | 101 -- cleaders\n    | 102 -- xleaders\n    | 103 -- gleaders\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/GlueOrder/","title":"alias GlueOrder","text":"<pre><code>(alias) GlueOrder = (0|1|2|3|4)\n</code></pre> <p>A number in the range <code>[0,4]</code> indicating the glue order.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/GlueParameter/","title":"alias GlueParameter","text":"<pre><code>(alias) GlueParameter = (\"abovedisplayshortskip\"|\"abovedisplayskip\"|\"baselineskip\"|\"belowdisplayshortskip\"|\"belowdisplayskip\"|\"leftskip\"|\"lineskip\"|\"parfillskip\"|\"parskip\"|\"rightskip\"...)\n    | \"abovedisplayshortskip\" -- Glue above a display if the line preceding the display was short. Default: `0pt plus 3pt`.\n    | \"abovedisplayskip\" -- Glue above a display. Default: `12pt plus 3pt minus 9pt`.\n    | \"baselineskip\" -- The \u2018ideal\u2019 baseline distance between neighbouring boxes on a vertical list. Default: `12pt`.\n    | \"belowdisplayshortskip\" -- Glue above/below a display if the line preceding the display was short. Default: `0pt plus 3pt` and `7pt plus 3pt minus 4pt` respectively.\n    | \"belowdisplayskip\" -- Glue below a display. Default: `12pt plus 3pt minus 9pt`.\n    | \"leftskip\" -- Glue that is placed to the left of all lines of a paragraph.\n    | \"lineskip\" -- Glue added if the distance between bottom and top of neighbouring boxes is less than `\\lineskiplimit`. Default: `1pt`.\n    | \"parfillskip\" -- Glue that is placed between the last element of the paragraph and the line end. Default: `0pt plus 1fil`.\n    | \"parskip\" -- Amount of glue added to the surrounding vertical list when a paragraph starts. Default: `0pt plus 1pt`.\n    | \"rightskip\" -- Glue that is placed to the right of all lines of a paragraph.\n    | \"spaceskip\" -- Interword glue if non-zero.\n    | \"splittopskip\" -- Minimum distance between the top of what remains after a `\\vsplit` operation, and the first item in that box. Default: `10pt`.\n    | \"tabskip\" -- Amount of glue in between columns (rows) of an `\\halign` (`\\valign`).\n    | \"topskip\" -- Minimum distance between the top of the page box and the baseline of the first box on the page. Default: `10pt`.\n    | \"xspaceskip\" -- Interword glue if non-zero and `\\spacefactor` \u2265 2000.\n</code></pre> <p>The glue parameters accept and return a userdata object that represents a <code>glue_spec</code> node.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L479-493</li> </ul>"},{"location":"types/GlueSet/","title":"alias GlueSet","text":"<pre><code>(alias) GlueSet = number\n</code></pre> <p>The calculated glue ratio.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/GlueSign/","title":"alias GlueSign","text":"<pre><code>(alias) GlueSign = (0|1|2)\n    | 0 -- `normal`,\n    | 1 -- `stretching`,\n    | 2 -- `shrinking`\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/GlueSpecNode/","title":"class GlueSpecNode","text":"<ul> <li>supers: Node</li> </ul> <p>Skips are about the only type of data objects in traditional TeX that are not a simple value. They are inserted when TeX sees a space in the text flow but also by <code>hskip</code> and <code>vskip</code>. The structure that represents the glue components of a skip is called a <code>glue_spec</code>.</p> <p>The effective width of some glue subtypes depends on the stretch or shrink needed to make the encapsulating box fit its dimensions. For instance, in a paragraph lines normally have glue representing spaces and these stretch or shrink to make the content fit in the available space. The <code>effective_glue</code> function that takes a glue node and a parent (hlist or vlist) returns the effective width of that glue item. When you pass <code>true</code> as third argument the value will be rounded.</p> <p>A <code>glue_spec</code> node is a special kind of node that is used for storing a set of glue values in registers. Originally they were also used to store properties of glue nodes (using a system of reference counts) but we now keep these properties in the glue nodes themselves, which gives a cleaner interface to Lua.</p> <p>The indirect spec approach was in fact an optimization in the original TeX code. First of all it can save quite some memory because all these spaces that become glue now share the same specification (only the reference count is incremented), and zero testing is also a bit faster because only the pointer has to be checked (this is no longer true for engines that implement for instance protrusion where we really need to ensure that zero is zero when we test for bounds). Another side effect is that glue specifications are read-only, so in the end copies need to be made when they are used from Lua (each assignment to a field can result in a new copy). So in the end the advantages of sharing are not that high (and nowadays memory is less an issue, also given that a glue node is only a few memory words larger than a spec).</p> <p>In addition there are the <code>width</code>, <code>stretch</code> <code>stretch_order</code>, <code>shrink</code>, and <code>shrink_order</code> fields. Note that we use the key <code>width</code> in both horizontal and vertical glue. This suits the TeX internals well so we decided to stick to that naming.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L794-L799</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/GlueSpecNode/#fields","title":"fields","text":""},{"location":"types/GlueSpecNode/#gluespecnodewidth","title":"GlueSpecNode.width","text":"<pre><code>GlueSpecNode.width : integer\n</code></pre> <p>The horizontal or vertical displacement.</p>"},{"location":"types/GlueSpecNode/#gluespecnodestretch","title":"GlueSpecNode.stretch","text":"<pre><code>GlueSpecNode.stretch : integer\n</code></pre> <p>An extra (positive) displacement or stretch amount.</p>"},{"location":"types/GlueSpecNode/#gluespecnodestretch_order","title":"GlueSpecNode.stretch_order","text":"<pre><code>GlueSpecNode.stretch_order : integer\n</code></pre> <p>Factor applied to stretch amount.</p>"},{"location":"types/GlueSpecNode/#gluespecnodeshrink","title":"GlueSpecNode.shrink","text":"<pre><code>GlueSpecNode.shrink : integer\n</code></pre> <p>An extra (negative) displacement or shrink amount.</p>"},{"location":"types/GlueSpecNode/#gluespecnodeshrink_order","title":"GlueSpecNode.shrink_order","text":"<pre><code>GlueSpecNode.shrink_order : integer\n</code></pre> <p>Factor applied to shrink amount.</p>"},{"location":"types/GlyphExtens/","title":"class GlyphExtens","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/GlyphExtens/#fields","title":"fields","text":""},{"location":"types/GlyphExtens/#glyphextensx_bearing","title":"GlyphExtens.x_bearing","text":"<pre><code>GlyphExtens.x_bearing : integer\n</code></pre> <p>left side of glyph from origin.</p>"},{"location":"types/GlyphExtens/#glyphextensy_bearing","title":"GlyphExtens.y_bearing","text":"<pre><code>GlyphExtens.y_bearing : integer\n</code></pre> <p>top side of glyph from origin.</p>"},{"location":"types/GlyphExtens/#glyphextenswidth","title":"GlyphExtens.width","text":"<pre><code>GlyphExtens.width : integer\n</code></pre> <p>distance from left to right side.</p>"},{"location":"types/GlyphExtens/#glyphextensheight","title":"GlyphExtens.height","text":"<pre><code>GlyphExtens.height : integer\n</code></pre> <p>distance from top to bottom side.</p>"},{"location":"types/GlyphInfoCallback/","title":"alias GlyphInfoCallback","text":"<pre><code>(alias) GlyphInfoCallback = fun(g: Node) -&gt; string?\n</code></pre> <p>The <code>glyph_info</code> callback can be set to report a useful representation of a glyph.</p> <p>When <code>nil</code> is returned the character code is printed, otherwise the returned string is used. By default the UTF-8 representation is shown which is not always that useful, especially when there is no real representation. Keep in mind that setting this callback can change the log in an incompatible way.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: printing.c#L1036</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/GlyphNode/","title":"class GlyphNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"glyph\", nil, {\n  id = \"glyph (29)\",\n  subtypes = {\n    \"unset (0)\",\n    \"character (1)\",\n    \"ligature (2)\",\n    \"ghost (4)\",\n    \"left (8)\",\n    \"right (16)\",\n  },\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"char (4)\",\n    \"font (5)\",\n    \"lang (6)\",\n    \"left (7)\",\n    \"right (8)\",\n    \"uchyph (9)\",\n    \"components (10)\",\n    \"xoffset (11)\",\n    \"yoffset (12)\",\n    \"width (13)\",\n    \"height (14)\",\n    \"depth (15)\",\n    \"expansion_factor (16)\",\n    \"data (17)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L801-L816</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/GlyphNode/#fields","title":"fields","text":""},{"location":"types/GlyphNode/#glyphnodesubtype","title":"GlyphNode.subtype","text":"<pre><code>GlyphNode.subtype : GlyphNodeSubtype\n</code></pre> <p>A bit field</p>"},{"location":"types/GlyphNode/#glyphnodeattr","title":"GlyphNode.attr","text":"<pre><code>GlyphNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/GlyphNode/#glyphnodechar","title":"GlyphNode.char","text":"<pre><code>GlyphNode.char : integer\n</code></pre> <p>The character index in the font.</p>"},{"location":"types/GlyphNode/#glyphnodefont","title":"GlyphNode.font","text":"<pre><code>GlyphNode.font : integer\n</code></pre> <p>The font identifier.</p>"},{"location":"types/GlyphNode/#glyphnodelang","title":"GlyphNode.lang","text":"<pre><code>GlyphNode.lang : integer\n</code></pre> <p>The language identifier.</p>"},{"location":"types/GlyphNode/#glyphnodeleft","title":"GlyphNode.left","text":"<pre><code>GlyphNode.left : integer\n</code></pre> <p>The frozen <code>\\lefthyphenmnin</code> value.</p>"},{"location":"types/GlyphNode/#glyphnoderight","title":"GlyphNode.right","text":"<pre><code>GlyphNode.right : integer\n</code></pre> <p>The frozen <code>\\righthyphenmnin</code> value.</p>"},{"location":"types/GlyphNode/#glyphnodeuchyph","title":"GlyphNode.uchyph","text":"<pre><code>GlyphNode.uchyph : boolean\n</code></pre> <p>The frozen <code>uchyph</code> value.</p>"},{"location":"types/GlyphNode/#glyphnodecomponents","title":"GlyphNode.components","text":"<pre><code>GlyphNode.components : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A Pointer to ligature components.</p>"},{"location":"types/GlyphNode/#glyphnodexoffset","title":"GlyphNode.xoffset","text":"<pre><code>GlyphNode.xoffset : integer\n</code></pre> <p>A virtual displacement in horizontal direction.</p>"},{"location":"types/GlyphNode/#glyphnodeyoffset","title":"GlyphNode.yoffset","text":"<pre><code>GlyphNode.yoffset : integer\n</code></pre> <p>A virtual displacement in vertical direction.</p>"},{"location":"types/GlyphNode/#glyphnodewidth","title":"GlyphNode.width","text":"<pre><code>GlyphNode.width : integer\n</code></pre> <p>The (original) width of the character.</p>"},{"location":"types/GlyphNode/#glyphnodeheight","title":"GlyphNode.height","text":"<pre><code>GlyphNode.height : integer\n</code></pre> <p>The (original) height of the character.</p>"},{"location":"types/GlyphNode/#glyphnodedepth","title":"GlyphNode.depth","text":"<pre><code>GlyphNode.depth : integer\n</code></pre> <p>The (original) depth of the character.</p>"},{"location":"types/GlyphNode/#glyphnodeexpansion_factor","title":"GlyphNode.expansion_factor","text":"<pre><code>GlyphNode.expansion_factor : integer\n</code></pre> <p>The to be applied expansion factor.</p>"},{"location":"types/GlyphNode/#glyphnodedata","title":"GlyphNode.data","text":"<pre><code>GlyphNode.data : integer\n</code></pre> <p>A general purpose field for users (we had room for it).</p>"},{"location":"types/GlyphNodeSubtype/","title":"alias GlyphNodeSubtype","text":"<pre><code>(alias) GlyphNodeSubtype = (0|1|2|3|4)\n    | 0 -- character\n    | 1 -- ligature\n    | 2 -- ghost\n    | 3 -- left\n    | 4 -- right\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L613-L618</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/GlyphNotFoundCallback/","title":"alias GlyphNotFoundCallback","text":"<pre><code>(alias) GlyphNotFoundCallback = fun(id: number, char: number)\n</code></pre> <p>The <code>glyph_not_found</code> callback, when set, kicks in when the backend cannot insert a glyph. When no callback is defined a message is written to the log.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: texfont.c#L364</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbBuffer/","title":"class HbBuffer","text":"<p>The main structure holding the input text and its properties before shaping, and output glyphs and their information after shaping.</p> <p>Lua wrapper for <code>hb_buffer_t</code> type.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luaharfbuzz.h#L15</li> <li>HarfBuzz online documentation: hb_buffer_t</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbBuffer/#methods","title":"methods","text":""},{"location":"types/HbBuffer/#hbbuffernew","title":"HbBuffer.new","text":"<pre><code>function HbBuffer.new() -&gt;  HbBuffer {\n    CLUSTER_LEVEL_MONOTONE_GRAPHEMES = 0,\n    CLUSTER_LEVEL_MONOTONE_CHARACTERS = 1,\n    CLUSTER_LEVEL_CHARACTERS = 2,\n    CLUSTER_LEVEL_DEFAULT = 0,\n    GLYPH_FLAG_UNSAFE_TO_BREAK = 1,\n    GLYPH_FLAG_DEFINED = 3,\n    new = function,\n    add_utf8 = function,\n    add_codepoints = function,\n    set_direction = function,\n    get_direction = function,\n    set_script = function,\n    ...(+9)\n}\n</code></pre> <p>Create a new <code>Buffer</code> object with all properties to defaults.</p> <p>Wraps <code>hb_buffer_create</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: buffer.c#L3-L12</li> <li>HarfBuzz online documentation: hb_buffer_create</li> </ul>"},{"location":"types/HbBuffer/#hbbufferadd_utf8","title":"HbBuffer.add_utf8","text":"<p><pre><code>function HbBuffer.add_utf8(\n  text: string,\n  item_offset: integer?,\n  item_length: integer?\n)\n</code></pre> @param <code>text</code> - UTF8 encoded string.</p> <p>@param <code>item_offset</code> - The offset of the first character to add to the <code>buffer</code>.</p> <p>@param <code>item_length</code> - The number of characters to add to the buffer , or <code>-1</code> for the end of text.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Replace invalid UTF-8 characters with the buffer replacement code point.</p> <p>Wraps <code>hb_buffer_add_utf8</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: buffer.c#L178-L191</li> <li>HarfBuzz online documentation: hb_buffer_add_utf8</li> </ul>"},{"location":"types/HbBuffer/#hbbufferadd_codepoints","title":"HbBuffer.add_codepoints","text":"<p><pre><code>function HbBuffer.add_codepoints(\n  text: integer[],\n  item_offset: integer?,\n  item_length: integer?\n)\n</code></pre> @param <code>text</code> - with codepoints as lua numbers.</p> <p>@param <code>item_offset</code> - The offset of the first character to add to the <code>buffer</code>.</p> <p>@param <code>item_length</code> - The number of characters to add to the buffer , or <code>-1</code> for the end of text.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Appends characters from text array to buffer .</p> <p>The <code>item_offset</code> is the position of the first character from text that will be appended, and <code>item_length</code> is the number of character. When shaping part of a larger text (e.g. a run of text from a paragraph), instead of passing just the substring corresponding to the run, it is preferable to pass the whole paragraph and specify the run start and length as <code>item_offset</code> and <code>item_length</code>, respectively, to give HarfBuzz the full context to be able, for example, to do cross-run Arabic shaping or properly handle combining marks at stat of run.</p> <p>This function does not check the validity of <code>text</code>, it is up to the caller to ensure it contains a valid Unicode scalar values. In contrast, <code>Buffer:add_utf8()</code> can be used that takes similar input but performs sanity-check on the input.</p> <p>Wraps <code>hb_buffer_add_codepoints</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: buffer.c#L137-L162</li> <li>HarfBuzz online documentation: hb_buffer_add_codepoints</li> </ul> <p>@see HbBuffer.add_utf8</p>"},{"location":"types/HbBuffer/#hbbufferset_direction","title":"HbBuffer.set_direction","text":"<p><pre><code>function HbBuffer.set_direction(dir: HbDirection {\n    LTR = integer?,\n    RTL = integer?,\n    TTB = integer?,\n    BTT = integer?,\n    new = function,\n    __to_string = function,\n    __eq = function,\n    is_valid = function,\n    is_horizontal = function,\n    is_vertical = function,\n    is_forward = function,\n    is_backward = function,\n    ...(+0)\n})\n</code></pre> @param <code>dir</code> - A <code>Direction</code> object.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Wraps <code>hb_buffer_set_direction</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: buffer.c#L32-L38</li> <li>HarfBuzz online documentation: hb_buffer_set_direction</li> </ul>"},{"location":"types/HbBuffer/#hbbufferget_direction","title":"HbBuffer.get_direction","text":"<pre><code>function HbBuffer.get_direction() -&gt;  HbDirection {\n    LTR = integer?,\n    RTL = integer?,\n    TTB = integer?,\n    BTT = integer?,\n    new = function,\n    __to_string = function,\n    __eq = function,\n    is_valid = function,\n    is_horizontal = function,\n    is_vertical = function,\n    is_forward = function,\n    is_backward = function,\n    ...(+0)\n}\n</code></pre> <p>@return  - A <code>Direction</code> object.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Wraps <code>hb_buffer_get_direction</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: buffer.c#L21-L30</li> <li>HarfBuzz online documentation: hb_buffer_get_direction</li> </ul>"},{"location":"types/HbBuffer/#hbbufferset_script","title":"HbBuffer.set_script","text":"<p><pre><code>function HbBuffer.set_script(script: HbScript {\n    COMMON = string,\n    INHERITED = string,\n    UNKNOWN = string,\n    INVALID = string,\n    new = function,\n    from_iso15924_tag = function,\n    to_iso15924_tag = function,\n    __to_string = function,\n    __eq = function,\n})\n</code></pre> @param <code>script</code> - A <code>Script</code> object.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Wraps <code>hb_buffer_set_script</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: buffer.c#L86-L92</li> <li>HarfBuzz online documentation: hb_buffer_set_script</li> </ul>"},{"location":"types/HbBuffer/#hbbufferget_script","title":"HbBuffer.get_script","text":"<pre><code>function HbBuffer.get_script() -&gt;  HbScript {\n    COMMON = string,\n    INHERITED = string,\n    UNKNOWN = string,\n    INVALID = string,\n    new = function,\n    from_iso15924_tag = function,\n    to_iso15924_tag = function,\n    __to_string = function,\n    __eq = function,\n}\n</code></pre> <p>@return  - A <code>Script</code> object.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Wraps <code>hb_buffer_get_script</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: buffer.c#L75-L84</li> <li>HarfBuzz online documentation: hb_buffer_get_script</li> </ul>"},{"location":"types/HbBuffer/#hbbufferset_language","title":"HbBuffer.set_language","text":"<p><pre><code>function HbBuffer.set_language(lang: HbLanguage {\n    INVALID = HbLanguage,\n    new = function,\n    __tostring = function,\n    __eq = function,\n})\n</code></pre> @param <code>lang</code> - A <code>Language</code> object</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Wraps <code>hb_buffer_set_language</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: buffer.c#L67-L73</li> <li>HarfBuzz online documentation: hb_buffer_set_language</li> </ul>"},{"location":"types/HbBuffer/#hbbufferget_language","title":"HbBuffer.get_language","text":"<pre><code>function HbBuffer.get_language() -&gt;  HbLanguage {\n    INVALID = HbLanguage,\n    new = function,\n    __tostring = function,\n    __eq = function,\n}\n</code></pre> <p>@return  - A <code>Language</code> object</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Wraps <code>hb_buffer_get_language</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: buffer.c#L56-L65</li> <li>HarfBuzz online documentation: hb_buffer_get_language</li> </ul>"},{"location":"types/HbBuffer/#hbbufferreverse","title":"HbBuffer.reverse","text":"<pre><code>function HbBuffer.reverse()\n</code></pre> <p>Wraps <code>hb_buffer_reverse</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: buffer.c#L247-L252</li> <li>HarfBuzz online documentation: hb_buffer_reverse</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbBuffer/#hbbufferget_length","title":"HbBuffer.get_length","text":"<pre><code>function HbBuffer.get_length()\n</code></pre> <p>Wraps <code>hb_buffer_get_length</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: buffer.c#L254-L259</li> <li>HarfBuzz online documentation: hb_buffer_get_length</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbBuffer/#hbbufferget_cluster_level","title":"HbBuffer.get_cluster_level","text":"<pre><code>function HbBuffer.get_cluster_level() -&gt; level integer\n</code></pre> <p>@return <code>level</code> - see Cluster Levels</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Wraps <code>hb_buffer_get_cluster_level</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: buffer.c#L261-L266</li> <li>HarfBuzz online documentation: hb_buffer_get_cluster_level</li> </ul>"},{"location":"types/HbBuffer/#hbbufferset_cluster_level","title":"HbBuffer.set_cluster_level","text":"<p><pre><code>function HbBuffer.set_cluster_level(level: integer)\n</code></pre> @param <code>level</code> - see Cluster Levels</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Wraps <code>hb_buffer_set_cluster_level</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: buffer.c#L268-L275</li> <li>HarfBuzz online documentation: hb_buffer_set_cluster_level</li> </ul>"},{"location":"types/HbBuffer/#hbbufferguess_segment_properties","title":"HbBuffer.guess_segment_properties","text":"<pre><code>function HbBuffer.guess_segment_properties()\n</code></pre> <p>Wraps <code>hb_buffer_guess_segment_properties</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: buffer.c#L14-L19</li> <li>HarfBuzz online documentation: hb_buffer_guess_segment_properties</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbBuffer/#hbbufferget_glyphs","title":"HbBuffer.get_glyphs","text":"<pre><code>function HbBuffer.get_glyphs() -&gt;  HbGlyph[]\n</code></pre> <p>Helper method to get shaped glyph data. Calls <code>hb_buffer_get_glyph_infos</code>, <code>hb_buffer_get_glyph_positions</code> and <code>hb_glyph_info_get_glyph_flags</code>, and assembles the data into a Lua table.</p> <p>Reference:</p> <ul> <li>HarfBuzz online documentation: hb_buffer_get_glyph_infos</li> </ul>"},{"location":"types/HbBuffer/#fields","title":"fields","text":""},{"location":"types/HbBuffer/#hbbuffercluster_level_monotone_graphemes","title":"HbBuffer.CLUSTER_LEVEL_MONOTONE_GRAPHEMES","text":"<pre><code>HbBuffer.CLUSTER_LEVEL_MONOTONE_GRAPHEMES: integer = 0\n</code></pre> <p>Cluster Levels. See Harfbuzz docs for more details about what each of these levels mean.</p> <p>Wraps <code>HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES</code>.</p> <p>Reference:</p> <ul> <li>HarfBuzz online documentation: hb_buffer_cluster_level_t</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbBuffer/#hbbuffercluster_level_monotone_characters","title":"HbBuffer.CLUSTER_LEVEL_MONOTONE_CHARACTERS","text":"<pre><code>HbBuffer.CLUSTER_LEVEL_MONOTONE_CHARACTERS: integer = 1\n</code></pre> <p>Wraps <code>HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS</code>.</p> <p>Reference:</p> <ul> <li>HarfBuzz online documentation: hb_buffer_cluster_level_t</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbBuffer/#hbbuffercluster_level_characters","title":"HbBuffer.CLUSTER_LEVEL_CHARACTERS","text":"<pre><code>HbBuffer.CLUSTER_LEVEL_CHARACTERS: integer = 2\n</code></pre> <p>Wraps <code>HB_BUFFER_CLUSTER_LEVEL_CHARACTERS</code>.</p> <p>Reference:</p> <ul> <li>HarfBuzz online documentation: hb_buffer_cluster_level_t</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbBuffer/#hbbuffercluster_level_default","title":"HbBuffer.CLUSTER_LEVEL_DEFAULT","text":"<pre><code>HbBuffer.CLUSTER_LEVEL_DEFAULT: integer = 0\n</code></pre> <p>Wraps <code>HB_BUFFER_CLUSTER_LEVEL_DEFAULT</code>.</p> <p>Reference:</p> <ul> <li>HarfBuzz online documentation: hb_buffer_cluster_level_t</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbBuffer/#hbbufferglyph_flag_unsafe_to_break","title":"HbBuffer.GLYPH_FLAG_UNSAFE_TO_BREAK","text":"<pre><code>HbBuffer.GLYPH_FLAG_UNSAFE_TO_BREAK: integer = 1\n</code></pre> <p>Wraps <code>HB_GLYPH_FLAG_UNSAFE_TO_BREAK</code>.</p> <p>Reference:</p> <ul> <li>HarfBuzz online documentation: hb_glyph_flags_t</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbBuffer/#hbbufferglyph_flag_defined","title":"HbBuffer.GLYPH_FLAG_DEFINED","text":"<pre><code>HbBuffer.GLYPH_FLAG_DEFINED: integer = 3\n</code></pre> <p>Wraps <code>HB_GLYPH_FLAG_DEFINED</code>.</p> <p>Reference:</p> <ul> <li>HarfBuzz online documentation: hb_glyph_flags_t</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbColor/","title":"class HbColor","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbColor/#fields","title":"fields","text":""},{"location":"types/HbColor/#hbcolorred","title":"HbColor.red","text":"<pre><code>HbColor.red : integer\n</code></pre>"},{"location":"types/HbColor/#hbcolorgreen","title":"HbColor.green","text":"<pre><code>HbColor.green : integer\n</code></pre>"},{"location":"types/HbColor/#hbcolorblue","title":"HbColor.blue","text":"<pre><code>HbColor.blue : integer\n</code></pre>"},{"location":"types/HbColor/#hbcoloralpha","title":"HbColor.alpha","text":"<pre><code>HbColor.alpha : integer\n</code></pre>"},{"location":"types/HbDirection/","title":"class HbDirection","text":"<p>The direction of a text segment or buffer.</p> <p>Lua wrapper for <code>hb_direction_t</code> type.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luaharfbuzz.h#L19</li> <li>HarfBuzz online documentation: hb_direction_t</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbDirection/#methods","title":"methods","text":""},{"location":"types/HbDirection/#hbdirectionnew","title":"HbDirection.new","text":"<p><pre><code>function HbDirection.new(dir: unknown) -&gt;  HbDirection {\n    LTR = integer?,\n    RTL = integer?,\n    TTB = integer?,\n    BTT = integer?,\n    new = function,\n    __to_string = function,\n    __eq = function,\n    is_valid = function,\n    is_horizontal = function,\n    is_vertical = function,\n    is_forward = function,\n    is_backward = function,\n    ...(+0)\n}\n</code></pre> @param <code>dir</code> - can be one of <code>ltr</code>, <code>rtl</code>, <code>ttb</code>, <code>btt</code> or <code>invalid</code>.</p> <p>@return  - a <code>Direction</code> object.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Wraps <code>hb_direction_from_string</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: direction.c#L4-L14</li> <li>HarfBuzz online documentation: hb_direction_from_string</li> </ul>"},{"location":"types/HbDirection/#hbdirection__to_string","title":"HbDirection.__to_string","text":"<pre><code>function HbDirection.__to_string() -&gt;  string\n</code></pre> <p>@return  - Returns a string representation for direction.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Enable nice output with <code>tostring(\u2026)</code>.</p> <p>Wraps <code>hb_direction_to_string</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: direction.c#L16-L21</li> </ul>"},{"location":"types/HbDirection/#hbdirection__eq","title":"HbDirection.__eq","text":"<pre><code>function HbDirection.__eq() -&gt;  boolean\n</code></pre> <p>@return  - <code>true</code> or <code>false</code> depending on whether the two tags are equal.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Enable equality comparisions with <code>==</code> between two directions.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: direction.c#L23-L29</li> </ul>"},{"location":"types/HbDirection/#hbdirectionis_valid","title":"HbDirection.is_valid","text":"<pre><code>function HbDirection.is_valid() -&gt;  boolean\n</code></pre> <p>@return  - a boolean value</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Test whether a text direction is valid.</p> <p>Wraps <code>HB_DIRECTION_IS_VALID</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: direction.c#L31-L36</li> <li>HarfBuzz online documentation: HB_DIRECTION_IS_VALID</li> </ul>"},{"location":"types/HbDirection/#hbdirectionis_horizontal","title":"HbDirection.is_horizontal","text":"<pre><code>function HbDirection.is_horizontal() -&gt;  boolean\n</code></pre> <p>@return  - a boolean value</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Test whether a text direction is horizontal.</p> <p>Requires that the direction be valid. Wraps <code>HB_DIRECTION_IS_HORIZONTAL</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: direction.c#L38-L43</li> <li>HarfBuzz online documentation: HB_DIRECTION_IS_HORIZONTAL</li> </ul>"},{"location":"types/HbDirection/#hbdirectionis_vertical","title":"HbDirection.is_vertical","text":"<pre><code>function HbDirection.is_vertical() -&gt;  boolean\n</code></pre> <p>@return  - a boolean value</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Test whether a text direction is vertical.</p> <p>Requires that the direction be valid. Wraps <code>HB_DIRECTION_IS_VERTICAL</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: direction.c#L45-L50</li> <li>HarfBuzz online documentation: HB_DIRECTION_IS_VERTICAL</li> </ul>"},{"location":"types/HbDirection/#hbdirectionis_forward","title":"HbDirection.is_forward","text":"<pre><code>function HbDirection.is_forward() -&gt;  boolean\n</code></pre> <p>@return  - a boolean value</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Test whether a text direction moves forward (from left to right, or from top to bottom).</p> <p>Requires that the direction be valid. Wraps <code>HB_DIRECTION_IS_FORWARD</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: direction.c#L52-L57</li> <li>HarfBuzz online documentation: HB_DIRECTION_IS_FORWARD</li> </ul>"},{"location":"types/HbDirection/#hbdirectionis_backward","title":"HbDirection.is_backward","text":"<pre><code>function HbDirection.is_backward() -&gt;  boolean\n</code></pre> <p>@return  - a boolean value</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Test whether a text direction moves backward (from right to left, or from bottom to top).</p> <p>Requires that the direction be valid. Wraps <code>HB_DIRECTION_IS_BACKWARD</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: direction.c#L59-L64</li> <li>HarfBuzz online documentation: HB_DIRECTION_IS_BACKWARD</li> </ul>"},{"location":"types/HbDirection/#fields","title":"fields","text":""},{"location":"types/HbDirection/#hbdirectionltr","title":"HbDirection.LTR","text":"<pre><code>HbDirection.LTR : integer?\n</code></pre> <p>Wraps <code>HB_DIRECTION_LTR</code>.</p> <p>Predefined directions that correspond to their original definitions in Harfbuzz.</p> <p>Reference:</p> <ul> <li>HarfBuzz online documentation: hb_direction_t</li> </ul>"},{"location":"types/HbDirection/#hbdirectionrtl","title":"HbDirection.RTL","text":"<pre><code>HbDirection.RTL : integer?\n</code></pre> <p>Wraps <code>HB_DIRECTION_RTL</code>.</p> <p>Predefined directions that correspond to their original definitions in Harfbuzz.</p> <p>Reference:</p> <ul> <li>HarfBuzz online documentation: hb_direction_t</li> </ul>"},{"location":"types/HbDirection/#hbdirectionttb","title":"HbDirection.TTB","text":"<pre><code>HbDirection.TTB : integer?\n</code></pre> <p>Wraps <code>HB_DIRECTION_TTB</code>.</p> <p>Predefined directions that correspond to their original definitions in Harfbuzz.</p> <p>Reference:</p> <ul> <li>HarfBuzz online documentation: hb_direction_t</li> </ul>"},{"location":"types/HbDirection/#hbdirectionbtt","title":"HbDirection.BTT","text":"<pre><code>HbDirection.BTT : integer?\n</code></pre> <p>Wraps <code>HB_DIRECTION_LTR</code>.</p> <p>Predefined directions that correspond to their original definitions in Harfbuzz.</p> <p>Reference:</p> <ul> <li>HarfBuzz online documentation: hb_direction_t</li> </ul>"},{"location":"types/HbFace/","title":"class HbFace","text":"<p>A font face is an object that represents a single face from within a font family.</p> <p>More precisely, a font face represents a single face in a binary font file. Font faces are typically built from a binary blob and a face index. Font faces are used to create fonts.</p> <p>Wraps <code>hb_face_t</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luaharfbuzz.h#L13</li> <li>HarfBuzz online documentation: hb_face_t</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbFace/#methods","title":"methods","text":""},{"location":"types/HbFace/#hbfacenew_from_blob","title":"HbFace.new_from_blob","text":"<p><pre><code>function HbFace.new_from_blob(\n  blob: Blob {\n    new = function,\n    new_from_file = function,\n    get_length = function,\n    get_data = function,\n},\n  font_index: integer?\n) -&gt;  HbFace?\n</code></pre> @param <code>blob</code> - <code>Blob</code> to read the font from.</p> <p>@param <code>font_index</code> - index of font to read.</p> <p>Constructs a new face object from the specified blob and a face index into that blob.</p> <p>The face index is used for blobs of file formats such as TTC and DFont that can contain more than one face. Face indices within such collections are zero-based.</p> <p>Wraps <code>hb_face_create</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: face.c#L28-L45</li> <li>HarfBuzz online documentation: hb_face_create</li> </ul>"},{"location":"types/HbFace/#hbfacenew","title":"HbFace.new","text":"<p><pre><code>function HbFace.new(\n  file: string,\n  font_index: integer?\n) -&gt;  HbFace?\n</code></pre> @param <code>file</code> - path to font file.</p> <p>@param <code>font_index</code> - index of font to read.</p> <p>Create a new <code>Face</code> from a file.</p> <p>Makes a call to <code>Face:new_from_blob</code> after creating a <code>Blob</code> from the file contents.</p> <p>Wraps <code>hb_face_create</code>.</p> <p>Example:</p> <pre><code>local face = luaharfbuzz.Face.new('xxx')\nprint(face) -- nil\n\nface = luaharfbuzz.Face.new(\n           '/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf')\nif face ~= nil then\n    print(face) -- harfbuzz.Face: 0x12426a8\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: face.c#L7-L26</li> <li>HarfBuzz online documentation: hb_face_create</li> </ul>"},{"location":"types/HbFace/#hbfacecollect_unicodes","title":"HbFace.collect_unicodes","text":"<pre><code>function HbFace.collect_unicodes() -&gt;  number[]\n</code></pre> <p>@return  - of codepoints supported by the face.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>for _, char in ipairs(face:collect_unicodes()) do print(char, unicode.utf8.char(char)) end <pre><code>__Reference:__\n\n* Corresponding C source code: [face.c#L264-L284](https://github.com/ufyTeX/luaharfbuzz/blob/b3bdf5dc7a6e3f9b674226140c3dfdc73d2970cd/src/luaharfbuzz/face.c#L264-L284)\n* HarfBuzz online documentation: [hb_face_collect_unicodes](https://harfbuzz.github.io/harfbuzz-hb-face.html#hb-face-collect-unicodes)\n\n\n\n\n\n\n\n\n### HbFace.get_glyph_count\n---\n```lua\nfunction HbFace.get_glyph_count() -&gt; glyph_count integer\n</code></pre></p> <p>Fetch the glyph-count value of the specified face object.</p> <p>Wraps <code>hb_face_get_glyph_count</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: face.c#L47-L52</li> <li>HarfBuzz online documentation: hb_face_get_glyph_count</li> </ul>"},{"location":"types/HbFace/#hbfaceget_name","title":"HbFace.get_name","text":"<pre><code>function HbFace.get_name(\n  name_id: integer,\n  lang: HbLanguage?\n) -&gt;  string?\n</code></pre> <p>local name_id = 0 local name repeat name = face:get_name(name_id) print(name_id, name) name_id = name_id + 1 until (name == nil) <pre><code>__Reference:__\n\n* Corresponding C source code: [face.c#L54-L80](https://github.com/ufyTeX/luaharfbuzz/blob/b3bdf5dc7a6e3f9b674226140c3dfdc73d2970cd/src/luaharfbuzz/face.c#L54-L80)\n* HarfBuzz online documentation: [hb_ot_name_get_utf8](https://harfbuzz.github.io/harfbuzz-hb-ot-name.html#hb-ot-name-get-utf8)\n\n\n\n\n\n\n\n\n### HbFace.get_table\n---\n```lua\nfunction HbFace.get_table(tag: HbTag {\n    new = function,\n    __to_string = function,\n    __eq = function,\n}) -&gt;  Blob {\n    new = function,\n    new_from_file = function,\n    get_length = function,\n    get_data = function,\n}\n</code></pre> @param <code>tag</code> - <code>Tag</code> object of the table.</p> <p>@return  - <code>Blob</code> object for the face table of <code>tag</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Fetch a reference to the specified table within the specified face.</p> <p>Wraps <code>hb_face_reference_table</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: face.c#L82-L94</li> <li>HarfBuzz online documentation: hb_face_reference_table</li> </ul>"},{"location":"types/HbFace/#hbfaceget_table_tags","title":"HbFace.get_table_tags","text":"<pre><code>function HbFace.get_table_tags() -&gt;  HbTag[]\n</code></pre> <p>@return  - table of <code>Tag</code>s representing face table tags.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Fetch a list of all table tags for a face, if possible. The list returned will begin at the offset provided.</p> <p>Wraps <code>hb_face_get_table_tags</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: face.c#L96-L124</li> <li>HarfBuzz online documentation: hb_face_get_table_tags</li> </ul>"},{"location":"types/HbFace/#hbfaceget_upem","title":"HbFace.get_upem","text":"<pre><code>function HbFace.get_upem() -&gt;  integer\n</code></pre> <p>@return  - The upem value of face.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>print('Units per em', face:get_upem()) -- 1000 <pre><code>__Reference:__\n\n* Corresponding C source code: [face.c#L286-L291](https://github.com/ufyTeX/luaharfbuzz/blob/b3bdf5dc7a6e3f9b674226140c3dfdc73d2970cd/src/luaharfbuzz/face.c#L286-L291)\n* HarfBuzz online documentation: [hb_face_get_upem](https://harfbuzz.github.io/harfbuzz-hb-face.html#hb-face-get-upem)\n\n\n\n\n\n\n\n\n### HbFace.ot_color_has_palettes\n---\n```lua\nfunction HbFace.ot_color_has_palettes() -&gt;  boolean\n</code></pre></p> <p>@return  - true if data found, false otherwise</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Tests whether a face includes a CPAL color-palette table.</p> <p>Wraps <code>hb_ot_color_has_palettes</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: face.c#L293-L298</li> <li>HarfBuzz online documentation: hb_ot_color_has_palettes</li> </ul>"},{"location":"types/HbFace/#hbfaceot_color_palette_get_count","title":"HbFace.ot_color_palette_get_count","text":"<pre><code>function HbFace.ot_color_palette_get_count() -&gt;  integer\n</code></pre> <p>@return  - The number of palettes found.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Fetch the number of color palettes in a face.</p> <p>Wraps <code>hb_ot_color_palette_get_count</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: face.c#L300-L305</li> <li>HarfBuzz online documentation: hb_ot_color_palette_get_count</li> </ul>"},{"location":"types/HbFace/#hbfaceot_color_palette_get_colors","title":"HbFace.ot_color_palette_get_colors","text":"<pre><code>function HbFace.ot_color_palette_get_colors() -&gt;  HbColor[]\n</code></pre> <p>Fetch a list of the colors in a color palette.</p> <p>Wraps <code>hb_ot_color_palette_get_colors</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: face.c#L307-L347</li> <li>HarfBuzz online documentation: hb_ot_color_palette_get_colors</li> </ul>"},{"location":"types/HbFace/#hbfaceot_color_has_layers","title":"HbFace.ot_color_has_layers","text":"<pre><code>function HbFace.ot_color_has_layers() -&gt;  boolean\n</code></pre> <p>@return  - true if data found, false otherwise</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Test whether a face includes a COLR table with data according to COLRv0.</p> <p>Wraps <code>hb_ot_color_has_layers</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: face.c#L349-L354</li> <li>HarfBuzz online documentation: hb_ot_color_has_layers</li> </ul>"},{"location":"types/HbFace/#hbfaceot_color_glyph_get_layers","title":"HbFace.ot_color_glyph_get_layers","text":"<p><pre><code>function HbFace.ot_color_glyph_get_layers(glyph: integer) -&gt;  HbGlyphColor[]\n</code></pre> @param <code>glyph</code> - The glyph index to query</p> <p>Fetches a list of all color layers for the specified glyph index in the specified face. The list returned will begin at the offset provided.</p> <p>Wraps <code>hb_ot_color_glyph_get_layers</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: face.c#L356-L392</li> <li>HarfBuzz online documentation: hb_ot_color_glyph_get_layers</li> </ul>"},{"location":"types/HbFace/#hbfaceot_color_has_png","title":"HbFace.ot_color_has_png","text":"<pre><code>function HbFace.ot_color_has_png() -&gt;  boolean\n</code></pre> <p>@return  - true if data found, false otherwise</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Test whether a face has PNG glyph images (either in CBDT or sbix tables).</p> <p>Wraps <code>hb_ot_color_has_png</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: face.c#L394-L399</li> <li>HarfBuzz online documentation: hb_ot_color_has_png</li> </ul>"},{"location":"types/HbFace/#hbfaceot_layout_get_script_tags","title":"HbFace.ot_layout_get_script_tags","text":"<p><pre><code>function HbFace.ot_layout_get_script_tags(table_tag: HbTag {\n    new = function,\n    __to_string = function,\n    __eq = function,\n}) -&gt;  HbTag[]\n</code></pre> @param <code>table_tag</code> - OpenType Glyph Substitution Table (gsub) or OpenType Glyph Positioning Table (gpos).</p> <p>Fetch a list of all scripts enumerated in the specified face's GSUB table or GPOS table.</p> <p>Wraps <code>hb_ot_layout_table_get_script_tags</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: face.c#L126-L156</li> <li>HarfBuzz online documentation: hb_ot_layout_table_get_script_tags</li> </ul>"},{"location":"types/HbFace/#hbfaceot_layout_get_language_tags","title":"HbFace.ot_layout_get_language_tags","text":"<p><pre><code>function HbFace.ot_layout_get_language_tags(\n  table_tag: HbTag {\n    new = function,\n    __to_string = function,\n    __eq = function,\n},\n  script_index: integer\n) -&gt;  HbTag[]\n</code></pre> @param <code>table_tag</code> - OpenType Glyph Substitution Table (gsub) or OpenType Glyph Positioning Table (gpos).</p> <p>@param <code>script_index</code> - The index of the requested script tag</p> <p>Fetch a list of language tags in the given face's GSUB or GPOS table, underneath the specified script index.</p> <p>Wraps <code>hb_ot_layout_script_get_language_tags</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: face.c#L158-L189</li> <li>HarfBuzz online documentation: hb_ot_layout_script_get_language_tags</li> </ul>"},{"location":"types/HbFace/#hbfaceot_layout_get_feature_tags","title":"HbFace.ot_layout_get_feature_tags","text":"<p><pre><code>function HbFace.ot_layout_get_feature_tags(\n  table_tag: HbTag {\n    new = function,\n    __to_string = function,\n    __eq = function,\n},\n  script_index: integer,\n  language_index: integer\n) -&gt;  HbTag[]\n</code></pre> @param <code>table_tag</code> - OpenType Glyph Substitution Table (gsub) or OpenType Glyph Positioning Table (gpos).</p> <p>@param <code>script_index</code> - The index of the requested script tag</p> <p>@param <code>language_index</code> - The index of the requested language tag</p> <p>@return  - The array of HbTag feature tags found for the query.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Wraps <code>hb_ot_layout_language_get_feature_tags</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: face.c#L191-L223</li> <li>HarfBuzz online documentation: hb_ot_layout_language_get_feature_tags</li> </ul>"},{"location":"types/HbFace/#hbfaceot_layout_find_script","title":"HbFace.ot_layout_find_script","text":"<p><pre><code>function HbFace.ot_layout_find_script(\n  table_tag: HbTag {\n    new = function,\n    __to_string = function,\n    __eq = function,\n},\n  script_tag: HbTag {\n    new = function,\n    __to_string = function,\n    __eq = function,\n}\n)\n -&gt; found boolean\n -&gt; index integer\n</code></pre> @param <code>table_tag</code> - OpenType Glyph Substitution Table (gsub) or OpenType Glyph Positioning Table (gpos).</p> <p>@param <code>script_tag</code> - The <code>HbTag</code> script tag requested</p> <p>@return <code>found</code> - <code>true</code> if the script is found, <code>false</code> otherwise</p> <p>@return <code>index</code> - The index of the requested script tag.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Fetch the index if a given script tag in the specified face's GSUB table or GPOS table.</p> <p>Wraps <code>hb_ot_layout_table_find_script</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: face.c#L225-L235</li> <li>HarfBuzz online documentation: hb_ot_layout_table_find_script</li> </ul> <p>@deprecated Deprecated</p>"},{"location":"types/HbFace/#hbfaceot_layout_find_language","title":"HbFace.ot_layout_find_language","text":"<p><pre><code>function HbFace.ot_layout_find_language(\n  tag: HbTag {\n    new = function,\n    __to_string = function,\n    __eq = function,\n},\n  script_index: integer,\n  language_tag: HbTag {\n    new = function,\n    __to_string = function,\n    __eq = function,\n}\n)\n -&gt; found boolean\n -&gt; index integer\n</code></pre> @param <code>tag</code> - OpenType Glyph Substitution Table (gsub) or OpenType Glyph Positioning Table (gpos).</p> <p>@param <code>script_index</code> - The index of the requested script tag.</p> <p>@param <code>language_tag</code> - The <code>HbTag</code> of the requested language.</p> <p>@return <code>found</code> - <code>true</code> if the language tag is found, <code>false</code> otherwise</p> <p>@return <code>index</code> - The index of the requested language.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Fetch the index of a given language tag in the specified face's GSUB table or GPOS table, underneath the specified script tag.</p> <p>Wraps <code>hb_ot_layout_script_find_language</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: face.c#L237-L248</li> <li>HarfBuzz online documentation: hb_ot_layout_script_find_language</li> </ul>"},{"location":"types/HbFace/#hbfaceot_layout_find_feature","title":"HbFace.ot_layout_find_feature","text":"<p><pre><code>function HbFace.ot_layout_find_feature(\n  tag: HbTag {\n    new = function,\n    __to_string = function,\n    __eq = function,\n},\n  script_index: integer,\n  language_index: integer,\n  feature: HbTag {\n    new = function,\n    __to_string = function,\n    __eq = function,\n}\n)\n -&gt; found boolean\n -&gt; index integer\n</code></pre> @param <code>tag</code> - OpenType Glyph Substitution Table (gsub) or OpenType Glyph Positioning Table (gpos).</p> <p>@param <code>script_index</code> - The index of the requested script tag.</p> <p>@param <code>language_index</code> - The index of the requested language tag.</p> <p>@param <code>feature</code> - The feature tag requested.</p> <p>@return <code>found</code> - <code>true</code> if the feature is found, <code>false</code> otherwise</p> <p>@return <code>index</code> - The index of the requested feature.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Fetches the index of a given feature tag in the specified face's GSUB table or GPOS table, underneath the specified script and language.</p> <p>Wraps <code>hb_ot_layout_language_find_feature</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: face.c#L250-L262</li> <li>HarfBuzz online documentation: hb_ot_layout_language_find_feature</li> </ul>"},{"location":"types/HbFeature/","title":"class HbFeature","text":"<p>The <code>Feature</code> is the structure that holds information about requested feature application.</p> <p>Lua wrapper for <code>hb_feature_t</code> type.</p> <p>Reference:</p> <ul> <li>HarfBuzz online documentation: hb_feature_t</li> <li>Corresponding C source code: luaharfbuzz.h#L16</li> <li>Corresponding Lua source code: hb_feature_t</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbFeature/#methods","title":"methods","text":""},{"location":"types/HbFeature/#hbfeaturenew","title":"HbFeature.new","text":"<p><pre><code>function HbFeature.new(feature_string: string)\n</code></pre> @param <code>feature_string</code> - See feature string syntax reference</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Wraps <code>hb_feature_from_string</code></p> <p>Reference:</p> <ul> <li>Corresponding C source code: feature.c#L4-L18</li> <li>HarfBuzz online documentation: hb_feature_from_string</li> </ul>"},{"location":"types/HbFeature/#hbfeature__tostring","title":"HbFeature.__tostring","text":"<pre><code>function HbFeature.__tostring()\n</code></pre> <p>Enables nice output with <code>tostring(\u2026)</code>.</p> <p>Wraps <code>hb_feature_to_string</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: feature.c#L20-L27</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbFont/","title":"class HbFont","text":"<p>Data type for holding fonts.</p> <p>Lua wrapper for <code>hb_font_t</code> type.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luaharfbuzz.h#L14</li> <li>HarfBuzz online documentation: hb_font_t</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbFont/#methods","title":"methods","text":""},{"location":"types/HbFont/#hbfontnew","title":"HbFont.new","text":"<p><pre><code>function HbFont.new(face: HbFace {\n    new_from_blob = function,\n    new = function,\n    collect_unicodes = function,\n    get_glyph_count = function,\n    get_name = function,\n    get_table = function,\n    get_table_tags = function,\n    get_upem = function,\n    ot_color_has_palettes = function,\n    ot_color_palette_get_count = function,\n    ot_color_palette_get_colors = function,\n    ot_color_has_layers = function,\n    ...(+8)\n})\n</code></pre> @param <code>face</code> - <code>Face</code> object.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Set up some defaults for scale and shaping functions. Initializes a new <code>hb_font_t</code> from a <code>Face</code> object. Sets the default scale to the face\u2019s upem value, and sets the font shaping functions by calling <code>hb_ot_font_set_funcs</code> on it.</p> <p>Wraps <code>hb_font_create</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: font.c#L3-L20</li> <li>HarfBuzz online documentation: hb_font_create</li> </ul>"},{"location":"types/HbFont/#hbfontget_scale","title":"HbFont.get_scale","text":"<pre><code>function HbFont.get_scale()\n -&gt;  integer\n -&gt;  integer\n</code></pre> <p>@return  - x-scale of the font.</p> <p>@return  - y-scale of the font.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Fetch the horizontal and vertical scale of a font.</p> <p>Wraps <code>hb_font_get_scale</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: font.c#L31-L40</li> <li>HarfBuzz online documentation: hb_font_get_scale</li> </ul>"},{"location":"types/HbFont/#hbfontset_scale","title":"HbFont.set_scale","text":"<p><pre><code>function HbFont.set_scale(\n  x_scale: integer,\n  y_scale: integer\n)\n</code></pre> @param <code>x_scale</code> - desired x-scale of font.</p> <p>@param <code>y_scale</code> - desired y-scale of font.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Sets the horizontal and vertical scale of a font.</p> <p>The font scale is a number related to, but not the same as, font size. Typically the client establishes a scale factor to be used between the two. For example, 64, or 256, which would be the fractional-precision part of the font scale.</p> <p>Wraps <code>hb_font_set_scale</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: font.c#L22-L29</li> <li>HarfBuzz online documentation: hb_font_set_scale</li> </ul>"},{"location":"types/HbFont/#hbfontget_h_extents","title":"HbFont.get_h_extents","text":"<p><pre><code>function HbFont.get_h_extents(glyph: integer) -&gt;  FontExtens?\n</code></pre> @param <code>glyph</code> - index inside the font.</p> <p>@return  - font extents table for horizontal direction, contains the following or <code>nil</code> if HarfBuzz fails to load font extents:</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Fetch the extents for a specified font, for horizontal text segments.</p> <p>Wraps <code>hb_font_get_h_extents</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: font.c#L42-L62</li> <li>HarfBuzz online documentation: hb_font_get_h_extents</li> </ul>"},{"location":"types/HbFont/#hbfontget_v_extents","title":"HbFont.get_v_extents","text":"<p><pre><code>function HbFont.get_v_extents(glyph: integer) -&gt;  FontExtens?\n</code></pre> @param <code>glyph</code> - index inside the font.</p> <p>@return  - font extents table for vertical direction, similar to <code>Font:get_h_extents</code>, or <code>nil</code> if HarfBuzz fails to load font extents:</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Wraps <code>hb_font_get_v_extents</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: font.c#L64-L84</li> <li>HarfBuzz online documentation: hb_font_get_v_extents</li> </ul>"},{"location":"types/HbFont/#hbfontget_glyph_extents","title":"HbFont.get_glyph_extents","text":"<p><pre><code>function HbFont.get_glyph_extents(glyph: integer) -&gt;  GlyphExtens?\n</code></pre> @param <code>glyph</code> - index inside the font.</p> <p>@return  - extents table contains the following or <code>nil</code> if HarfBuzz fails to load glyph extents</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Wraps <code>hb_font_get_glyph_extents</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: font.c#L86-L110</li> <li>HarfBuzz online documentation: hb_font_get_glyph_extents</li> </ul>"},{"location":"types/HbFont/#hbfontget_glyph_name","title":"HbFont.get_glyph_name","text":"<p><pre><code>function HbFont.get_glyph_name(glyph: integer) -&gt;  string\n</code></pre> @param <code>glyph</code> - index inside the font.</p> <p>@return  - name of the glyph or nil.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Wraps <code>hb_font_get_glyph_name</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: font.c#L112-L125</li> <li>HarfBuzz online documentation: hb_font_get_glyph_name</li> </ul>"},{"location":"types/HbFont/#hbfontget_glyph_from_name","title":"HbFont.get_glyph_from_name","text":"<p><pre><code>function HbFont.get_glyph_from_name(name: string) -&gt;  integer\n</code></pre> @param <code>name</code> - name of the glyph.</p> <p>@return  - glyph index inside the font or nil.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Wraps <code>hb_font_get_glyph_from_name</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: font.c#L127-L138</li> <li>HarfBuzz online documentation: hb_font_get_glyph_from_name</li> </ul>"},{"location":"types/HbFont/#hbfontget_glyph_h_advance","title":"HbFont.get_glyph_h_advance","text":"<p><pre><code>function HbFont.get_glyph_h_advance(glyph: integer) -&gt;  integer\n</code></pre> @param <code>glyph</code> - glyph index inside the font.</p> <p>@return  - advance glyph advance of the glyph in horizontal direction.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Wraps <code>hb_font_get_glyph_h_advance</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: font.c#L140-L146</li> <li>HarfBuzz online documentation: hb_font_get_glyph_h_advance</li> </ul>"},{"location":"types/HbFont/#hbfontget_glyph_v_advance","title":"HbFont.get_glyph_v_advance","text":"<p><pre><code>function HbFont.get_glyph_v_advance(glyph: integer) -&gt;  integer\n</code></pre> @param <code>glyph</code> - glyph index inside the font.</p> <p>@return  - advance glyph advance of the glyph in vertical direction.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Wraps <code>hb_font_get_glyph_v_advance</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: font.c#L148-L154</li> <li>HarfBuzz online documentation: hb_font_get_glyph_v_advance</li> </ul>"},{"location":"types/HbFont/#hbfontget_nominal_glyph","title":"HbFont.get_nominal_glyph","text":"<pre><code>function HbFont.get_nominal_glyph(codepoint: integer) -&gt;  integer?\n</code></pre> <p>@return  - glyph index or <code>nil</code> if <code>codepoint</code> is not supported by the font.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Wraps <code>hb_font_get_nominal_glyph</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: font.c#L156-L167</li> <li>HarfBuzz online documentation: hb_font_get_nominal_glyph</li> </ul>"},{"location":"types/HbFont/#hbfontot_color_glyph_get_png","title":"HbFont.ot_color_glyph_get_png","text":"<pre><code>function HbFont.ot_color_glyph_get_png()\n</code></pre> <p>Wraps <code>hb_ot_color_glyph_get_png</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: font.c#L188-L204</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbGlyph/","title":"class HbGlyph","text":"<p>containing data for each glyph, in a nested table. Each nested table contains the following:</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbGlyph/#fields","title":"fields","text":""},{"location":"types/HbGlyph/#hbglyphx_advance","title":"HbGlyph.x_advance","text":"<pre><code>HbGlyph.x_advance : number\n</code></pre> <p>horizontal advance.</p>"},{"location":"types/HbGlyph/#hbglyphy_advance","title":"HbGlyph.y_advance","text":"<pre><code>HbGlyph.y_advance : number\n</code></pre> <p>vertical advance.</p>"},{"location":"types/HbGlyph/#hbglyphx_offset","title":"HbGlyph.x_offset","text":"<pre><code>HbGlyph.x_offset : number\n</code></pre> <p>horizontal displacement.</p>"},{"location":"types/HbGlyph/#hbglyphy_offset","title":"HbGlyph.y_offset","text":"<pre><code>HbGlyph.y_offset : number\n</code></pre> <p>vertical displacement.</p>"},{"location":"types/HbGlyph/#hbglyphcluster","title":"HbGlyph.cluster","text":"<pre><code>HbGlyph.cluster : integer\n</code></pre> <p>glyph cluster index within input.</p>"},{"location":"types/HbGlyph/#hbglyphcodepoint","title":"HbGlyph.codepoint","text":"<pre><code>HbGlyph.codepoint : integer\n</code></pre> <p>glyph index inside the font (this field name is a bit misleading, but that\u2019s what Harfbuzz uses).</p>"},{"location":"types/HbGlyph/#hbglyphflags","title":"HbGlyph.flags","text":"<pre><code>HbGlyph.flags : number\n</code></pre> <p>glyph flags</p>"},{"location":"types/HbGlyphColor/","title":"class HbGlyphColor","text":""},{"location":"types/HbGlyphColor/#fields","title":"fields","text":""},{"location":"types/HbGlyphColor/#hbglyphcolorglyph","title":"HbGlyphColor.glyph","text":"<pre><code>HbGlyphColor.glyph : integer\n</code></pre>"},{"location":"types/HbGlyphColor/#hbglyphcolorcolor_index","title":"HbGlyphColor.color_index","text":"<pre><code>HbGlyphColor.color_index : integer\n</code></pre>"},{"location":"types/HbLanguage/","title":"class HbLanguage","text":"<p>Data type for languages. Each lanauge object corresponds to a BCP 47 language tag.</p> <p>Lua wrapper for <code>hb_language_t</code> type.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luaharfbuzz.h#L20</li> <li>HarfBuzz online documentation: hb_language_t</li> </ul>"},{"location":"types/HbLanguage/#methods","title":"methods","text":""},{"location":"types/HbLanguage/#hblanguagenew","title":"HbLanguage.new","text":"<pre><code>function HbLanguage.new(language_tag) -&gt;  HbLanguage {\n    INVALID = HbLanguage,\n    new = function,\n    __tostring = function,\n    __eq = function,\n}\n</code></pre> <p>@return  - a <code>Language</code> object.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Convert a string representing a BCP 47 language tag to the corresponding language object.</p> <p>Wraps <code>hb_language_from_string</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: language.c#L4-L17</li> <li>HarfBuzz online documentation: hb_language_from_string</li> </ul>"},{"location":"types/HbLanguage/#hblanguage__tostring","title":"HbLanguage.__tostring","text":"<pre><code>function HbLanguage.__tostring() -&gt;  string\n</code></pre> <p>@return  - Returns a string representation for the language object.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Enable nice output with <code>tostring(\u2026)</code>.</p> <p>Wraps <code>hb_language_to_string</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: language.c#L19-L25</li> <li>HarfBuzz online documentation: hb_language_to_string</li> </ul>"},{"location":"types/HbLanguage/#hblanguage__eq","title":"HbLanguage.__eq","text":"<pre><code>function HbLanguage.__eq(lang: HbLanguage {\n    INVALID = HbLanguage,\n    new = function,\n    __tostring = function,\n    __eq = function,\n}) -&gt;  boolean\n</code></pre> <p>@return  - <code>true</code> or <code>false</code> depending on whether the two languages are equal.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Enable equality comparisions with <code>==</code> between two languages.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: language.c#L27-L34</li> </ul>"},{"location":"types/HbLanguage/#fields","title":"fields","text":""},{"location":"types/HbLanguage/#hblanguageinvalid","title":"HbLanguage.INVALID","text":"<pre><code>HbLanguage.INVALID : HbLanguage {\n    INVALID: HbLanguage,\n    new: function,\n    __tostring: function,\n    __eq: function,\n}\n</code></pre> <p>Value to represent a nonexistent name ID.</p> <p>Wraps <code>HB_LANGUAGE_INVALID</code>.</p> <p>Reference:</p> <ul> <li>HarfBuzz online documentation: HB_LANGUAGE_INVALID</li> <li>Corresponding C source code: harfbuzz.lua#L20</li> </ul>"},{"location":"types/HbScript/","title":"class HbScript","text":"<p>Data type for scripts. Each <code>Script</code> 's value is an <code>Tag</code> corresponding to the four-letter values defined by ISO 15924.</p> <p>Lua wrapper for <code>hb_script_t</code> type.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luaharfbuzz.h#L18</li> <li>HarfBuzz online documentation: hb_script_t</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbScript/#methods","title":"methods","text":""},{"location":"types/HbScript/#hbscriptnew","title":"HbScript.new","text":"<p><pre><code>function HbScript.new(script: string) -&gt;  HbScript {\n    COMMON = string,\n    INHERITED = string,\n    UNKNOWN = string,\n    INVALID = string,\n    new = function,\n    from_iso15924_tag = function,\n    to_iso15924_tag = function,\n    __to_string = function,\n    __eq = function,\n}\n</code></pre> @param <code>script</code> - 4-letter script code according to the ISO 15924 standard.</p> <p>@return  - a <code>Script</code> object.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Convert a string representing an ISO 15924 script tag to a corresponding <code>Script</code> object. Wraps <code>hb_script_from_string</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: script.c#L3-L14</li> <li>HarfBuzz online documentation: hb_script_from_string</li> </ul>"},{"location":"types/HbScript/#hbscriptfrom_iso15924_tag","title":"HbScript.from_iso15924_tag","text":"<p><pre><code>function HbScript.from_iso15924_tag(tag: HbTag {\n    new = function,\n    __to_string = function,\n    __eq = function,\n})\n</code></pre> @param <code>tag</code> - a <code>Tag</code> object representing a ISO 15924 script.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Convert an ISO 15924 script <code>Tag</code> object to a corresponding <code>Script</code> object.</p> <p>Wraps <code>hb_script_from_iso15924_tag</code></p> <p>Reference:</p> <ul> <li>Corresponding C source code: script.c#L16-L25</li> <li>HarfBuzz online documentation: harfbuzz-hb-common.html#hb-script-from-iso15924-tag</li> </ul>"},{"location":"types/HbScript/#hbscriptto_iso15924_tag","title":"HbScript.to_iso15924_tag","text":"<pre><code>function HbScript.to_iso15924_tag() -&gt;  HbTag {\n    new = function,\n    __to_string = function,\n    __eq = function,\n}\n</code></pre> <p>@return  - a <code>Tag</code> object representing the script.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Converts an <code>Script</code> object to a corresponding ISO 15924 script <code>Tag</code>.</p> <p>Wraps <code>hb_script_to_iso15924_tag</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: script.c#L37-L46</li> <li>HarfBuzz online documentation: harfbuzz-hb-common.html#hb-script-to-iso15924-tag</li> </ul>"},{"location":"types/HbScript/#hbscript__to_string","title":"HbScript.__to_string","text":"<pre><code>function HbScript.__to_string() -&gt;  string\n</code></pre> <p>@return  - Returns a 4-letter ISO 15924 script code for the script object.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Enable nice output with <code>tostring(\u2026)</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: script.c#L27-L35</li> </ul>"},{"location":"types/HbScript/#hbscript__eq","title":"HbScript.__eq","text":"<pre><code>function HbScript.__eq() -&gt;  boolean\n</code></pre> <p>@return  - <code>true</code> or <code>false</code> depending on whether the two scripts are equal.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Enables equality comparisions with <code>==</code> between two scripts.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: script.c#L48-L54</li> </ul>"},{"location":"types/HbScript/#fields","title":"fields","text":""},{"location":"types/HbScript/#hbscriptcommon","title":"HbScript.COMMON","text":"<pre><code>HbScript.COMMON : string\n</code></pre> <p>Wraps <code>HB_SCRIPT_COMMON</code>.</p> <p>Reference:</p> <ul> <li>HarfBuzz online documentation</li> </ul>"},{"location":"types/HbScript/#hbscriptinherited","title":"HbScript.INHERITED","text":"<pre><code>HbScript.INHERITED : string\n</code></pre> <p>Wraps <code>HB_SCRIPT_INHERITED</code>.</p> <p>Reference:</p> <ul> <li>HarfBuzz online documentation</li> </ul>"},{"location":"types/HbScript/#hbscriptunknown","title":"HbScript.UNKNOWN","text":"<pre><code>HbScript.UNKNOWN : string\n</code></pre> <p>Wraps <code>HB_SCRIPT_UNKNOWN</code>.</p> <p>Reference:</p> <ul> <li>HarfBuzz online documentation</li> </ul>"},{"location":"types/HbScript/#hbscriptinvalid","title":"HbScript.INVALID","text":"<pre><code>HbScript.INVALID : string\n</code></pre> <p>Wraps <code>HB_SCRIPT_INVALID</code>.</p> <p>Reference:</p> <ul> <li>HarfBuzz online documentation</li> </ul>"},{"location":"types/HbTag/","title":"class HbTag","text":"<p>Data type for tag identifiers. Tags are four byte integers, each byte representing a character.</p> <p>Tags are used to identify tables, design-variation axes, scripts, languages, font features, and baselines with human-readable names.</p> <p>Lua wrapper for <code>hb_tag_t</code> type.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luaharfbuzz.h#L17</li> <li>HarfBuzz online documentation: hb_tag_t</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HbTag/#methods","title":"methods","text":""},{"location":"types/HbTag/#hbtagnew","title":"HbTag.new","text":"<p><pre><code>function HbTag.new(s: string) -&gt;  HbTag {\n    new = function,\n    __to_string = function,\n    __eq = function,\n}\n</code></pre> @param <code>s</code> - to be converted to a <code>Tag</code> object.</p> <p>@return  - a <code>Tag</code> object.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Convert a string into an <code>Tag</code> object.</p> <p>Valid tags are four characters. Shorter input strings will be padded with spaces. Longer input strings will be truncated.</p> <p>Wraps <code>hb_tag_from_string</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: tag.c#L4-L17</li> <li>HarfBuzz online documentation: hb_tag_from_string</li> </ul>"},{"location":"types/HbTag/#hbtag__to_string","title":"HbTag.__to_string","text":"<pre><code>function HbTag.__to_string() -&gt;  string\n</code></pre> <p>@return  - Returns a string representation for the <code>Tag</code> object.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Enable nice output with <code>tostring(\u2026)</code>.</p> <p>Wraps <code>hb_tag_to_string</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: tag.c#L19-L27</li> </ul>"},{"location":"types/HbTag/#hbtag__eq","title":"HbTag.__eq","text":"<pre><code>function HbTag.__eq() -&gt;  boolean\n</code></pre> <p>@return  - <code>true</code> or <code>false</code> depending on whether the two tags are equal.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Enables equality comparisions with <code>==</code> between two tags.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: tag.c#L29-L35</li> </ul>"},{"location":"types/HbVariation/","title":"class HbVariation","text":"<p>Data type for holding variation data. Registered OpenType variation-axis tags are listed in OpenType Axis Tag Registry.</p> <p>Wraps <code>hb_variation_t</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luaharfbuzz.h#L21</li> <li>HarfBuzz online documentation: hb_variation_t</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HlistNode/","title":"class HlistNode","text":"<ul> <li>supers: ListNode</li> </ul> <p>An hlist node stands for a box that was made from a horizontal list.</p> <p>A warning: never assign a node list to the <code>head</code> field unless you are sure its internal link structure is correct, otherwise an error may result.</p> <p>Note: the field name <code>head</code> and <code>list</code> are both valid. Sometimes it makes more sense to refer to a list by <code>head</code>, sometimes <code>list</code> makes more sense.</p> <p>Example:</p> <pre><code>assert.node_type(\"hlist\", nil, {\n  id = \"hlist (0)\",\n  subtypes = {\n    \"unknown (0)\",\n    \"line (1)\",\n    \"box (2)\",\n    \"indent (3)\",\n    \"alignment (4)\",\n    \"cell (5)\",\n    \"equation (6)\",\n    \"equationnumber (7)\",\n    \"math (8)\",\n    \"mathchar (9)\",\n    \"hextensible (10)\",\n    \"vextensible (11)\",\n    \"hdelimiter (12)\",\n    \"vdelimiter (13)\",\n    \"overdelimiter (14)\",\n    \"underdelimiter (15)\",\n    \"numerator (16)\",\n    \"denominator (17)\",\n    \"limits (18)\",\n    \"fraction (19)\",\n    \"nucleus (20)\",\n    \"sup (21)\",\n    \"sub (22)\",\n    \"degree (23)\",\n    \"scripts (24)\",\n    \"over (25)\",\n    \"under (26)\",\n    \"accent (27)\",\n    \"radical (28)\",\n  },\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"width (4)\",\n    \"depth (5)\",\n    \"height (6)\",\n    \"dir (7)\",\n    \"shift (8)\",\n    \"glue_order (9)\",\n    \"glue_sign (10)\",\n    \"glue_set (11)\",\n    \"head (12)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-nodes.tex#L78-L108</li> <li>Donald Ervin Knuth. \u201cTeX: The Program\u201d: page 51 tex.pdf</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HlistNode/#fields","title":"fields","text":""},{"location":"types/HlistNode/#hlistnodesubtype","title":"HlistNode.subtype","text":"<pre><code>HlistNode.subtype : HlistNodeSubtype\n</code></pre>"},{"location":"types/HlistNodeSubtype/","title":"alias HlistNodeSubtype","text":"<pre><code>(alias) HlistNodeSubtype = (0|1|2|3|4|5|6|7|8|9...)\n    | 0 -- unknown\n    | 1 -- line\n    | 2 -- box\n    | 3 -- indent\n    | 4 -- alignment\n    | 5 -- cell\n    | 6 -- equation\n    | 7 -- equationnumber\n    | 8 -- math\n    | 9 -- mathchar\n    | 10 -- hextensible\n    | 11 -- vextensible\n    | 12 -- hdelimiter\n    | 13 -- vdelimiter\n    | 14 -- overdelimiter\n    | 15 -- underdelimiter\n    | 16 -- numerator\n    | 17 -- denominator\n    | 18 -- limits\n    | 19 -- fraction\n    | 20 -- nucleus\n    | 21 -- sup\n    | 22 -- sub\n    | 23 -- degree\n    | 24 -- scripts\n    | 25 -- over\n    | 26 -- under\n    | 27 -- accent\n    | 28 -- radical\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L633-L661</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HpackFilterCallback/","title":"alias HpackFilterCallback","text":"<pre><code>(alias) HpackFilterCallback = fun(head: Node, groupcode: string, size: integer, packtype: (\"additional\"|\"exactly\"), direction: DirectionSpecifier?, attributelist: Node?) -&gt; NodeCallbackReturn\n</code></pre> <p>Alter a node list before horizontal packing takes place. The first string gives some context, the number is the desired size, the second string is either <code>exact</code> or <code>additional</code> (modifies the first string), the third string is the desired direction</p> <p>This callback is called when TeX is ready to start boxing some horizontal mode material. Math items and line boxes are ignored at the moment.</p> <p>The <code>packtype</code> is either <code>additional</code> or <code>exactly</code>. If <code>additional</code>, then the <code>size</code> is a <code>\\hbox spread ...</code> argument. If <code>exactly</code>, then the <code>size</code> is a <code>\\hbox to ...</code>. In both cases, the number is in scaled points.</p> <p>The <code>direction</code> is either one of the three-letter direction specifier strings, or <code>nil</code>.</p> <p>This callback does not replace any internal code.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luanode.c#L205</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HpackQualityCallback/","title":"alias HpackQualityCallback","text":"<pre><code>(alias) HpackQualityCallback = fun(incident: (\"overfull\"|\"underfull\"|\"loose\"|\"tight\"), detail: integer, head: Node, first: integer, last: integer) -&gt; Node\n</code></pre> <p>This callback can be used to intercept the overfull messages that can result from packing a horizontal list (as happens in the par builder).</p> <p>The incident is one of <code>overfull</code>, <code>underfull</code>, <code>loose</code> or <code>tight</code>. The detail is either the amount of overflow in case of <code>overfull</code>, or the badness otherwise. The head is the list that is constructed (when protrusion or expansion is enabled, this is an intermediate list). Optionally you can return a node, for instance an overfull rule indicator. That node will be appended to the list (just like TeX's own rule would).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: packaging.c#L862</li> <li>Corresponding C source code: packaging.c#L932</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HyphenateCallback/","title":"alias HyphenateCallback","text":"<pre><code>(alias) HyphenateCallback = fun(head: Node, tail: Node) -&gt; false?\n</code></pre> <p>Apply hyphenation to a node list.</p> <p>Setting this callback to <code>false</code> will prevent the internal discretionary insertion pass.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: texlang.c#L1179</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/HyphenatedNode/","title":"class HyphenatedNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"hyphenated\", nil, {\n  id = \"hyphenated (46)\",\n  fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\" },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L485</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/IfStackNode/","title":"class IfStackNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"if_stack\", nil, {\n  id = \"if_stack (44)\",\n  fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\" },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L483</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/InsNode/","title":"class InsNode","text":"<ul> <li>supers: Node</li> </ul> <p>Insertions are represented by ins node records, where the subtype indicates the corresponding box number.</p> <p>Example:</p> <pre><code>assert.node_type(\"ins\", nil, {\n  id = \"ins (3)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"cost (4)\",\n    \"depth (5)\",\n    \"height (6)\",\n    \"spec (7)\",\n    \"head (8)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L818-L824</li> <li>Donald Ervin Knuth. \u201cTeX: The Program\u201d: section 140, page 52 tex.pdf</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/InsNode/#fields","title":"fields","text":""},{"location":"types/InsNode/#insnodesubtype","title":"InsNode.subtype","text":"<pre><code>InsNode.subtype : number\n</code></pre> <p>the insertion class</p>"},{"location":"types/InsNode/#insnodeattr","title":"InsNode.attr","text":"<pre><code>InsNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/InsNode/#insnodecost","title":"InsNode.cost","text":"<pre><code>InsNode.cost : integer\n</code></pre> <p>the penalty associated with this insert</p>"},{"location":"types/InsNode/#insnodeheight","title":"InsNode.height","text":"<pre><code>InsNode.height : integer\n</code></pre> <p>height of the insert</p>"},{"location":"types/InsNode/#insnodedepth","title":"InsNode.depth","text":"<pre><code>InsNode.depth : integer\n</code></pre> <p>depth of the insert</p>"},{"location":"types/InsNode/#insnodehead","title":"InsNode.head","text":"<pre><code>InsNode.head : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>the first node of the body of this insert</p>"},{"location":"types/InsNode/#insnodelist","title":"InsNode.list","text":"<pre><code>InsNode.list : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>the first node of the body of this insert</p>"},{"location":"types/InsertLocalParCallback/","title":"alias InsertLocalParCallback","text":"<pre><code>(alias) InsertLocalParCallback = fun(local_par: Node, location: string)\n</code></pre> <p>Each paragraph starts with a local par node that keeps track of for instance the direction. You can hook a callback into the creator:</p> <p>There is no return value and you should make sure that the node stays valid as otherwise TeX can get confused.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L4812</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/InternalParameter/","title":"alias InternalParameter","text":"<pre><code>(alias) InternalParameter = (ReadWriteIntegerParameter|ReadOnlyIntegerParameter|ReadWriteDimensionParameter|ReadOnlyDimensionParameter|DirectionParameter|GlueParameter|MuglueParameter|TokenlistParameter)\n    | ReadWriteIntegerParameter\n    | ReadOnlyIntegerParameter\n    | ReadWriteDimensionParameter\n    | ReadOnlyDimensionParameter\n    | DirectionParameter\n    | GlueParameter\n    | MuglueParameter\n    | TokenlistParameter\n</code></pre>"},{"location":"types/KernNode/","title":"class KernNode","text":"<ul> <li>supers: Node</li> </ul> <p>The <code>kern</code> command creates such nodes but for instance the font and math machinery can also add them.</p> <p>Example:</p> <pre><code>assert.node_type(\"kern\", nil, {\n  id = \"kern (13)\",\n  subtypes = {\n    \"fontkern (0)\",\n    \"userkern (1)\",\n    \"accentkern (2)\",\n    \"italiccorrection (3)\",\n  },\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"kern (4)\",\n    \"expansion_factor (5)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L836-L839</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/KernNode/#fields","title":"fields","text":""},{"location":"types/KernNode/#kernnodesubtype","title":"KernNode.subtype","text":"<pre><code>KernNode.subtype : KernNodeSubtype\n</code></pre>"},{"location":"types/KernNode/#kernnodekern","title":"KernNode.kern","text":"<pre><code>KernNode.kern : integer\n</code></pre> <p>Fixed horizontal or vertical advance (in scaled points)</p>"},{"location":"types/KernNodeSubtype/","title":"alias KernNodeSubtype","text":"<pre><code>(alias) KernNodeSubtype = (0|1|2|3)\n    | 0 -- fontkern\n    | 1 -- userkern\n    | 2 -- accentkern\n    | 3 -- italiccorrection\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L597-L600</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/KerningCallback/","title":"alias KerningCallback","text":"<pre><code>(alias) KerningCallback = fun(head: Node, tail: Node) -&gt; false?\n</code></pre> <p>Apply kerning to a node list.</p> <p>No return values. This callback has to apply kerning between the nodes in the node list it receives. See <code>ligaturing</code> for calling conventions.</p> <p>Setting this callback to <code>false</code> will prevent the internal kern insertion pass.</p> <p>You must not ruin the node list. For instance, the head normally is a local par node, and the tail a glue. Messing too much can push LuaTeX into panic mode.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafont.c#L2704</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/KpseFtype/","title":"alias KpseFtype","text":"<pre><code>(alias) KpseFtype = (\"afm\"|\"base\"|\"bib\"|\"bitmap font\"|\"bst\"|\"cid maps\"|\"clua\"|\"cmap files\"|\"cnf\"|\"cweb\"...)\n    | \"afm\"\n    | \"base\"\n    | \"bib\"\n    | \"bitmap font\"\n    | \"bst\"\n    | \"cid maps\"\n    | \"clua\"\n    | \"cmap files\"\n    | \"cnf\"\n    | \"cweb\"\n    | \"dvips config\"\n    | \"enc files\"\n    | \"fmt\"\n    | \"font feature files\"\n    | \"gf\"\n    | \"graphic/figure\"\n    | \"ist\"\n    | \"lig files\"\n    | \"ls-R\"\n    | \"lua\"\n    | \"map\"\n    | \"mem\"\n    | \"MetaPost support\"\n    | \"mf\"\n    | \"mfpool\"\n    | \"mft\"\n    | \"misc fonts\"\n    | \"mlbib\"\n    | \"mlbst\"\n    | \"mp\"\n    | \"mppool\"\n    | \"ocp\"\n    | \"ofm\"\n    | \"opentype fonts\"\n    | \"opl\"\n    | \"other binary files\"\n    | \"other text files\"\n    | \"otp\"\n    | \"ovf\"\n    | \"ovp\"\n    | \"pdftex config\"\n    | \"pk\"\n    | \"PostScript header\"\n    | \"subfont definition files\"\n    | \"tex\"\n    | \"TeX system documentation\"\n    | \"TeX system sources\"\n    | \"texmfscripts\"\n    | \"texpool\"\n    | \"tfm\"\n    | \"Troff fonts\"\n    | \"truetype fonts\"\n    | \"type1 fonts\"\n    | \"type42 fonts\"\n    | \"vf\"\n    | \"web\"\n    | \"web2c files\"\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lkpselib.c#L104-163</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/KpseLookupOptions/","title":"class KpseLookupOptions","text":"<p>The options correspond to the command line arguments of <code>kpsewhich</code>:</p> <p>References:</p> <ul> <li>Corresponding C source code: lkpselib.c#L565-810</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/KpseLookupOptions/#fields","title":"fields","text":""},{"location":"types/KpseLookupOptions/#kpselookupoptionsdebug","title":"KpseLookupOptions.debug","text":"<pre><code>KpseLookupOptions.debug : number\n</code></pre> <p>set debugging flags for this lookup     \\NR</p>"},{"location":"types/KpseLookupOptions/#kpselookupoptionsformat","title":"KpseLookupOptions.format","text":"<pre><code>KpseLookupOptions.format : string\n</code></pre> <p>use specific file type (see list above)</p>"},{"location":"types/KpseLookupOptions/#kpselookupoptionsdpi","title":"KpseLookupOptions.dpi","text":"<pre><code>KpseLookupOptions.dpi : number\n</code></pre> <p>use this resolution for this lookup; default 600</p>"},{"location":"types/KpseLookupOptions/#kpselookupoptionspath","title":"KpseLookupOptions.path","text":"<pre><code>KpseLookupOptions.path : string\n</code></pre> <p>search in the given path</p>"},{"location":"types/KpseLookupOptions/#kpselookupoptionsall","title":"KpseLookupOptions.all","text":"<pre><code>KpseLookupOptions.all : boolean\n</code></pre> <p>output all matches, not just the first</p>"},{"location":"types/KpseLookupOptions/#kpselookupoptionsmustexist","title":"KpseLookupOptions.mustexist","text":"<pre><code>KpseLookupOptions.mustexist : boolean\n</code></pre> <p>search the disk as well as ls-R if necessary</p>"},{"location":"types/KpseLookupOptions/#kpselookupoptionsmktexpk","title":"KpseLookupOptions.mktexpk","text":"<pre><code>KpseLookupOptions.mktexpk : boolean\n</code></pre> <p>disable/enable mktexpk generation for this lookup</p>"},{"location":"types/KpseLookupOptions/#kpselookupoptionsmktextex","title":"KpseLookupOptions.mktextex","text":"<pre><code>KpseLookupOptions.mktextex : boolean\n</code></pre> <p>disable/enable mktextex generation for this lookup</p>"},{"location":"types/KpseLookupOptions/#kpselookupoptionsmktexmf","title":"KpseLookupOptions.mktexmf","text":"<pre><code>KpseLookupOptions.mktexmf : boolean\n</code></pre> <p>disable/enable mktexmf generation for this lookup</p>"},{"location":"types/KpseLookupOptions/#kpselookupoptionsmktextfm","title":"KpseLookupOptions.mktextfm","text":"<pre><code>KpseLookupOptions.mktextfm : boolean\n</code></pre> <p>disable/enable mktextfm generation for this lookup</p>"},{"location":"types/KpseLookupOptions/#kpselookupoptionssubdir","title":"KpseLookupOptions.subdir","text":"<pre><code>KpseLookupOptions.subdir : (string|table)\n</code></pre> <p>only output matches whose directory part ends with the given string(s)</p>"},{"location":"types/Language/","title":"class Language","text":"<p>The language object is the first argument to most of the other functions in the <code>lang</code> library.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: texlang.c#L55-62</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Language/#methods","title":"methods","text":""},{"location":"types/Language/#languageid","title":"Language.id","text":"<pre><code>function Language.id() -&gt;  integer\n</code></pre> <p>@return  - The number returned is the internal <code>language</code> id number this object refers to.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the current internal <code>language</code> id number.</p> <p>Example:</p> <pre><code>local l = lang.new(123)\nprint(l:id())\n-- 123\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L50-L56</li> <li>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/manual/luatex-languages.tex#L956-960</li> </ul>"},{"location":"types/Language/#languagehyphenation","title":"Language.hyphenation","text":"<pre><code>function Language.hyphenation(hyphenation_exceptions: string)\n</code></pre> <p>Add hyphenation exceptions.</p> <p>Example:</p> <pre><code>local l = lang.new()\nl:hyphenation(\"man-u-script\")\nprint(l:hyphenation()) -- man-u-script\nl:hyphenation(\"ca-tas-tro-phe\")\nprint(l:hyphenation()) -- man-u-script ca-tas-tro-phe\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L86-L104</li> <li>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/manual/luatex-languages.tex#L968-980</li> </ul>"},{"location":"types/Language/#languagehyphenation_1","title":"Language.hyphenation","text":"<pre><code>function Language.hyphenation() -&gt; hyphenation_exceptions string?\n</code></pre> <p>Get the hyphenation exceptions.</p> <p>Example:</p> <pre><code>local l = lang.new()\nl:hyphenation(\"man-u-script\")\nprint(l:hyphenation()) -- man-u-script\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L86-L104</li> <li>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/manual/luatex-languages.tex#L968-980</li> </ul>"},{"location":"types/Language/#languageclear_hyphenation","title":"Language.clear_hyphenation","text":"<pre><code>function Language.clear_hyphenation()\n</code></pre> <p>Clear the set of hyphenation exceptions.</p> <p>Example:</p> <pre><code>local l = lang.new()\nprint(l:hyphenation()) -- nil\nlang.hyphenation(l, \"man-u-script\")\nlang.hyphenation(l, \"ca-tas-tro-phe\")\nprint(lang.hyphenation(l)) --  man-u-script ca-tas-tro-phe\nlang.clear_hyphenation(l)\nprint(lang.hyphenation(l)) -- nil\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L215-L221</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Language/#languagepatterns","title":"Language.patterns","text":"<p><pre><code>function Language.patterns(patterns: string)\n</code></pre> @param <code>patterns</code> - For example <code>.ab3a .abb2 .ab5erk</code></p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Add additional patterns for this language object.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L58-L76</li> </ul>"},{"location":"types/Language/#languagepatterns_1","title":"Language.patterns","text":"<pre><code>function Language.patterns() -&gt; pattterns string?\n</code></pre> <p>@return <code>pattterns</code> - For example <code>.ab3a .abb2 .ab5erk</code></p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the current set of patterns.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: llanglib.c#L58-L76</li> </ul>"},{"location":"types/LateLuaWhatsitNode/","title":"class LateLuaWhatsitNode","text":"<ul> <li>supers: WhatsitNode</li> </ul> <p>The difference between <code>data</code> and <code>string</code> is that on assignment, the <code>data</code> field is converted to a token list, cf. use as <code>latelua</code>. The <code>string</code> version is treated as a literal string.</p> <p>When a function is used, it gets called with as first argument the node that triggers the call.</p> <p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"late_lua\", {\n  id = \"whatsit (8)\",\n  subtype = \"late_lua (8)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"reg (4)\",\n    \"data (5)\",\n    \"name (6)\",\n    \"string (7)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L1022-L1027</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/LateLuaWhatsitNode/#fields","title":"fields","text":""},{"location":"types/LateLuaWhatsitNode/#lateluawhatsitnodeattr","title":"LateLuaWhatsitNode.attr","text":"<pre><code>LateLuaWhatsitNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/LateLuaWhatsitNode/#lateluawhatsitnodedata","title":"LateLuaWhatsitNode.data","text":"<pre><code>LateLuaWhatsitNode.data : (string|function)\n</code></pre> <p>the to be written information stored as Lua value</p>"},{"location":"types/LateLuaWhatsitNode/#lateluawhatsitnodetoken","title":"LateLuaWhatsitNode.token","text":"<pre><code>LateLuaWhatsitNode.token : string\n</code></pre> <p>the to be written information stored as token list</p>"},{"location":"types/LateLuaWhatsitNode/#lateluawhatsitnodename","title":"LateLuaWhatsitNode.name","text":"<pre><code>LateLuaWhatsitNode.name : string\n</code></pre> <p>the name to use for Lua error reporting</p>"},{"location":"types/LigaturingCallback/","title":"alias LigaturingCallback","text":"<pre><code>(alias) LigaturingCallback = fun(head: Node, tail: Node) -&gt; false?\n</code></pre> <p>Apply ligaturing to a node list.</p> <p>No return values. This callback has to apply ligaturing to the node list it receives.</p> <p>You don't have to worry about return values because the <code>head</code> node that is passed on to the callback is guaranteed not to be a glyph_node (if need be, a temporary node will be prepended), and therefore it cannot be affected by the mutations that take place. After the callback, the internal value of the \u201ctail of the list\u201d will be recalculated.</p> <p>The <code>next</code> of <code>head</code> is guaranteed to be non-nil.</p> <p>The <code>next</code> of <code>tail</code> is guaranteed to be nil, and therefore the second callback argument can often be ignored. It is provided for orthogonality, and because it can sometimes be handy when special processing has to take place.</p> <p>Setting this callback to <code>false</code> will prevent the internal ligature creation pass.</p> <p>You must not ruin the node list. For instance, the head normally is a local par node, and the tail a glue. Messing too much can push LuaTeX into panic mode.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luafont.c#L2688</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/LinebreakFilterCallback/","title":"alias LinebreakFilterCallback","text":"<pre><code>(alias) LinebreakFilterCallback = fun(head: Node, is_display: boolean) -&gt; NodeCallbackReturn\n</code></pre> <p>Override the linebreaking algorithm. The boolean is <code>true</code> if this is a pre-display break.</p> <p>This callback replaces LuaTeX's line breaking algorithm.</p> <p>The returned node is the head of the list that will be added to the main vertical list, the boolean argument is true if this paragraph is interrupted by a following math display.</p> <p>If you return something that is not a <code>&lt;node&gt;</code>, LuaTeX will apply the internal linebreak algorithm on the list that starts at <code>&lt;head&gt;</code>. Otherwise, the <code>&lt;node&gt;</code> you return is supposed to be the head of a list of nodes that are all allowed in vertical mode, and at least one of those has to represent a hbox. Failure to do so will result in a fatal error.</p> <p>Setting this callback to <code>false</code> is possible, but dangerous, because it is possible you will end up in an unfixable \u201cdeadcycles loop\u201d.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luanode.c#L125</li> <li>Corresponding C source code: linebreak.c#L128</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/LinebreakParameters/","title":"class LinebreakParameters","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/LinebreakParameters/#fields","title":"fields","text":""},{"location":"types/LinebreakParameters/#linebreakparameterspardir","title":"LinebreakParameters.pardir","text":"<pre><code>LinebreakParameters.pardir : string\n</code></pre>"},{"location":"types/LinebreakParameters/#linebreakparameterspretolerance","title":"LinebreakParameters.pretolerance","text":"<pre><code>LinebreakParameters.pretolerance : integer\n</code></pre>"},{"location":"types/LinebreakParameters/#linebreakparameterstracingparagraphs","title":"LinebreakParameters.tracingparagraphs","text":"<pre><code>LinebreakParameters.tracingparagraphs : integer\n</code></pre>"},{"location":"types/LinebreakParameters/#linebreakparameterstolerance","title":"LinebreakParameters.tolerance","text":"<pre><code>LinebreakParameters.tolerance : integer\n</code></pre>"},{"location":"types/LinebreakParameters/#linebreakparameterslooseness","title":"LinebreakParameters.looseness","text":"<pre><code>LinebreakParameters.looseness : integer\n</code></pre>"},{"location":"types/LinebreakParameters/#linebreakparametershyphenpenalty","title":"LinebreakParameters.hyphenpenalty","text":"<pre><code>LinebreakParameters.hyphenpenalty : integer\n</code></pre>"},{"location":"types/LinebreakParameters/#linebreakparametersexhyphenpenalty","title":"LinebreakParameters.exhyphenpenalty","text":"<pre><code>LinebreakParameters.exhyphenpenalty : integer\n</code></pre>"},{"location":"types/LinebreakParameters/#linebreakparameterspdfadjustspacing","title":"LinebreakParameters.pdfadjustspacing","text":"<pre><code>LinebreakParameters.pdfadjustspacing : integer\n</code></pre>"},{"location":"types/LinebreakParameters/#linebreakparametersadjdemerits","title":"LinebreakParameters.adjdemerits","text":"<pre><code>LinebreakParameters.adjdemerits : integer\n</code></pre>"},{"location":"types/LinebreakParameters/#linebreakparameterspdfprotrudechars","title":"LinebreakParameters.pdfprotrudechars","text":"<pre><code>LinebreakParameters.pdfprotrudechars : integer\n</code></pre>"},{"location":"types/LinebreakParameters/#linebreakparameterslinepenalty","title":"LinebreakParameters.linepenalty","text":"<pre><code>LinebreakParameters.linepenalty : integer\n</code></pre>"},{"location":"types/LinebreakParameters/#linebreakparameterslastlinefit","title":"LinebreakParameters.lastlinefit","text":"<pre><code>LinebreakParameters.lastlinefit : integer\n</code></pre>"},{"location":"types/LinebreakParameters/#linebreakparametersdoublehyphendemerits","title":"LinebreakParameters.doublehyphendemerits","text":"<pre><code>LinebreakParameters.doublehyphendemerits : integer\n</code></pre>"},{"location":"types/LinebreakParameters/#linebreakparametersfinalhyphendemerits","title":"LinebreakParameters.finalhyphendemerits","text":"<pre><code>LinebreakParameters.finalhyphendemerits : integer\n</code></pre>"},{"location":"types/LinebreakParameters/#linebreakparametershangafter","title":"LinebreakParameters.hangafter","text":"<pre><code>LinebreakParameters.hangafter : integer\n</code></pre>"},{"location":"types/LinebreakParameters/#linebreakparametersinterlinepenalty","title":"LinebreakParameters.interlinepenalty","text":"<pre><code>LinebreakParameters.interlinepenalty : (integer|table)\n</code></pre> <p>or table  if a table, then it is an array like <code>interlinepenalties</code></p>"},{"location":"types/LinebreakParameters/#linebreakparametersclubpenalty","title":"LinebreakParameters.clubpenalty","text":"<pre><code>LinebreakParameters.clubpenalty : (integer|table)\n</code></pre> <p>or table  if a table, then it is an array like <code>clubpenalties</code></p>"},{"location":"types/LinebreakParameters/#linebreakparameterswidowpenalty","title":"LinebreakParameters.widowpenalty","text":"<pre><code>LinebreakParameters.widowpenalty : (integer|table)\n</code></pre> <p>or table  if a table, then it is an array like <code>widowpenalties</code></p>"},{"location":"types/LinebreakParameters/#linebreakparametersbrokenpenalty","title":"LinebreakParameters.brokenpenalty","text":"<pre><code>LinebreakParameters.brokenpenalty : integer\n</code></pre>"},{"location":"types/LinebreakParameters/#linebreakparametersemergencystretch","title":"LinebreakParameters.emergencystretch","text":"<pre><code>LinebreakParameters.emergencystretch : integer\n</code></pre> <p>in scaled points</p>"},{"location":"types/LinebreakParameters/#linebreakparametershangindent","title":"LinebreakParameters.hangindent","text":"<pre><code>LinebreakParameters.hangindent : integer\n</code></pre> <p>in scaled points</p>"},{"location":"types/LinebreakParameters/#linebreakparametershsize","title":"LinebreakParameters.hsize","text":"<pre><code>LinebreakParameters.hsize : integer\n</code></pre> <p>in scaled points</p>"},{"location":"types/LinebreakParameters/#linebreakparametersleftskip","title":"LinebreakParameters.leftskip","text":"<pre><code>LinebreakParameters.leftskip : GlueSpecNode {\n    width: integer,\n    stretch: integer,\n    stretch_order: integer,\n    shrink: integer,\n    shrink_order: integer,\n}\n</code></pre>"},{"location":"types/LinebreakParameters/#linebreakparametersrightskip","title":"LinebreakParameters.rightskip","text":"<pre><code>LinebreakParameters.rightskip : GlueSpecNode {\n    width: integer,\n    stretch: integer,\n    stretch_order: integer,\n    shrink: integer,\n    shrink_order: integer,\n}\n</code></pre>"},{"location":"types/LinebreakParameters/#linebreakparametersparshape","title":"LinebreakParameters.parshape","text":"<pre><code>LinebreakParameters.parshape : table\n</code></pre>"},{"location":"types/ListNode/","title":"class ListNode","text":"<ul> <li>supers: Node</li> </ul> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L841-L851</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/ListNode/#fields","title":"fields","text":""},{"location":"types/ListNode/#listnodewidth","title":"ListNode.width","text":"<pre><code>ListNode.width : integer\n</code></pre> <p>the width of the box</p>"},{"location":"types/ListNode/#listnodeheight","title":"ListNode.height","text":"<pre><code>ListNode.height : integer\n</code></pre> <p>the height of the box</p>"},{"location":"types/ListNode/#listnodedepth","title":"ListNode.depth","text":"<pre><code>ListNode.depth : integer\n</code></pre> <p>the depth of the box</p>"},{"location":"types/ListNode/#listnodeshift","title":"ListNode.shift","text":"<pre><code>ListNode.shift : integer\n</code></pre> <p>a displacement perpendicular to the character progression direction</p>"},{"location":"types/ListNode/#listnodeglue_order","title":"ListNode.glue_order","text":"<pre><code>ListNode.glue_order : GlueOrder\n</code></pre>"},{"location":"types/ListNode/#listnodeglue_set","title":"ListNode.glue_set","text":"<pre><code>ListNode.glue_set : GlueSet\n</code></pre>"},{"location":"types/ListNode/#listnodeglue_sign","title":"ListNode.glue_sign","text":"<pre><code>ListNode.glue_sign : GlueSign\n</code></pre>"},{"location":"types/ListNode/#listnodehead","title":"ListNode.head","text":"<pre><code>ListNode.head : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>the first node of the body of this list</p>"},{"location":"types/ListNode/#listnodelist","title":"ListNode.list","text":"<pre><code>ListNode.list : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>the first node of the body of this list</p>"},{"location":"types/ListNode/#listnodedir","title":"ListNode.dir","text":"<pre><code>ListNode.dir : DirectionSpecifier\n</code></pre>"},{"location":"types/LocalParNode/","title":"class LocalParNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"local_par\", nil, {\n  id = \"local_par (9)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"pen_inter (4)\",\n    \"pen_broken (5)\",\n    \"dir (6)\",\n    \"box_left (7)\",\n    \"box_left_width (8)\",\n    \"box_right (9)\",\n    \"box_right_width (10)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L853-L861</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/LocalParNode/#fields","title":"fields","text":""},{"location":"types/LocalParNode/#localparnodeattr","title":"LocalParNode.attr","text":"<pre><code>LocalParNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/LocalParNode/#localparnodepen_inter","title":"LocalParNode.pen_inter","text":"<pre><code>LocalParNode.pen_inter : integer\n</code></pre> <p>local interline penalty (from <code>localinterlinepenalty</code>)</p>"},{"location":"types/LocalParNode/#localparnodepen_broken","title":"LocalParNode.pen_broken","text":"<pre><code>LocalParNode.pen_broken : integer\n</code></pre> <p>local broken penalty (from <code>localbrokenpenalty</code>)</p>"},{"location":"types/LocalParNode/#localparnodedir","title":"LocalParNode.dir","text":"<pre><code>LocalParNode.dir : string\n</code></pre> <p>the direction of this par. see \\in [dirnodes]</p>"},{"location":"types/LocalParNode/#localparnodebox_left","title":"LocalParNode.box_left","text":"<pre><code>LocalParNode.box_left : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>the <code>localleftbox</code></p>"},{"location":"types/LocalParNode/#localparnodebox_left_width","title":"LocalParNode.box_left_width","text":"<pre><code>LocalParNode.box_left_width : integer\n</code></pre> <p>width of the <code>localleftbox</code></p>"},{"location":"types/LocalParNode/#localparnodebox_right","title":"LocalParNode.box_right","text":"<pre><code>LocalParNode.box_right : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>the <code>localrightbox</code></p>"},{"location":"types/LocalParNode/#localparnodebox_right_width","title":"LocalParNode.box_right_width","text":"<pre><code>LocalParNode.box_right_width : integer\n</code></pre> <p>width of the <code>localrightbox</code></p>"},{"location":"types/Locale/","title":"class Locale","text":""},{"location":"types/Locale/#fields","title":"fields","text":""},{"location":"types/Locale/#localealnum","title":"Locale.alnum","text":"<pre><code>Locale.alnum : userdata\n</code></pre>"},{"location":"types/Locale/#localealpha","title":"Locale.alpha","text":"<pre><code>Locale.alpha : userdata\n</code></pre>"},{"location":"types/Locale/#localecntrl","title":"Locale.cntrl","text":"<pre><code>Locale.cntrl : userdata\n</code></pre>"},{"location":"types/Locale/#localedigit","title":"Locale.digit","text":"<pre><code>Locale.digit : userdata\n</code></pre>"},{"location":"types/Locale/#localegraph","title":"Locale.graph","text":"<pre><code>Locale.graph : userdata\n</code></pre>"},{"location":"types/Locale/#localelower","title":"Locale.lower","text":"<pre><code>Locale.lower : userdata\n</code></pre>"},{"location":"types/Locale/#localeprint","title":"Locale.print","text":"<pre><code>Locale.print : userdata\n</code></pre>"},{"location":"types/Locale/#localepunct","title":"Locale.punct","text":"<pre><code>Locale.punct : userdata\n</code></pre>"},{"location":"types/Locale/#localespace","title":"Locale.space","text":"<pre><code>Locale.space : userdata\n</code></pre>"},{"location":"types/Locale/#localeupper","title":"Locale.upper","text":"<pre><code>Locale.upper : userdata\n</code></pre>"},{"location":"types/Locale/#localexdigit","title":"Locale.xdigit","text":"<pre><code>Locale.xdigit : userdata\n</code></pre>"},{"location":"types/LuaFileSystem.AttributeMode/","title":"alias AttributeMode","text":"<ul> <li>namespace: LuaFileSystem</li> </ul> <pre><code>(alias) AttributeMode = (\"file\"|\"directory\"|\"link\"|\"socket\"|\"char device\"|\"block device\"|\"named pipe\")\n    | \"file\"\n    | \"directory\"\n    | \"link\"\n    | \"socket\"\n    | \"char device\"\n    | \"block device\"\n    | \"named pipe\"\n</code></pre>"},{"location":"types/LuaFileSystem.AttributeName/","title":"alias AttributeName","text":"<ul> <li>namespace: LuaFileSystem</li> </ul> <pre><code>(alias) AttributeName = (\"dev\"|\"ino\"|\"mode\"|\"nlink\"|\"uid\"|\"gid\"|\"rdev\"|\"access\"|\"modification\"|\"change\"...)\n    | \"dev\" -- on Unix systems, this represents the device that the inode resides on. On Windows systems, represents the drive number of the disk containing the file\n    | \"ino\" -- on Unix systems, this represents the inode number. On Windows systems this has no meaning\n    | \"mode\" -- string representing the associated protection mode (the values could be file, directory, link, socket, named pipe, char device, block device or other)\n    | \"nlink\" -- number of hard links to the file\n    | \"uid\" -- user-id of owner (Unix only, always 0 on Windows)\n    | \"gid\" -- group-id of owner (Unix only, always 0 on Windows)\n    | \"rdev\" -- on Unix systems, represents the device type, for special file inodes. On Windows systems represents the same as dev\n    | \"access\" -- time of last access\n    | \"modification\" -- time of last data modification\n    | \"change\" -- time of last file status change\n    | \"size\" -- file size, in bytes\n    | \"permissions\" -- file permissions string\n    | \"blocks\" -- block allocated for file; (Unix only)\n    | \"blksize\" -- optimal file system I/O blocksize; (Unix only)\n</code></pre>"},{"location":"types/LuaFileSystem.Attributes/","title":"class Attributes","text":"<ul> <li>namespace: LuaFileSystem</li> </ul>"},{"location":"types/LuaFileSystem.Attributes/#fields","title":"fields","text":""},{"location":"types/LuaFileSystem.Attributes/#attributesmode","title":"Attributes.mode","text":"<pre><code>Attributes.mode : LuaFileSystem.AttributeMode\n</code></pre>"},{"location":"types/LuaFileSystem/","title":"class LuaFileSystem","text":""},{"location":"types/LuaFileSystem/#methods","title":"methods","text":""},{"location":"types/LuaFileSystem/#luafilesystemattributes","title":"LuaFileSystem.attributes","text":"<pre><code>function LuaFileSystem.attributes(\n  filepath: string,\n  request_name: LuaFileSystem.AttributeName\n) -&gt;  (string|integer|LuaFileSystem.AttributeMode)\n</code></pre> <p>Returns a table with the file attributes corresponding to filepath (or nil followed by an error message and a system-dependent error code in case of error). If the second optional argument is given and is a string, then only the value of the named attribute is returned (this use is equivalent to lfs.attributes(filepath)[request_name], but the table is not created and only one attribute is retrieved from the O.S.). if a table is passed as the second argument, it (result_table) is filled with attributes and returned instead of a new table. The attributes are described as follows; attribute mode is a string, all the others are numbers, and the time related attributes use the same time reference of os.time:</p>"},{"location":"types/LuaFileSystem/#luafilesystemchdir","title":"LuaFileSystem.chdir","text":"<pre><code>function LuaFileSystem.chdir(path: string)\n -&gt;  boolean\n -&gt;  string\n</code></pre> <p>Changes the current working directory to the given path. Returns true in case of success or nil plus an error string.</p>"},{"location":"types/LuaFileSystem/#luafilesystemlock_dir","title":"LuaFileSystem.lock_dir","text":"<pre><code>function LuaFileSystem.lock_dir(\n  path: string,\n  seconds_stale: number?\n)\n -&gt;  boolean\n -&gt;  string\n</code></pre> <p>Creates a lockfile (called lockfile.lfs) in path if it does not exist and returns the lock. If the lock already exists checks if it's stale, using the second parameter (default for the second parameter is INT_MAX, which in practice means the lock will never be stale. To free the the lock call lock:free(). In case of any errors it returns nil and the error message. In particular, if the lock exists and is not stale it returns the \"File exists\" message.</p>"},{"location":"types/LuaFileSystem/#luafilesystemcurrentdir","title":"LuaFileSystem.currentdir","text":"<pre><code>function LuaFileSystem.currentdir() -&gt;  string\n</code></pre> <p>Returns a string with the current working directory or nil plus an error string.</p>"},{"location":"types/LuaFileSystem/#luafilesystemdir","title":"LuaFileSystem.dir","text":"<pre><code>function LuaFileSystem.dir(path: string) -&gt;  fun() -&gt; string\n</code></pre> <p>Lua iterator over the entries of a given directory. Each time the iterator is called with dir_obj it returns a directory entry's name as a string, or nil if there are no more entries. You can also iterate by calling dir_obj:next(), and explicitly close the directory before the iteration finished with dir_obj:close(). Raises an error if path is not a directory.</p>"},{"location":"types/LuaFileSystem/#luafilesystemlock","title":"LuaFileSystem.lock","text":"<pre><code>function LuaFileSystem.lock(\n  filehandle: file*,\n  mode: openmode,\n  start: integer?,\n  length: integer?\n)\n -&gt;  boolean\n -&gt;  string\n</code></pre> <p>Locks a file or a part of it. This function works on open files; the file handle should be specified as the first argument. The string mode could be either r (for a read/shared lock) or w (for a write/exclusive lock). The optional arguments start and length can be used to specify a starting point and its length; both should be numbers. Returns true if the operation was successful; in case of error, it returns nil plus an error string.</p>"},{"location":"types/LuaFileSystem/#luafilesystemlink","title":"LuaFileSystem.link","text":"<pre><code>function LuaFileSystem.link(\n  old: string,\n  new: string,\n  symlink: boolean?\n)\n -&gt;  boolean\n -&gt;  string\n</code></pre> <p>Creates a link. The first argument is the object to link to and the second is the name of the link. If the optional third argument is true, the link will by a symbolic link (by default, a hard link is created).</p>"},{"location":"types/LuaFileSystem/#luafilesystemmkdir","title":"LuaFileSystem.mkdir","text":"<pre><code>function LuaFileSystem.mkdir(dirname: string)\n -&gt;  boolean\n -&gt;  string\n</code></pre> <p>Creates a new directory. The argument is the name of the new directory. Returns true in case of success or nil, an error message and a system-dependent error code in case of error.</p>"},{"location":"types/LuaFileSystem/#luafilesystemrmdir","title":"LuaFileSystem.rmdir","text":"<pre><code>function LuaFileSystem.rmdir(dirname: string)\n -&gt;  boolean\n -&gt;  string\n</code></pre> <p>Removes an existing directory. The argument is the name of the directory. Returns true in case of success or nil, an error message and a system-dependent error code in case of error.</p>"},{"location":"types/LuaFileSystem/#luafilesystemsetmode","title":"LuaFileSystem.setmode","text":"<pre><code>function LuaFileSystem.setmode(\n  file: string,\n  mode: (\"binary\"|\"text\")\n)\n -&gt;  boolean\n -&gt;  string\n</code></pre> <p>Sets the writing mode for a file. The mode string can be either \"binary\" or \"text\". Returns true followed the previous mode string for the file, or nil followed by an error string in case of errors. On non-Windows platforms, where the two modes are identical, setting the mode has no effect, and the mode is always returned as binary.</p>"},{"location":"types/LuaFileSystem/#luafilesystemsymlinkattributes","title":"LuaFileSystem.symlinkattributes","text":"<pre><code>function LuaFileSystem.symlinkattributes(\n  filepath: string,\n  request_name: LuaFileSystem.AttributeName?\n) -&gt;  LuaFileSystem.Attributes {\n    mode = LuaFileSystem.AttributeMode,\n}\n</code></pre> <p>Identical to lfs.attributes except that it obtains information about the link itself (not the file it refers to). It also adds a target field, containing the file name that the symlink points to. On Windows this function does not yet support links, and is identical to lfs.attributes.</p>"},{"location":"types/LuaFileSystem/#luafilesystemtouch","title":"LuaFileSystem.touch","text":"<pre><code>function LuaFileSystem.touch(\n  filepath: string,\n  atime: integer?,\n  mtime: integer?\n)\n -&gt;  boolean\n -&gt;  string\n</code></pre> <p>Set access and modification times of a file. This function is a bind to utime function. The first argument is the filename, the second argument (atime) is the access time, and the third argument (mtime) is the modification time. Both times are provided in seconds (which should be generated with Lua standard function os.time). If the modification time is omitted, the access time provided is used; if both times are omitted, the current time is used. Returns true in case of success or nil, an error message and a system-dependent error code in case of error.</p>"},{"location":"types/LuaFileSystem/#luafilesystemunlock","title":"LuaFileSystem.unlock","text":"<pre><code>function LuaFileSystem.unlock(\n  filehandle: file*,\n  start: integer?,\n  length: integer?\n)\n -&gt;  boolean\n -&gt;  string\n</code></pre> <p>Unlocks a file or a part of it. This function works on open files; the file handle should be specified as the first argument. The optional arguments start and length can be used to specify a starting point and its length; both should be numbers. Returns true if the operation was successful; in case of error, it returns nil plus an error string.</p>"},{"location":"types/LuaHarfBuzzOptions/","title":"class LuaHarfBuzzOptions","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/LuaHarfBuzzOptions/#fields","title":"fields","text":""},{"location":"types/LuaHarfBuzzOptions/#luaharfbuzzoptionsdirection","title":"LuaHarfBuzzOptions.direction","text":"<pre><code>LuaHarfBuzzOptions.direction : HbDirection {\n    LTR: integer?,\n    RTL: integer?,\n    TTB: integer?,\n    BTT: integer?,\n    new: function,\n    __to_string: function,\n    __eq: function,\n    is_valid: function,\n    is_horizontal: function,\n    is_vertical: function,\n    is_forward: function,\n    is_backward: function,\n    ...(+0)\n}\n</code></pre> <p>A <code>Direction</code> object representing the object.</p>"},{"location":"types/LuaHarfBuzzOptions/#luaharfbuzzoptionsscript","title":"LuaHarfBuzzOptions.script","text":"<pre><code>LuaHarfBuzzOptions.script : HbScript {\n    COMMON: string,\n    INHERITED: string,\n    UNKNOWN: string,\n    INVALID: string,\n    new: function,\n    from_iso15924_tag: function,\n    to_iso15924_tag: function,\n    __to_string: function,\n    __eq: function,\n}\n</code></pre> <p>A <code>Script</code> object representing the script.</p>"},{"location":"types/LuaHarfBuzzOptions/#luaharfbuzzoptionslanguage","title":"LuaHarfBuzzOptions.language","text":"<pre><code>LuaHarfBuzzOptions.language : HbLanguage {\n    INVALID: HbLanguage,\n    new: function,\n    __tostring: function,\n    __eq: function,\n}\n</code></pre> <p>A <code>Language</code> object representing the language.</p>"},{"location":"types/LuaHarfBuzzOptions/#luaharfbuzzoptionsfeatures","title":"LuaHarfBuzzOptions.features","text":"<pre><code>LuaHarfBuzzOptions.features : (string|HbFeature[])\n</code></pre> <p>features to enable, specified as either of the following. -- comma-separated list of features. See feature string syntax reference -- table of <code>Feature</code> objects</p>"},{"location":"types/MPTransform/","title":"alias MPTransform","text":"<pre><code>(alias) MPTransform = number[]\n</code></pre> <p>Each transform is a six-item array.</p> <p>Note that the translation (index 1 and 2) comes first. This differs from the ordering in PostScript, where the translation comes last.</p> <pre><code>{ x, y, xx, yx, xy, yy }\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MarginKernNode/","title":"class MarginKernNode","text":"<ul> <li>supers: Node</li> </ul> <p>Margin kerns result from protrusion.</p> <p>Example:</p> <pre><code>assert.node_type(\"margin_kern\", nil, {\n  id = \"margin_kern (28)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"width (4)\",\n    \"glyph (5)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L863-L866</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MarginKernNode/#fields","title":"fields","text":""},{"location":"types/MarginKernNode/#marginkernnodesubtype","title":"MarginKernNode.subtype","text":"<pre><code>MarginKernNode.subtype : MarginKernNodeSubtype\n</code></pre>"},{"location":"types/MarginKernNode/#marginkernnodeattr","title":"MarginKernNode.attr","text":"<pre><code>MarginKernNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/MarginKernNode/#marginkernnodewidth","title":"MarginKernNode.width","text":"<pre><code>MarginKernNode.width : integer\n</code></pre> <p>the advance of the kern</p>"},{"location":"types/MarginKernNode/#marginkernnodeglyph","title":"MarginKernNode.glyph","text":"<pre><code>MarginKernNode.glyph : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>the glyph to be used</p>"},{"location":"types/MarginKernNodeSubtype/","title":"alias MarginKernNodeSubtype","text":"<pre><code>(alias) MarginKernNodeSubtype = (0|1)\n    | 0 -- left\n    | 1 -- right\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L666-L667</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MarkNode/","title":"class MarkNode","text":"<ul> <li>supers: Node</li> </ul> <p>A mark node has a mark field that points a token list that contains the user\u2019s <code>\\mark</code> text.</p> <p>Example:</p> <pre><code>assert.node_type(\"mark\", nil, {\n  id = \"mark (4)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"class (4)\",\n    \"mark (5)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L868-L871</li> <li>Donald Ervin Knuth. \u201cTeX: The Program\u201d: section 141, page 42 tex.pdf</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MarkNode/#fields","title":"fields","text":""},{"location":"types/MarkNode/#marknodesubtype","title":"MarkNode.subtype","text":"<pre><code>MarkNode.subtype : integer\n</code></pre> <p>unused</p>"},{"location":"types/MarkNode/#marknodeattr","title":"MarkNode.attr","text":"<pre><code>MarkNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/MarkNode/#marknodeclass","title":"MarkNode.class","text":"<pre><code>MarkNode.class : integer\n</code></pre> <p>the mark class</p>"},{"location":"types/MarkNode/#marknodemark","title":"MarkNode.mark","text":"<pre><code>MarkNode.mark : table\n</code></pre> <p>a table representing a token list</p>"},{"location":"types/MathCharNode/","title":"class MathCharNode","text":"<ul> <li>supers: Node</li> </ul> <p>The <code>math_char</code> is the simplest subnode field, it contains the character and family for a single glyph object.</p> <p>Example:</p> <pre><code>assert.node_type(\"math_char\", nil, {\n  id = \"math_char (23)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"fam (4)\",\n    \"char (5)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L882-L885</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MathCharNode/#fields","title":"fields","text":""},{"location":"types/MathCharNode/#mathcharnodeattr","title":"MathCharNode.attr","text":"<pre><code>MathCharNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/MathCharNode/#mathcharnodechar","title":"MathCharNode.char","text":"<pre><code>MathCharNode.char : integer\n</code></pre> <p>The character index.</p>"},{"location":"types/MathCharNode/#mathcharnodefam","title":"MathCharNode.fam","text":"<pre><code>MathCharNode.fam : integer\n</code></pre> <p>The family number.</p>"},{"location":"types/MathCode/","title":"alias MathCode","text":"<pre><code>(alias) MathCode = integer[]\n</code></pre> <p>The table for <code>mathcode</code> is an array of 3 integers, like this:</p> <pre><code>{\n    -- class\n    -- family\n    -- character\n}\n</code></pre>"},{"location":"types/MathNode/","title":"class MathNode","text":"<ul> <li>supers: Node</li> </ul> <p>A math node, which occurs only in horizontal lists, appears before and after mathematical formulas. The subtype field is <code>beginmath</code> before the formula and <code>endmath</code> after it. There is a <code>surround</code> field, which represents the amount of surrounding space inserted by <code>\\mathsurround</code>.</p> <p>Example:</p> <pre><code>assert.node_type(\"math\", nil, {\n  id = \"math (11)\",\n  subtypes = { \"beginmath (0)\", \"endmath (1)\" },\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"surround (4)\",\n    \"width (5)\",\n    \"stretch (6)\",\n    \"shrink (7)\",\n    \"stretch_order (8)\",\n    \"shrink_order (9)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L873-L880</li> <li>Donald Ervin Knuth. \u201cTeX: The Program\u201d: section 147, page 54 tex.pdf</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MathNode/#fields","title":"fields","text":""},{"location":"types/MathNode/#mathnodesubtype","title":"MathNode.subtype","text":"<pre><code>MathNode.subtype : MathNodeSubtype\n</code></pre>"},{"location":"types/MathNode/#mathnodeattr","title":"MathNode.attr","text":"<pre><code>MathNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/MathNode/#mathnodesurround","title":"MathNode.surround","text":"<pre><code>MathNode.surround : integer\n</code></pre> <p>The width of the <code>\\mathsurround</code> kern.</p>"},{"location":"types/MathNodeSubtype/","title":"alias MathNodeSubtype","text":"<pre><code>(alias) MathNodeSubtype = (0|1)\n    | 0 -- beginmath\n    | 1 -- endmath\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L663-L664</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MathParamName/","title":"alias MathParamName","text":"<pre><code>(alias) MathParamName = (\"quad\"|\"axis\"|\"operatorsize\"|\"overbarkern\"|\"overbarrule\"|\"overbarvgap\"|\"underbarkern\"|\"underbarrule\"|\"underbarvgap\"|\"radicalkern\"...)\n    | \"quad\"\n    | \"axis\"\n    | \"operatorsize\"\n    | \"overbarkern\"\n    | \"overbarrule\"\n    | \"overbarvgap\"\n    | \"underbarkern\"\n    | \"underbarrule\"\n    | \"underbarvgap\"\n    | \"radicalkern\"\n    | \"radicalrule\"\n    | \"radicalvgap\"\n    | \"radicaldegreebefore\"\n    | \"radicaldegreeafter\"\n    | \"radicaldegreeraise\"\n    | \"stackvgap\"\n    | \"stacknumup\"\n    | \"stackdenomdown\"\n    | \"fractionrule\"\n    | \"fractionnumvgap\"\n    | \"fractionnumup\"\n    | \"fractiondenomvgap\"\n    | \"fractiondenomdown\"\n    | \"fractiondelsize\"\n    | \"skewedfractionhgap\"\n    | \"skewedfractionvgap\"\n    | \"limitabovevgap\"\n    | \"limitabovebgap\"\n    | \"limitabovekern\"\n    | \"limitbelowvgap\"\n    | \"limitbelowbgap\"\n    | \"limitbelowkern\"\n    | \"nolimitsubfactor\"\n    | \"nolimitsupfactor\"\n    | \"underdelimitervgap\"\n    | \"underdelimiterbgap\"\n    | \"overdelimitervgap\"\n    | \"overdelimiterbgap\"\n    | \"subshiftdrop\"\n    | \"supshiftdrop\"\n    | \"subshiftdown\"\n    | \"subsupshiftdown\"\n    | \"subtopmax\"\n    | \"supshiftup\"\n    | \"supbottommin\"\n    | \"supsubbottommax\"\n    | \"subsupvgap\"\n    | \"spaceafterscript\"\n    | \"connectoroverlapmin\"\n    | \"ordordspacing\"\n    | \"ordopspacing\"\n    | \"ordbinspacing\"\n    | \"ordrelspacing\"\n    | \"ordopenspacing\"\n    | \"ordclosespacing\"\n    | \"ordpunctspacing\"\n    | \"ordinnerspacing\"\n    | \"opordspacing\"\n    | \"opopspacing\"\n    | \"opbinspacing\"\n    | \"oprelspacing\"\n    | \"opopenspacing\"\n    | \"opclosespacing\"\n    | \"oppunctspacing\"\n    | \"opinnerspacing\"\n    | \"binordspacing\"\n    | \"binopspacing\"\n    | \"binbinspacing\"\n    | \"binrelspacing\"\n    | \"binopenspacing\"\n    | \"binclosespacing\"\n    | \"binpunctspacing\"\n    | \"bininnerspacing\"\n    | \"relordspacing\"\n    | \"relopspacing\"\n    | \"relbinspacing\"\n    | \"relrelspacing\"\n    | \"relopenspacing\"\n    | \"relclosespacing\"\n    | \"relpunctspacing\"\n    | \"relinnerspacing\"\n    | \"openordspacing\"\n    | \"openopspacing\"\n    | \"openbinspacing\"\n    | \"openrelspacing\"\n    | \"openopenspacing\"\n    | \"openclosespacing\"\n    | \"openpunctspacing\"\n    | \"openinnerspacing\"\n    | \"closeordspacing\"\n    | \"closeopspacing\"\n    | \"closebinspacing\"\n    | \"closerelspacing\"\n    | \"closeopenspacing\"\n    | \"closeclosespacing\"\n    | \"closepunctspacing\"\n    | \"closeinnerspacing\"\n    | \"punctordspacing\"\n    | \"punctopspacing\"\n    | \"punctbinspacing\"\n    | \"punctrelspacing\"\n    | \"punctopenspacing\"\n    | \"punctclosespacing\"\n    | \"punctpunctspacing\"\n    | \"punctinnerspacing\"\n    | \"innerordspacing\"\n    | \"inneropspacing\"\n    | \"innerbinspacing\"\n    | \"innerrelspacing\"\n    | \"inneropenspacing\"\n    | \"innerclosespacing\"\n    | \"innerpunctspacing\"\n    | \"innerinnerspacing\"\n</code></pre> <p>The parameter name minus the leading \u201cUmath\u201d.</p> <ul> <li>Corresponding C source code: texmath.c#L518-L558</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MathStyleName/","title":"alias MathStyleName","text":"<pre><code>(alias) MathStyleName = (\"display\"|\"crampeddisplay\"|\"text\"|\"crampedtext\"|\"script\"|\"crampedscript\"|\"scriptscript\"|\"crampedscriptscript\")\n    | \"display\"\n    | \"crampeddisplay\"\n    | \"text\"\n    | \"crampedtext\"\n    | \"script\"\n    | \"crampedscript\"\n    | \"scriptscript\"\n    | \"crampedscriptscript\"\n</code></pre> <p>The style name minus the trailing \u201cstyle\u201d.</p> <ul> <li>Corresponding C source code: texmath.c#L510-L516</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MathTextCharNode/","title":"class MathTextCharNode","text":"<ul> <li>supers: Node</li> </ul> <p>The <code>math_text_char</code> is a special case that you will not normally encounter, it arises temporarily during math list conversion (its sole function is to suppress a following italic correction).</p> <p>Example:</p> <pre><code>assert.node_type(\"math_text_char\", nil, {\n  id = \"math_text_char (26)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"fam (4)\",\n    \"char (5)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L887-L890</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MathTextCharNode/#fields","title":"fields","text":""},{"location":"types/MathTextCharNode/#mathtextcharnodeattr","title":"MathTextCharNode.attr","text":"<pre><code>MathTextCharNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/MathTextCharNode/#mathtextcharnodechar","title":"MathTextCharNode.char","text":"<pre><code>MathTextCharNode.char : integer\n</code></pre> <p>The character index.</p>"},{"location":"types/MathTextCharNode/#mathtextcharnodefam","title":"MathTextCharNode.fam","text":"<pre><code>MathTextCharNode.fam : integer\n</code></pre> <p>The family number.</p>"},{"location":"types/Message/","title":"class Message","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Message/#fields","title":"fields","text":""},{"location":"types/Message/#messageheaders","title":"Message.headers","text":"<pre><code>Message.headers : table&lt;string,string&gt;\n</code></pre>"},{"location":"types/Message/#messagebody","title":"Message.body","text":"<pre><code>Message.body : string\n</code></pre>"},{"location":"types/MlistToHlistCallback/","title":"alias MlistToHlistCallback","text":"<pre><code>(alias) MlistToHlistCallback = fun(head: Node, display_type: string, need_penalties: boolean) -&gt; Node\n</code></pre> <p>Convert a math node list into a horizontal node list.</p> <p>This callback replaces LuaTeX's math list to node list conversion algorithm.</p> <p>The returned node is the head of the list that will be added to the vertical or horizontal list, the string argument is either \u201ctext\u201d or \u201cdisplay\u201d depending on the current math mode, the boolean argument is <code>true</code> if penalties have to be inserted in this list, <code>false</code> otherwise.</p> <p>Setting this callback to <code>false</code> is bad, it will almost certainly result in an endless loop.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: mlist.c#L1866</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MovementStackNode/","title":"class MovementStackNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"movement_stack\", nil, {\n  id = \"movement_stack (43)\",\n  fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\" },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L482</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpArguments/","title":"class MpArguments","text":"<p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-graphics.tex#L387-L409</li> <li>Corresponding C source code: lmplib.c#L308-L322</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpArguments/#fields","title":"fields","text":""},{"location":"types/MpArguments/#mpargumentserror_line","title":"MpArguments.error_line","text":"<pre><code>MpArguments.error_line : integer?\n</code></pre> <p>error line width, default 79</p>"},{"location":"types/MpArguments/#mpargumentsprint_line","title":"MpArguments.print_line","text":"<pre><code>MpArguments.print_line : integer?\n</code></pre> <p>line length in ps output 100</p>"},{"location":"types/MpArguments/#mpargumentsrandom_seed","title":"MpArguments.random_seed","text":"<pre><code>MpArguments.random_seed : integer?\n</code></pre> <p>the initial random seed variable</p>"},{"location":"types/MpArguments/#mpargumentsinteraction","title":"MpArguments.interaction","text":"<pre><code>MpArguments.interaction : nil\n</code></pre> <p>the interaction mode, default <code>errorstop</code></p>"},{"location":"types/MpArguments/#mpargumentsjob_name","title":"MpArguments.job_name","text":"<pre><code>MpArguments.job_name : string?\n</code></pre> <p><code>--jobname</code>, default <code>mpout</code></p>"},{"location":"types/MpArguments/#mpargumentsfind_file","title":"MpArguments.find_file","text":"<pre><code>MpArguments.find_file : MpFindFileFunc?\n</code></pre> <p>a function to find files only local files</p>"},{"location":"types/MpArguments/#mpargumentsrun_script","title":"MpArguments.run_script","text":"<pre><code>MpArguments.run_script : MpRunScriptFunc?\n</code></pre>"},{"location":"types/MpArguments/#mpargumentsmake_text","title":"MpArguments.make_text","text":"<pre><code>MpArguments.make_text : MpMakeTextFunc?\n</code></pre>"},{"location":"types/MpArguments/#mpargumentsscript_error","title":"MpArguments.script_error","text":"<pre><code>MpArguments.script_error : MpScriptErrorFunc?\n</code></pre>"},{"location":"types/MpArguments/#mpargumentsextensions","title":"MpArguments.extensions","text":"<pre><code>MpArguments.extensions : integer?\n</code></pre>"},{"location":"types/MpArguments/#mpargumentsmath_mode","title":"MpArguments.math_mode","text":"<pre><code>MpArguments.math_mode : nil\n</code></pre> <p>the number system to use, default <code>scaled</code></p>"},{"location":"types/MpArguments/#mpargumentsutf8_mode","title":"MpArguments.utf8_mode","text":"<pre><code>MpArguments.utf8_mode : boolean?\n</code></pre>"},{"location":"types/MpColor/","title":"alias MpColor","text":"<pre><code>(alias) MpColor = integer[]\n</code></pre> <p>A color is an integer array with 0, 1, 3 or 4 values:</p> <p>field   type  explanation</p> <p><code>0</code>  marking only  no values <code>1</code>  greyscale     one value in the range <code>(0,1)</code>, \u201cblack\u201d is <code>0</code> <code>3</code>  \\RGB          three values in the range <code>(0,1)</code>, \u201cblack\u201d is <code>0,0,0</code> <code>4</code>  \\CMYK         four values in the range <code>(0,1)</code>, \u201cblack\u201d is <code>0,0,0,1</code></p> <p>If the color model of the internal object was <code>uninitialized</code>, then it was initialized to the values representing \u201cblack\u201d in the colorspace <code>defaultcolormodel</code> that was in effect at the time of the <code>shipout</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpDash/","title":"class MpDash","text":"<p>Each <code>dash</code> is two-item hash, using the same model as PostScript for the representation of the dashlist. <code>dashes</code> is an array of \u201con\u201d and \u201coff\u201d, values, and <code>offset</code> is the phase of the pattern.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpDash/#fields","title":"fields","text":""},{"location":"types/MpDash/#mpdashdashes","title":"MpDash.dashes","text":"<pre><code>MpDash.dashes : table\n</code></pre> <p>an array of on-off numbers</p>"},{"location":"types/MpDash/#mpdashoffset","title":"MpDash.offset","text":"<pre><code>MpDash.offset : integer\n</code></pre> <p>the starting offset value</p>"},{"location":"types/MpFig/","title":"class MpFig","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpFig/#methods","title":"methods","text":""},{"location":"types/MpFig/#mpfigboundingbox","title":"MpFig.boundingbox","text":"<pre><code>function MpFig.boundingbox() -&gt;  number[]\n</code></pre> <p>@return  - minx miny maxx maxy</p> <p>Return the bounding box, as an array of 4 values. number.</p> <p>When the boundingbox represents a \u201cnegated rectangle\u201d, i.e. when the first set of coordinates is larger than the second set, the picture is empty.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L1375-L1388</li> </ul>"},{"location":"types/MpFig/#mpfigpostscript","title":"MpFig.postscript","text":"<pre><code>function MpFig.postscript(\n  prologues: integer?,\n  procset: integer?\n) -&gt;  string?\n</code></pre> <p>Return a string that is the ps output of the <code>fig</code>.</p> <p>this function accepts two optional integer arguments for specifying the values of <code>prologues</code> (first argument) and <code>procset</code> (second argument)</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L1262-L1276</li> </ul>"},{"location":"types/MpFig/#mpfigsvg","title":"MpFig.svg","text":"<pre><code>function MpFig.svg(prologues: integer?) -&gt;  string?\n</code></pre> <p>Return a string that is the svg output of the <code>fig</code>.</p> <p>This function accepts an optional integer argument for specifying the value of <code>prologues</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L1278-L1291</li> </ul>"},{"location":"types/MpFig/#mpfigpng","title":"MpFig.png","text":"<pre><code>function MpFig.png(options: string?) -&gt;  string?\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L1293-L1306</li> </ul>"},{"location":"types/MpFig/#mpfigobjects","title":"MpFig.objects","text":"<pre><code>function MpFig.objects() -&gt;  table\n</code></pre> <p>Return the actual array of graphic objects in this <code>fig</code>.</p> <p>Note: you can call <code>fig:objects()</code> only once for any one <code>fig</code> object!</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L1213-L1233</li> </ul>"},{"location":"types/MpFig/#mpfigcopy_objects","title":"MpFig.copy_objects","text":"<pre><code>function MpFig.copy_objects() -&gt;  table\n</code></pre> <p>Return a deep copy of the array of graphic objects in this <code>fig</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L1235-L1253</li> </ul>"},{"location":"types/MpFig/#mpfigfilename","title":"MpFig.filename","text":"<pre><code>function MpFig.filename() -&gt;  string?\n</code></pre> <p>The filename this <code>fig</code>'s PostScript output would have written to in stand alone mode</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L1308-L1318</li> </ul>"},{"location":"types/MpFig/#mpfigwidth","title":"MpFig.width","text":"<pre><code>function MpFig.width() -&gt;  number?\n</code></pre> <p>Return the <code>fontcharwd</code> value.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L1320-L1329</li> </ul>"},{"location":"types/MpFig/#mpfigheight","title":"MpFig.height","text":"<pre><code>function MpFig.height() -&gt;  number?\n</code></pre> <p>Return the <code>fontcharht</code> value.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L1331-L1340</li> </ul>"},{"location":"types/MpFig/#mpfigdepth","title":"MpFig.depth","text":"<pre><code>function MpFig.depth() -&gt;  number?\n</code></pre> <p>Return the <code>fontchardp</code> value.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L1342-L1351</li> </ul>"},{"location":"types/MpFig/#mpfigitalcorr","title":"MpFig.italcorr","text":"<pre><code>function MpFig.italcorr() -&gt;  number?\n</code></pre> <p>Return the <code>fontcharit</code> value.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L1353-L1362</li> </ul>"},{"location":"types/MpFig/#mpfigcharcode","title":"MpFig.charcode","text":"<pre><code>function MpFig.charcode() -&gt;  number?\n</code></pre> <p>Return the (rounded) <code>charcode</code> value.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L1364-L1373</li> </ul>"},{"location":"types/MpFileFileMode/","title":"alias MpFileFileMode","text":"<pre><code>(alias) MpFileFileMode = unknown\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>the file mode</p>"},{"location":"types/MpFill/","title":"class MpFill","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: psout.w#L5335-L5346</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpFill/#fields","title":"fields","text":""},{"location":"types/MpFill/#mpfillpath","title":"MpFill.path","text":"<pre><code>MpFill.path : table\n</code></pre> <p>the list of knots</p>"},{"location":"types/MpFill/#mpfillhtap","title":"MpFill.htap","text":"<pre><code>MpFill.htap : table\n</code></pre> <p>the list of knots for the reversed trajectory</p>"},{"location":"types/MpFill/#mpfillpen","title":"MpFill.pen","text":"<pre><code>MpFill.pen : table\n</code></pre> <p>knots of the pen</p>"},{"location":"types/MpFill/#mpfillcolor","title":"MpFill.color","text":"<pre><code>MpFill.color : table\n</code></pre> <p>the object's color</p>"},{"location":"types/MpFill/#mpfilllinejoin","title":"MpFill.linejoin","text":"<pre><code>MpFill.linejoin : integer\n</code></pre> <p>line join style (bare number)</p>"},{"location":"types/MpFill/#mpfillmiterlimit","title":"MpFill.miterlimit","text":"<pre><code>MpFill.miterlimit : integer\n</code></pre> <p>miterlimit</p>"},{"location":"types/MpFill/#mpfillprescript","title":"MpFill.prescript","text":"<pre><code>MpFill.prescript : string\n</code></pre> <p>the prescript text</p>"},{"location":"types/MpFill/#mpfillpostscript","title":"MpFill.postscript","text":"<pre><code>MpFill.postscript : string\n</code></pre> <p>the postscript text</p>"},{"location":"types/MpFindFileFunc/","title":"alias MpFindFileFunc","text":"<pre><code>(alias) MpFindFileFunc = fun(name: string, mode: MpFileFileMode, type: MpFindFileType) -&gt; string\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L330-L374</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpFindFileType/","title":"alias MpFindFileType","text":"<pre><code>(alias) MpFindFileType = unknown\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>the kind of file</p>"},{"location":"types/MpGraphicObject/","title":"class MpGraphicObject","text":"<p>All graphical objects have a field <code>type</code> that gives the object type as a string value;</p> <p>Reference:</p> <ul> <li>Corresponding C source code: psout.w#L5308-L5310</li> </ul>"},{"location":"types/MpGraphicObject/#fields","title":"fields","text":""},{"location":"types/MpGraphicObject/#mpgraphicobjecttype","title":"MpGraphicObject.type","text":"<pre><code>MpGraphicObject.type : string\n</code></pre>"},{"location":"types/MpInstance/","title":"class MpInstance","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpInstance/#methods","title":"methods","text":""},{"location":"types/MpInstance/#mpinstancestatistics","title":"MpInstance.statistics","text":"<pre><code>function MpInstance.statistics() -&gt;  MpStats {\n    main_memory = integer,\n    hash_size = integer,\n    param_size = integer,\n    max_in_open = integer,\n}\n</code></pre> <p>Return some statistics for this metapost instance.</p> <p>This function returns the vital statistics for an MPlib instance.</p> <p>Note that in the new version of MPlib, this is informational only. The objects are all allocated dynamically, so there is no chance of running out of space unless the available system memory is exhausted.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-graphics.tex#L470-L482</li> <li>Corresponding C source code: lmplib.c#L771-L792</li> </ul>"},{"location":"types/MpInstance/#mpinstanceexecute","title":"MpInstance.execute","text":"<pre><code>function MpInstance.execute(code: string) -&gt;  MpResult {\n    log = string?,\n    term = string?,\n    error = string?,\n    status = MpResultStatus,\n    fig = MpFig[]?,\n}\n</code></pre> <p>Execute metapost code in the instance.</p> <p>You can ask the MetaPost interpreter to run a chunk of code by calling mp.execute()</p> <p>for various bits of MetaPost language input. Be sure to check the <code>rettable.status</code> (see below) because when a fatal MetaPost error occurs the MPlib instance will become unusable thereafter.</p> <p>Generally speaking, it is best to keep your chunks small, but beware that all chunks have to obey proper syntax, like each of them is a small file. For instance, you cannot split a single statement over multiple chunks.</p> <p>In contrast with the normal stand alone <code>mpost</code> command, there is <code>no</code> implied \u201cinput\u201d at the start of the first chunk.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-graphics.tex#L488-L507</li> <li>Corresponding C source code: lmplib.c#L692-L711</li> </ul>"},{"location":"types/MpInstance/#mpinstancefinish","title":"MpInstance.finish","text":"<pre><code>function MpInstance.finish() -&gt;  MpResult {\n    log = string?,\n    term = string?,\n    error = string?,\n    status = MpResultStatus,\n    fig = MpFig[]?,\n}\n</code></pre> <p>Finish a metapost instance.</p> <p>If for some reason you want to stop using an MPlib instance while processing is not yet actually done, you can call <code>finish</code>. Eventually, used memory will be freed and open files will be closed by the Lua garbage collector, but an explicit <code>finish</code> is the only way to capture the final part of the output streams.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L713-L728</li> </ul>"},{"location":"types/MpInstance/#mpinstancechar_width","title":"MpInstance.char_width","text":"<pre><code>function MpInstance.char_width(\n  fontname: string,\n  char: integer\n) -&gt; width number\n</code></pre> <p>@return <code>width</code> - AFM units</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Report a character's width.</p> <p>This function finds the size of a glyph in a defined font. The <code>fontname</code> is the same name as the argument to <code>infont</code>; the <code>char</code> is a glyph id in the range 0 to 255; the returned <code>width</code> is in AFM units.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L748-L751</li> </ul>"},{"location":"types/MpInstance/#mpinstancechar_height","title":"MpInstance.char_height","text":"<pre><code>function MpInstance.char_height(\n  fontname: string,\n  char: integer\n) -&gt; height number\n</code></pre> <p>@return <code>height</code> - FM units</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Report a character's height.</p> <p>This function finds the size of a glyph in a defined font. The <code>fontname</code> is the same name as the argument to <code>infont</code>; the <code>char</code> is a glyph id in the range 0 to 255; the returned <code>height</code> is in AFM units.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L758-L761</li> </ul>"},{"location":"types/MpInstance/#mpinstancechar_depth","title":"MpInstance.char_depth","text":"<pre><code>function MpInstance.char_depth(\n  fontname: string,\n  char: integer\n) -&gt; depth number\n</code></pre> <p>@return <code>depth</code> - AFM units</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Report a character's depth.</p> <p>This function finds the size of a glyph in a defined font. The <code>fontname</code> is the same name as the argument to <code>infont</code>; the <code>char</code> is a glyph id in the range 0 to 255; the returned <code>depth</code> is in AFM units.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L753-L756</li> </ul>"},{"location":"types/MpInstance/#mpinstanceget_boolean","title":"MpInstance.get_boolean","text":"<pre><code>function MpInstance.get_boolean(name: string) -&gt; value boolean\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L497-L510</li> </ul>"},{"location":"types/MpInstance/#mpinstanceget_numeric","title":"MpInstance.get_numeric","text":"<pre><code>function MpInstance.get_numeric(name: string) -&gt; value integer\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L482-L495</li> </ul>"},{"location":"types/MpInstance/#mpinstanceget_string","title":"MpInstance.get_string","text":"<pre><code>function MpInstance.get_string(name: string) -&gt; value string\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L512-L528</li> </ul>"},{"location":"types/MpInstance/#mpinstanceget_path","title":"MpInstance.get_path","text":"<pre><code>function MpInstance.get_path(name: string) -&gt; value table\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L1649-L1693</li> </ul>"},{"location":"types/MpInstance/#mpinstancesolve_path","title":"MpInstance.solve_path","text":"<pre><code>function MpInstance.solve_path(\n  coordinates: table,\n  cyclic: boolean\n)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L978-L1195</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpKnot/","title":"class MpKnot","text":"<p>Paths and pens (that are really just a special type of paths as far as mplib is concerned) are represented by an array where each entry is a table that represents a knot.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpKnot/#fields","title":"fields","text":""},{"location":"types/MpKnot/#mpknotleft_type","title":"MpKnot.left_type","text":"<pre><code>MpKnot.left_type : string\n</code></pre> <p>when present: endpoint, but usually absent</p>"},{"location":"types/MpKnot/#mpknotright_type","title":"MpKnot.right_type","text":"<pre><code>MpKnot.right_type : string\n</code></pre> <p>like <code>left_type</code></p>"},{"location":"types/MpKnot/#mpknotx_coord","title":"MpKnot.x_coord","text":"<pre><code>MpKnot.x_coord : number\n</code></pre> <p>X coordinate of this knot</p>"},{"location":"types/MpKnot/#mpknoty_coord","title":"MpKnot.y_coord","text":"<pre><code>MpKnot.y_coord : number\n</code></pre> <p>Y coordinate of this knot</p>"},{"location":"types/MpKnot/#mpknotleft_x","title":"MpKnot.left_x","text":"<pre><code>MpKnot.left_x : number\n</code></pre> <p>X coordinate of the precontrol point of this knot</p>"},{"location":"types/MpKnot/#mpknotleft_y","title":"MpKnot.left_y","text":"<pre><code>MpKnot.left_y : number\n</code></pre> <p>Y coordinate of the precontrol point of this knot</p>"},{"location":"types/MpKnot/#mpknotright_x","title":"MpKnot.right_x","text":"<pre><code>MpKnot.right_x : number\n</code></pre> <p>X coordinate of the postcontrol point of this knot</p>"},{"location":"types/MpKnot/#mpknotright_y","title":"MpKnot.right_y","text":"<pre><code>MpKnot.right_y : number\n</code></pre> <p>Y coordinate of the postcontrol point of this knot</p> <p>There is one special case: pens that are (possibly transformed) ellipses have an extra string-valued key <code>type</code> with value <code>elliptical</code> besides the array part containing the knot list.</p>"},{"location":"types/MpMakeTextFunc/","title":"alias MpMakeTextFunc","text":"<pre><code>(alias) MpMakeTextFunc = fun(name: string, what: integer) -&gt; string\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L444-L480</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpOutline/","title":"class MpOutline","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpOutline/#fields","title":"fields","text":""},{"location":"types/MpOutline/#mpoutlinepath","title":"MpOutline.path","text":"<pre><code>MpOutline.path : table\n</code></pre> <p>the list of knots</p>"},{"location":"types/MpOutline/#mpoutlinepen","title":"MpOutline.pen","text":"<pre><code>MpOutline.pen : table\n</code></pre> <p>knots of the pen</p>"},{"location":"types/MpOutline/#mpoutlinecolor","title":"MpOutline.color","text":"<pre><code>MpOutline.color : table\n</code></pre> <p>the object's color</p>"},{"location":"types/MpOutline/#mpoutlinelinejoin","title":"MpOutline.linejoin","text":"<pre><code>MpOutline.linejoin : integer\n</code></pre> <p>line join style (bare number)</p>"},{"location":"types/MpOutline/#mpoutlinemiterlimit","title":"MpOutline.miterlimit","text":"<pre><code>MpOutline.miterlimit : integer\n</code></pre> <p>miterlimit</p>"},{"location":"types/MpOutline/#mpoutlinelinecap","title":"MpOutline.linecap","text":"<pre><code>MpOutline.linecap : integer\n</code></pre> <p>line cap style (bare number)</p>"},{"location":"types/MpOutline/#mpoutlinedash","title":"MpOutline.dash","text":"<pre><code>MpOutline.dash : table\n</code></pre> <p>representation of a dash list</p>"},{"location":"types/MpOutline/#mpoutlineprescript","title":"MpOutline.prescript","text":"<pre><code>MpOutline.prescript : string\n</code></pre> <p>the prescript text</p>"},{"location":"types/MpOutline/#mpoutlinepostscript","title":"MpOutline.postscript","text":"<pre><code>MpOutline.postscript : string\n</code></pre> <p>the postscript text</p>"},{"location":"types/MpPathPen/","title":"alias MpPathPen","text":"<pre><code>(alias) MpPathPen = MpKnot[]\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpResult/","title":"class MpResult","text":"<p>The return value of <code>execute</code> and <code>finish</code> is a table with a few possible keys (only <code>status</code> is always guaranteed to be present).</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L649-L690</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpResult/#fields","title":"fields","text":""},{"location":"types/MpResult/#mpresultlog","title":"MpResult.log","text":"<pre><code>MpResult.log : string?\n</code></pre> <p>The output to the \u201clog\u201d stream.</p>"},{"location":"types/MpResult/#mpresultterm","title":"MpResult.term","text":"<pre><code>MpResult.term : string?\n</code></pre> <p>The output to the \u201cterm\u201d stream.</p>"},{"location":"types/MpResult/#mpresulterror","title":"MpResult.error","text":"<pre><code>MpResult.error : string?\n</code></pre> <p>The output to the \u201cerror\u201d stream (only used for \u201cout of memory\u201d).</p>"},{"location":"types/MpResult/#mpresultstatus","title":"MpResult.status","text":"<pre><code>MpResult.status : MpResultStatus\n</code></pre> <p>The return value: <code>0</code> = good, <code>1</code> = warning, <code>2</code> = errors, <code>3</code> = fatal error.</p>"},{"location":"types/MpResult/#mpresultfig","title":"MpResult.fig","text":"<pre><code>MpResult.fig : MpFig[]?\n</code></pre> <p>An array of generated figures (if any).</p> <p>When <code>status</code> equals 3, you should stop using this MPlib instance immediately, it is no longer capable of processing input.</p> <p>If it is present, each of the entries in the <code>fig</code> array is a userdata representing a figure object, and each of those has a number of object methods you can call:</p>"},{"location":"types/MpResultStatus/","title":"alias MpResultStatus","text":"<pre><code>(alias) MpResultStatus = (0|1|2|3)\n    | 0 -- good\n    | 1 -- warning\n    | 2 -- errors\n    | 3 -- fatal error\n</code></pre>"},{"location":"types/MpRunScriptFunc/","title":"alias MpRunScriptFunc","text":"<pre><code>(alias) MpRunScriptFunc = fun(name: string) -&gt; string\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L408-L442</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpScriptErrorFunc/","title":"alias MpScriptErrorFunc","text":"<pre><code>(alias) MpScriptErrorFunc = fun(name: string)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lmplib.c#L381-L406C2</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpSpecial/","title":"class MpSpecial","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: psout.w#L5372-L5375</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpSpecial/#fields","title":"fields","text":""},{"location":"types/MpSpecial/#mpspecialprescript","title":"MpSpecial.prescript","text":"<pre><code>MpSpecial.prescript : string\n</code></pre> <p>special text</p>"},{"location":"types/MpStartBoundsClip/","title":"class MpStartBoundsClip","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: psout.w#L5362-L5370</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpStartBoundsClip/#fields","title":"fields","text":""},{"location":"types/MpStartBoundsClip/#mpstartboundsclippath","title":"MpStartBoundsClip.path","text":"<pre><code>MpStartBoundsClip.path : table\n</code></pre> <p>the list of knots</p>"},{"location":"types/MpStats/","title":"class MpStats","text":"<p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-graphics.tex#L460-L470</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpStats/#fields","title":"fields","text":""},{"location":"types/MpStats/#mpstatsmain_memory","title":"MpStats.main_memory","text":"<pre><code>MpStats.main_memory : integer\n</code></pre> <p>The memory size.</p>"},{"location":"types/MpStats/#mpstatshash_size","title":"MpStats.hash_size","text":"<pre><code>MpStats.hash_size : integer\n</code></pre> <p>The hash size.</p>"},{"location":"types/MpStats/#mpstatsparam_size","title":"MpStats.param_size","text":"<pre><code>MpStats.param_size : integer\n</code></pre> <p>The simultaneous macro parameters.</p>"},{"location":"types/MpStats/#mpstatsmax_in_open","title":"MpStats.max_in_open","text":"<pre><code>MpStats.max_in_open : integer\n</code></pre> <p>The input file nesting levels.</p>"},{"location":"types/MpText/","title":"class MpText","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: psout.w#L5312-L5333</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/MpText/#fields","title":"fields","text":""},{"location":"types/MpText/#mptexttext","title":"MpText.text","text":"<pre><code>MpText.text : string\n</code></pre> <p>the text</p>"},{"location":"types/MpText/#mptextfont","title":"MpText.font","text":"<pre><code>MpText.font : string\n</code></pre> <p>font tfm name</p>"},{"location":"types/MpText/#mptextdsize","title":"MpText.dsize","text":"<pre><code>MpText.dsize : integer\n</code></pre> <p>font size</p>"},{"location":"types/MpText/#mptextcolor","title":"MpText.color","text":"<pre><code>MpText.color : table\n</code></pre> <p>the object's color</p>"},{"location":"types/MpText/#mptextwidth","title":"MpText.width","text":"<pre><code>MpText.width : integer\n</code></pre>"},{"location":"types/MpText/#mptextheight","title":"MpText.height","text":"<pre><code>MpText.height : integer\n</code></pre>"},{"location":"types/MpText/#mptextdepth","title":"MpText.depth","text":"<pre><code>MpText.depth : integer\n</code></pre>"},{"location":"types/MpText/#mptexttransform","title":"MpText.transform","text":"<pre><code>MpText.transform : table\n</code></pre> <p>a text transformation</p>"},{"location":"types/MpText/#mptextprescript","title":"MpText.prescript","text":"<pre><code>MpText.prescript : string\n</code></pre> <p>the prescript text</p>"},{"location":"types/MpText/#mptextpostscript","title":"MpText.postscript","text":"<pre><code>MpText.postscript : string\n</code></pre> <p>the postscript text</p>"},{"location":"types/MuglueParameter/","title":"alias MuglueParameter","text":"<pre><code>(alias) MuglueParameter = (\"medmuskip\"|\"thickmuskip\"|\"thinmuskip\")\n    | \"medmuskip\" -- Medium amount of mu (math units) glue.\n    | \"thickmuskip\" -- Large amount of mu (math units) glue.\n    | \"thinmuskip\" -- Small amount of mu (math units) glue.\n</code></pre> <p>All muglue (math units) parameters are to be used read-only and return a Lua string.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L503-505</li> </ul>"},{"location":"types/Nest/","title":"class Nest","text":"<ul> <li>Corresponding C source code: ltexlib.c#L2325-L2361</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Nest/#fields","title":"fields","text":""},{"location":"types/Nest/#nestmode","title":"Nest.mode","text":"<pre><code>Nest.mode : number\n</code></pre> <p>the meaning of these numbers depends on the engine and sometimes even the version; you can use <code>tex.getmodevalues()</code> to get the mapping: positive values signal vertical, horizontal and math mode, while negative values indicate inner and inline variants (all modes).</p>"},{"location":"types/Nest/#nestmodeline","title":"Nest.modeline","text":"<pre><code>Nest.modeline : integer\n</code></pre> <p>source input line where this mode was entered in, negative inside the output routine (all modes).</p>"},{"location":"types/Nest/#nesthead","title":"Nest.head","text":"<pre><code>Nest.head : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>the head of the current list (all modes).</p>"},{"location":"types/Nest/#nesttail","title":"Nest.tail","text":"<pre><code>Nest.tail : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>the tail of the current list (all modes).</p>"},{"location":"types/Nest/#nestprevgraf","title":"Nest.prevgraf","text":"<pre><code>Nest.prevgraf : integer\n</code></pre> <p>number of lines in the previous paragraph (vertical mode).</p>"},{"location":"types/Nest/#nestprevdepth","title":"Nest.prevdepth","text":"<pre><code>Nest.prevdepth : integer\n</code></pre> <p>depth of the previous paragraph (vertical mode).</p>"},{"location":"types/Nest/#nestspacefactor","title":"Nest.spacefactor","text":"<pre><code>Nest.spacefactor : integer\n</code></pre> <p>the current space factor (horizontal mode).</p>"},{"location":"types/Nest/#nestdirs","title":"Nest.dirs","text":"<pre><code>Nest.dirs : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>used for temporary storage by the line break algorithm (horizontal mode).</p>"},{"location":"types/Nest/#nestnoad","title":"Nest.noad","text":"<pre><code>Nest.noad : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>used for temporary storage of a pending fraction numerator, for <code>over</code> etc. (math mode).</p>"},{"location":"types/Nest/#nestdelimptr","title":"Nest.delimptr","text":"<pre><code>Nest.delimptr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>used for temporary storage of the previous math delimiter, for <code>middle</code> (math mode).</p>"},{"location":"types/Nest/#nestmathdir","title":"Nest.mathdir","text":"<pre><code>Nest.mathdir : boolean\n</code></pre> <p>true when during math processing the <code>mathdir</code> is not the same as the surrounding <code>textdir</code> (math mode).</p>"},{"location":"types/Nest/#nestmathstyle","title":"Nest.mathstyle","text":"<pre><code>Nest.mathstyle : integer\n</code></pre> <p>mmode  the current <code>mathstyle</code></p>"},{"location":"types/NestedListNode/","title":"class NestedListNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"nested_list\", nil, {\n  id = \"nested_list (36)\",\n  fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\" },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L475</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/NoadNode/","title":"class NoadNode","text":"<ul> <li>supers: Node</li> </ul> <p>First, there are the objects (the TeX book calls them \u201catoms\u201d) that are associated with the simple math objects: <code>ord</code>, <code>op</code>, <code>bin</code>, <code>rel</code>, <code>open</code>, <code>close</code>, <code>punct</code>, <code>inner</code>, <code>over</code>, <code>under</code>, <code>vcent</code>. These all have the same fields, and they are combined into a single node type with separate subtypes for differentiation.</p> <p>Some noads have an option field. The values in this bitset are common:</p> meaning bits set <code>0x08</code> internal <code>0x00</code> + <code>0x08</code> internal <code>0x01</code> + <code>0x08</code> axis <code>0x02</code> + <code>0x08</code> no axis <code>0x04</code> + <code>0x08</code> exact <code>0x10</code> + <code>0x08</code> left <code>0x11</code> + <code>0x08</code> middle <code>0x12</code> + <code>0x08</code> right <code>0x14</code> + <code>0x08</code> no sub script <code>0x21</code> + <code>0x08</code> no super script <code>0x22</code> + <code>0x08</code> no script <code>0x23</code> + <code>0x08</code> <p>Example:</p> <pre><code>assert.node_type(\"noad\", nil, {\n  id = \"noad (18)\",\n  subtypes = {\n    \"ord (0)\",\n    \"opdisplaylimits (1)\",\n    \"oplimits (2)\",\n    \"opnolimits (3)\",\n    \"bin (4)\",\n    \"rel (5)\",\n    \"open (6)\",\n    \"close (7)\",\n    \"punct (8)\",\n    \"inner (9)\",\n    \"under (10)\",\n    \"over (11)\",\n    \"vcenter (12)\",\n  },\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"nucleus (4)\",\n    \"sub (5)\",\n    \"sup (6)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L892-L896</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/NoadNode/#fields","title":"fields","text":""},{"location":"types/NoadNode/#noadnodesubtype","title":"NoadNode.subtype","text":"<pre><code>NoadNode.subtype : NoadNodeSubtype\n</code></pre>"},{"location":"types/NoadNode/#noadnodeattr","title":"NoadNode.attr","text":"<pre><code>NoadNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/NoadNode/#noadnodenucleus","title":"NoadNode.nucleus","text":"<pre><code>NoadNode.nucleus : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>base</p>"},{"location":"types/NoadNode/#noadnodesub","title":"NoadNode.sub","text":"<pre><code>NoadNode.sub : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>subscript</p>"},{"location":"types/NoadNode/#noadnodesup","title":"NoadNode.sup","text":"<pre><code>NoadNode.sup : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>superscript</p>"},{"location":"types/NoadNode/#noadnodeoptions","title":"NoadNode.options","text":"<pre><code>NoadNode.options : integer\n</code></pre> <p>bitset of rendering options</p>"},{"location":"types/NoadNodeSubtype/","title":"alias NoadNodeSubtype","text":"<pre><code>(alias) NoadNodeSubtype = (0|1|2|3|4|5|6|7|8|9...)\n    | 0 -- ord\n    | 1 -- opdisplaylimits\n    | 2 -- oplimits\n    | 3 -- opnolimits\n    | 4 -- bin\n    | 5 -- rel\n    | 6 -- open\n    | 7 -- close\n    | 8 -- punct\n    | 9 -- inner\n    | 10 -- under\n    | 11 -- over\n    | 12 -- vcenter\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L672-L684</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Node/","title":"class Node","text":"<p>A node that comprise actual typesetting commands. A few fields are present in all nodes regardless of their type, these are:</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual:  luatex-nodes.tex#L49-L76</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Node/#fields","title":"fields","text":""},{"location":"types/Node/#nodenext","title":"Node.next","text":"<pre><code>Node.next : Node?\n</code></pre> <p>the next node in a list, or nil</p>"},{"location":"types/Node/#nodeprev","title":"Node.prev","text":"<pre><code>Node.prev : Node?\n</code></pre> <p>That prev field is always present, but only initialized on explicit request: when the function <code>node.slide()</code> is called, it will set up the <code>prev</code> fields to be a backwards pointer in the argument node list. By now most of TeX's node processing makes sure that the <code>prev</code> nodes are valid but there can be exceptions, especially when the internal magic uses a leading <code>temp</code> nodes to temporarily store a state.</p>"},{"location":"types/Node/#nodeid","title":"Node.id","text":"<pre><code>Node.id : integer\n</code></pre> <p>the node\u2019s type (id) number</p>"},{"location":"types/Node/#nodesubtype","title":"Node.subtype","text":"<pre><code>Node.subtype : integer\n</code></pre> <p>the node subtype identifier. The <code>subtype</code> is sometimes just a dummy entry because not all nodes actually use the <code>subtype</code>, but this way you can be sure that all nodes accept it as a valid field name, and that is often handy in node list traversal.</p>"},{"location":"types/Node/#nodehead","title":"Node.head","text":"<pre><code>Node.head : Node?\n</code></pre>"},{"location":"types/Node/#nodeattr","title":"Node.attr","text":"<pre><code>Node.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.. almost all nodes also have an <code>attr</code> field</p>"},{"location":"types/NodeCallbackReturn/","title":"alias NodeCallbackReturn","text":"<pre><code>(alias) NodeCallbackReturn = (true|false|Node)\n</code></pre> <p>As for all the callbacks that deal with nodes, the return value can be one of three things:</p> <p>Reference:</p> <ul> <li>boolean <code>true</code> signals successful processing</li> <li><code>&lt;node&gt;</code> signals that the \u201chead\u201d node should be replaced by the returned node</li> <li>boolean <code>false</code> signals that the \u201chead\u201d node list should be ignored and flushed from memory</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/NodeTypeId/","title":"alias NodeTypeId","text":"<pre><code>(alias) NodeTypeId = (0|1|2|3|4|5|6|7|8|9...)\n    | 0 -- hlist `hlist_node`\n    | 1 -- vlist `vlist_node`\n    | 2 -- rule `rule_node`\n    | 3 -- ins `ins_node`\n    | 4 -- mark `mark_node`\n    | 5 -- adjust `adjust_node`\n    | 6 -- boundary `boundary_node`\n    | 7 -- disc `disc_node`\n    | 8 -- whatsit `whatsit_node`\n    | 9 -- local_par `local_par_node`\n    | 10 -- dir `dir_node`\n    | 11 -- math `math_node`\n    | 12 -- glue `glue_node`\n    | 13 -- kern `kern_node`\n    | 14 -- penalty `penalty_node`\n    | 15 -- unset `unset_node`\n    | 16 -- style `style_node`\n    | 17 -- choice `choice_node`\n    | 18 -- noad `simple_noad`\n    | 19 -- radical `radical_noad`\n    | 20 -- fraction `fraction_noad`\n    | 21 -- accent `accent_noad`\n    | 22 -- fence `fence_noad`\n    | 23 -- math_char `math_char_node`\n    | 24 -- sub_box `sub_box_node`\n    | 25 -- sub_mlist `sub_mlist_node`\n    | 26 -- math_text_char `math_text_char_node`\n    | 27 -- delim `delim_node`\n    | 28 -- margin_kern `margin_kern_node`\n    | 29 -- glyph `glyph_node`\n    | 30 -- align_record `align_record_node`\n    | 31 -- pseudo_file `pseudo_file_node`\n    | 32 -- pseudo_line `pseudo_line_node`\n    | 33 -- page_insert `inserting_node`\n    | 34 -- split_insert `split_up_node`\n    | 35 -- expr_stack `expr_node`\n    | 36 -- nested_list `nesting_node`\n    | 37 -- span `span_node`\n    | 38 -- attribute `attribute_node`\n    | 39 -- glue_spec `glue_spec_node`\n    | 40 -- attribute_list `attribute_list_node`\n    | 41 -- temp `temp_node`\n    | 42 -- align_stack `align_stack_node`\n    | 43 -- movement_stack `movement_node`\n    | 44 -- if_stack `if_node`\n    | 45 -- unhyphenated `unhyphenated_node`\n    | 46 -- hyphenated `hyphenated_node`\n    | 47 -- delta `delta_node`\n    | 48 -- passive `passive_node`\n    | 49 -- shape `shape_node`\n</code></pre> <p>Example:</p> <pre><code>assert.same(node.types(), {\n  [0] = \"hlist\",\n  [1] = \"vlist\",\n  [2] = \"rule\",\n  [3] = \"ins\",\n  [4] = \"mark\",\n  [5] = \"adjust\",\n  [6] = \"boundary\",\n  [7] = \"disc\",\n  [8] = \"whatsit\",\n  [9] = \"local_par\",\n  [10] = \"dir\",\n  [11] = \"math\",\n  [12] = \"glue\",\n  [13] = \"kern\",\n  [14] = \"penalty\",\n  [15] = \"unset\",\n  [16] = \"style\",\n  [17] = \"choice\",\n  [18] = \"noad\",\n  [19] = \"radical\",\n  [20] = \"fraction\",\n  [21] = \"accent\",\n  [22] = \"fence\",\n  [23] = \"math_char\",\n  [24] = \"sub_box\",\n  [25] = \"sub_mlist\",\n  [26] = \"math_text_char\",\n  [27] = \"delim\",\n  [28] = \"margin_kern\",\n  [29] = \"glyph\",\n  [30] = \"align_record\",\n  [31] = \"pseudo_file\",\n  [32] = \"pseudo_line\",\n  [33] = \"page_insert\",\n  [34] = \"split_insert\",\n  [35] = \"expr_stack\",\n  [36] = \"nested_list\",\n  [37] = \"span\",\n  [38] = \"attribute\",\n  [39] = \"glue_spec\",\n  [40] = \"attribute_list\",\n  [41] = \"temp\",\n  [42] = \"align_stack\",\n  [43] = \"movement_stack\",\n  [44] = \"if_stack\",\n  [45] = \"unhyphenated\",\n  [46] = \"hyphenated\",\n  [47] = \"delta\",\n  [48] = \"passive\",\n  [49] = \"shape\",\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L493-L542</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/NodeTypeName/","title":"alias NodeTypeName","text":"<pre><code>(alias) NodeTypeName = (\"hlist\"|\"vlist\"|\"rule\"|\"ins\"|\"mark\"|\"adjust\"|\"boundary\"|\"disc\"|\"whatsit\"|\"local_par\"...)\n    | \"hlist\" -- 0 `hlist_node`\n    | \"vlist\" -- 1 `vlist_node`\n    | \"rule\" -- 2 `rule_node`\n    | \"ins\" -- 3 `ins_node`\n    | \"mark\" -- 4 `mark_node`\n    | \"adjust\" -- 5 `adjust_node`\n    | \"boundary\" -- 6 `boundary_node`\n    | \"disc\" -- 7 `disc_node`\n    | \"whatsit\" -- 8 `whatsit_node`\n    | \"local_par\" -- 9 `local_par_node`\n    | \"dir\" -- 10 `dir_node`\n    | \"math\" -- 11 `math_node`\n    | \"glue\" -- 12 `glue_node`\n    | \"kern\" -- 13 `kern_node`\n    | \"penalty\" -- 14 `penalty_node`\n    | \"unset\" -- 15 `unset_node`\n    | \"style\" -- 16 `style_node`\n    | \"choice\" -- 17 `choice_node`\n    | \"noad\" -- 18 `simple_noad`\n    | \"radical\" -- 19 `radical_noad`\n    | \"fraction\" -- 20 `fraction_noad`\n    | \"accent\" -- 21 `accent_noad`\n    | \"fence\" -- 22 `fence_noad`\n    | \"math_char\" -- 23 `math_char_node`\n    | \"sub_box\" -- 24 `sub_box_node`\n    | \"sub_mlist\" -- 25 `sub_mlist_node`\n    | \"math_text_char\" -- 26 `math_text_char_node`\n    | \"delim\" -- 27 `delim_node`\n    | \"margin_kern\" -- 28 `margin_kern_node`\n    | \"glyph\" -- 29 `glyph_node`\n    | \"align_record\" -- 30 `align_record_node`\n    | \"pseudo_file\" -- 31 `pseudo_file_node`\n    | \"pseudo_line\" -- 32 `pseudo_line_node`\n    | \"page_insert\" -- 33 `inserting_node`\n    | \"split_insert\" -- 34 `split_up_node`\n    | \"expr_stack\" -- 35 `expr_node`\n    | \"nested_list\" -- 36 `nesting_node`\n    | \"span\" -- 37 `span_node`\n    | \"attribute\" -- 38 `attribute_node`\n    | \"glue_spec\" -- 39 `glue_spec_node`\n    | \"attribute_list\" -- 40 `attribute_list_node`\n    | \"temp\" -- 41 `temp_node`\n    | \"align_stack\" -- 42 `align_stack_node`\n    | \"movement_stack\" -- 43 `movement_node`\n    | \"if_stack\" -- 44 `if_node`\n    | \"unhyphenated\" -- 45 `unhyphenated_node`\n    | \"hyphenated\" -- 46 `hyphenated_node`\n    | \"delta\" -- 47 `delta_node`\n    | \"passive\" -- 48 `passive_node`\n    | \"shape\" -- 49 `shape_node`\n</code></pre> <p>Example:</p> <pre><code>assert.same(node.types(), {\n  [0] = \"hlist\",\n  [1] = \"vlist\",\n  [2] = \"rule\",\n  [3] = \"ins\",\n  [4] = \"mark\",\n  [5] = \"adjust\",\n  [6] = \"boundary\",\n  [7] = \"disc\",\n  [8] = \"whatsit\",\n  [9] = \"local_par\",\n  [10] = \"dir\",\n  [11] = \"math\",\n  [12] = \"glue\",\n  [13] = \"kern\",\n  [14] = \"penalty\",\n  [15] = \"unset\",\n  [16] = \"style\",\n  [17] = \"choice\",\n  [18] = \"noad\",\n  [19] = \"radical\",\n  [20] = \"fraction\",\n  [21] = \"accent\",\n  [22] = \"fence\",\n  [23] = \"math_char\",\n  [24] = \"sub_box\",\n  [25] = \"sub_mlist\",\n  [26] = \"math_text_char\",\n  [27] = \"delim\",\n  [28] = \"margin_kern\",\n  [29] = \"glyph\",\n  [30] = \"align_record\",\n  [31] = \"pseudo_file\",\n  [32] = \"pseudo_line\",\n  [33] = \"page_insert\",\n  [34] = \"split_insert\",\n  [35] = \"expr_stack\",\n  [36] = \"nested_list\",\n  [37] = \"span\",\n  [38] = \"attribute\",\n  [39] = \"glue_spec\",\n  [40] = \"attribute_list\",\n  [41] = \"temp\",\n  [42] = \"align_stack\",\n  [43] = \"movement_stack\",\n  [44] = \"if_stack\",\n  [45] = \"unhyphenated\",\n  [46] = \"hyphenated\",\n  [47] = \"delta\",\n  [48] = \"passive\",\n  [49] = \"shape\",\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L493-L542</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/OpenReadFileCallback/","title":"alias OpenReadFileCallback","text":"<pre><code>(alias) OpenReadFileCallback = fun(file_name: string) -&gt; OpenReadFileEnv\n</code></pre> <p>Open a file for reading. The returned table should define key functions for  <code>reader</code> and <code>close</code>.</p> <p>The filename returned by a previous <code>find_read_file</code> or the return value of <code>kpse.find_file()</code> if there was no such callback defined.</p>"},{"location":"types/OpenReadFileEnv/","title":"class OpenReadFileEnv","text":"<p>LuaTeX never looks at the rest of the table, so you can use it to store your private per-file data. Both the callback functions will receive the table as their only argument.</p>"},{"location":"types/OpenReadFileEnv/#methods","title":"methods","text":""},{"location":"types/OpenReadFileEnv/#openreadfileenvreader","title":"OpenReadFileEnv.reader","text":"<pre><code>function OpenReadFileEnv.reader(env: OpenReadFileEnv {\n    reader = function,\n    close = function,\n}) -&gt; line string?\n</code></pre> <p>Read a line from a file opened with the <code>open_read_file</code> callback. The argument is the return value from <code>open_read_file</code></p> <p>LuaTeX will run this function whenever it needs a new input line from the file.</p> <p>Your function should return either a string or <code>nil</code>. The value <code>nil</code> signals that the end of file has occurred, and will make TeX call the optional</p>"},{"location":"types/OpenReadFileEnv/#openreadfileenvclose","title":"OpenReadFileEnv.close","text":"<pre><code>function OpenReadFileEnv.close(env: OpenReadFileEnv {\n    reader = function,\n    close = function,\n})\n</code></pre> <p>Close a file opened with the <code>open_read_file</code> callback. The argument is the return value from the <code>open_read_file</code>.</p> <p>LuaTeX will run this optional function when it decides to close the file.</p>"},{"location":"types/OpenWhatsitNode/","title":"class OpenWhatsitNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"open\", {\n  id = \"whatsit (8)\",\n  subtype = \"open (0)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"stream (4)\",\n    \"name (5)\",\n    \"area (6)\",\n    \"ext (7)\",\n  },\n})\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/OpenWhatsitNode/#fields","title":"fields","text":""},{"location":"types/OpenWhatsitNode/#openwhatsitnodeattr","title":"OpenWhatsitNode.attr","text":"<pre><code>OpenWhatsitNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/OpenWhatsitNode/#openwhatsitnodestream","title":"OpenWhatsitNode.stream","text":"<pre><code>OpenWhatsitNode.stream : integer\n</code></pre> <p>TeX's stream id number</p>"},{"location":"types/OpenWhatsitNode/#openwhatsitnodename","title":"OpenWhatsitNode.name","text":"<pre><code>OpenWhatsitNode.name : string\n</code></pre> <p>file name</p>"},{"location":"types/OpenWhatsitNode/#openwhatsitnodeext","title":"OpenWhatsitNode.ext","text":"<pre><code>OpenWhatsitNode.ext : string\n</code></pre> <p>file extension</p>"},{"location":"types/OpenWhatsitNode/#openwhatsitnodearea","title":"OpenWhatsitNode.area","text":"<pre><code>OpenWhatsitNode.area : string\n</code></pre> <p>file area (this may become obsolete)</p>"},{"location":"types/Operatorable/","title":"alias Operatorable","text":"<pre><code>(alias) Operatorable = table&lt;string,fun(scanner: Scanner, info: table)&gt;\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PageInsertNode/","title":"class PageInsertNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"page_insert\", nil, {\n  id = \"page_insert (33)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"height (3)\",\n    \"last_ins_ptr (4)\",\n    \"best_ins_ptr (5)\",\n    \"width (6)\",\n    \"stretch (7)\",\n    \"shrink (8)\",\n    \"stretch_order (9)\",\n    \"shrink_order (10)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L826-L834</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PageOrderIndexCallback/","title":"alias PageOrderIndexCallback","text":"<pre><code>(alias) PageOrderIndexCallback = fun(pagenumber: integer) -&gt; string\n</code></pre> <p>This is one that experts can use to juggle the page tree, a data structure that determines the order in a PDF file:</p> <p>Say that we have 12 pages, then we can do this:</p> <pre><code>callback.register(\"page_order_index\",function(page)\n        if page ==  1 then return 12\n    elseif page ==  2 then return 11\n    elseif page == 11 then return  2\n    elseif page == 12 then return  1\n    else                   return page\n    end\nend)\n</code></pre> <p>This will swap the first two and last two pages. You need to know the number of pages which is a side effect of the implementation. When you mess things up \\unknown\\ don't complain.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: pdfgen.c#L1793</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PassiveNode/","title":"class PassiveNode","text":"<ul> <li>supers: Node</li> </ul> <p>Used in the line breaking algorithm.</p> <p>Example:</p> <pre><code>assert.node_type(\"passive\", nil, {\n  id = \"passive (48)\",\n  fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\" },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L487</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Pattern/","title":"class Pattern","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Pattern/#methods","title":"methods","text":""},{"location":"types/Pattern/#patternmatch","title":"Pattern.match","text":"<pre><code>function Pattern.match(\n  subject: string,\n  init: integer?,\n  ...: any\n) -&gt;  any ...\n</code></pre> <p>Match the given <code>pattern</code> against the <code>subject</code> string.</p> <p>If the match succeeds, returns the index in the subject of the first character after the match, or the captured values (if the pattern captured any value).</p> <p>An optional numeric argument <code>init</code> makes the match start at that position in the subject string. As usual in Lua libraries, a negative value counts from the end.</p> <p>Unlike typical pattern-matching functions, <code>match</code> works only in anchored mode; that is, it tries to match the pattern with a prefix of the given subject string (at position <code>init</code>), not with an arbitrary substring of the subject. So, if we want to find a pattern anywhere in a string, we must either write a loop in Lua or write a pattern that matches anywhere. This second approach is easy and quite efficient;</p> <p>Example:</p> <pre><code>local pattern = lpeg.R('az') ^ 1 * -1\nassert(pattern:match('hello') == 6)\nassert(lpeg.match(pattern, 'hello') == 6)\nassert(pattern:match('1 hello') == nil)\n</code></pre>"},{"location":"types/PdfActionTypes/","title":"alias PdfActionTypes","text":"<pre><code>(alias) PdfActionTypes = (0|1|2|3)\n    | 0 -- 'page'\n    | 1 -- 'goto'\n    | 2 -- 'thread'\n    | 3 -- 'user'\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L1090-L1093</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfActionWhatsitNode/","title":"class PdfActionWhatsitNode","text":"<ul> <li>supers: WhatsitNode</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"pdf_action\", {\n  id = \"whatsit (8)\",\n  subtype = \"pdf_action (23)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"action_type (3)\",\n    \"named_id (4)\",\n    \"action_id (5)\",\n    \"file (6)\",\n    \"new_window (7)\",\n    \"data (8)\",\n    \"struct_id (9)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L1104-L1111</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfActionWhatsitNode/#fields","title":"fields","text":""},{"location":"types/PdfActionWhatsitNode/#pdfactionwhatsitnodeaction_type","title":"PdfActionWhatsitNode.action_type","text":"<pre><code>PdfActionWhatsitNode.action_type : PdfActionTypes\n</code></pre> <p>the kind of action involved</p>"},{"location":"types/PdfActionWhatsitNode/#pdfactionwhatsitnodenamed_id","title":"PdfActionWhatsitNode.named_id","text":"<pre><code>PdfActionWhatsitNode.named_id : integer\n</code></pre> <p>are <code>dest_id</code> and <code>struct_id</code> string values?</p>"},{"location":"types/PdfActionWhatsitNode/#pdfactionwhatsitnodeaction_id","title":"PdfActionWhatsitNode.action_id","text":"<pre><code>PdfActionWhatsitNode.action_id : (integer|string)\n</code></pre> <p>token list reference or string</p>"},{"location":"types/PdfActionWhatsitNode/#pdfactionwhatsitnodefile","title":"PdfActionWhatsitNode.file","text":"<pre><code>PdfActionWhatsitNode.file : string\n</code></pre> <p>the target filename</p>"},{"location":"types/PdfActionWhatsitNode/#pdfactionwhatsitnodenew_window","title":"PdfActionWhatsitNode.new_window","text":"<pre><code>PdfActionWhatsitNode.new_window : PdfWindowTypes\n</code></pre> <p>the window state of the target</p>"},{"location":"types/PdfActionWhatsitNode/#pdfactionwhatsitnodestruct_id","title":"PdfActionWhatsitNode.struct_id","text":"<pre><code>PdfActionWhatsitNode.struct_id : (integer|string)?\n</code></pre> <p><code>nil</code>: the action does not reference a structure; <code>integer</code>: id of the referenced structure; <code>string</code>: name of the referenced structure destination</p>"},{"location":"types/PdfActionWhatsitNode/#pdfactionwhatsitnodedata","title":"PdfActionWhatsitNode.data","text":"<pre><code>PdfActionWhatsitNode.data : string\n</code></pre> <p>the name of the destination</p>"},{"location":"types/PdfAnnotWhatsitNode/","title":"class PdfAnnotWhatsitNode","text":"<ul> <li>supers: WhatsitNode</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"pdf_annot\", {\n  id = \"whatsit (8)\",\n  subtype = \"pdf_annot (19)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"width (4)\",\n    \"depth (5)\",\n    \"height (6)\",\n    \"objnum (7)\",\n    \"data (8)\",\n  },\n})\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfAnnotWhatsitNode/#fields","title":"fields","text":""},{"location":"types/PdfAnnotWhatsitNode/#pdfannotwhatsitnodeattr","title":"PdfAnnotWhatsitNode.attr","text":"<pre><code>PdfAnnotWhatsitNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/PdfAnnotWhatsitNode/#pdfannotwhatsitnodewidth","title":"PdfAnnotWhatsitNode.width","text":"<pre><code>PdfAnnotWhatsitNode.width : integer\n</code></pre> <p>the width (not used in calculations)</p>"},{"location":"types/PdfAnnotWhatsitNode/#pdfannotwhatsitnodeheight","title":"PdfAnnotWhatsitNode.height","text":"<pre><code>PdfAnnotWhatsitNode.height : integer\n</code></pre> <p>the height (not used in calculations)</p>"},{"location":"types/PdfAnnotWhatsitNode/#pdfannotwhatsitnodedepth","title":"PdfAnnotWhatsitNode.depth","text":"<pre><code>PdfAnnotWhatsitNode.depth : integer\n</code></pre> <p>the depth (not used in calculations)</p>"},{"location":"types/PdfAnnotWhatsitNode/#pdfannotwhatsitnodeobjnum","title":"PdfAnnotWhatsitNode.objnum","text":"<pre><code>PdfAnnotWhatsitNode.objnum : integer\n</code></pre> <p>the referenced PDF object number</p>"},{"location":"types/PdfAnnotWhatsitNode/#pdfannotwhatsitnodedata","title":"PdfAnnotWhatsitNode.data","text":"<pre><code>PdfAnnotWhatsitNode.data : string\n</code></pre> <p>the annotation data</p>"},{"location":"types/PdfColorstackWhatsitNode/","title":"class PdfColorstackWhatsitNode","text":"<ul> <li>supers: WhatsitNode</li> </ul> <p>From the pdfTeX manual:</p> <p><code>\\pdfcolorstack \u27e8stack number\u27e9 \u27e8stack action\u27e9 \u27e8general text\u27e9</code></p> <p>The command operates on the stack of a given number. If \u27e8stack action\u27e9 is <code>push</code> keyword, the new value provided as \u27e8general text\u27e9 is inserted into the top of the graphic stack and becomes the current stack value. If followed by <code>pop</code>, the top value is removed from the stack and the new top value becomes the current. <code>set</code> keyword replaces the current value with \u27e8general text\u27e9 without changing the stack size. <code>current</code> keyword instructs just to use the current stack value without modifying the stack at all.</p> <p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"pdf_colorstack\", {\n  id = \"whatsit (8)\",\n  subtype = \"pdf_colorstack (29)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"stack (4)\",\n    \"cmd (5)\",\n    \"data (6)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: pdftex-t.tex#L3954-L3980 Source: luatex-nodes.tex#L1097-L1107</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfColorstackWhatsitNode/#fields","title":"fields","text":""},{"location":"types/PdfColorstackWhatsitNode/#pdfcolorstackwhatsitnodestack","title":"PdfColorstackWhatsitNode.stack","text":"<pre><code>PdfColorstackWhatsitNode.stack : integer\n</code></pre> <p>The colorstack id number.</p>"},{"location":"types/PdfColorstackWhatsitNode/#pdfcolorstackwhatsitnodecommand","title":"PdfColorstackWhatsitNode.command","text":"<pre><code>PdfColorstackWhatsitNode.command : integer\n</code></pre> <p>The command to execute. \u27e8stack action\u27e9 \u2192 set (0) | push (1) | pop (2) | current (3) texnodes.c#L3523-L3545</p>"},{"location":"types/PdfColorstackWhatsitNode/#pdfcolorstackwhatsitnodedata","title":"PdfColorstackWhatsitNode.data","text":"<pre><code>PdfColorstackWhatsitNode.data : string\n</code></pre> <p>General text that is placed on top of the stack, for example <code>1 0 0 rg 1 0 0 RG</code>. <code>rg</code> only colors filled outlines while the stroke color is set with <code>RG</code>. From the PDF Reference, fourth edition, 4.5.7 Color Operators Page 251: <code>gray G</code>: Set the stroking color space to DeviceGray. <code>gray</code> is a number between 0.0 (black) and 1.0 (white). <code>gray g</code>: Same as <code>G</code>, but for nonstroking operations. <code>r g b RG</code>: Set the stroking color space to DeviceRGB. Each operand must be a number between 0.0 (minimum intensity) and 1.0 (maximum intensity). <code>r g b rg</code>: same as <code>RG</code>, but for nonstroking operations. <code>c m y k K</code>: Set the stroking color space to DeviceCMYK. Each operand must be a number between 0.0 (zero concentration) and 1.0 (maximum concentration). <code>c m y k k</code>: Same as <code>K</code>, but for nonstroking operations.</p>"},{"location":"types/PdfDestWhatsitNode/","title":"class PdfDestWhatsitNode","text":"<ul> <li>supers: WhatsitNode</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"pdf_dest\", {\n  id = \"whatsit (8)\",\n  subtype = \"pdf_dest (22)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"width (4)\",\n    \"depth (5)\",\n    \"height (6)\",\n    \"named_id (7)\",\n    \"dest_id (8)\",\n    \"dest_type (9)\",\n    \"xyz_zoom (10)\",\n    \"objnum (11)\",\n  },\n})\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfDestWhatsitNode/#fields","title":"fields","text":""},{"location":"types/PdfDestWhatsitNode/#pdfdestwhatsitnodeattr","title":"PdfDestWhatsitNode.attr","text":"<pre><code>PdfDestWhatsitNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/PdfDestWhatsitNode/#pdfdestwhatsitnodewidth","title":"PdfDestWhatsitNode.width","text":"<pre><code>PdfDestWhatsitNode.width : integer\n</code></pre> <p>the width (not used in calculations)</p>"},{"location":"types/PdfDestWhatsitNode/#pdfdestwhatsitnodeheight","title":"PdfDestWhatsitNode.height","text":"<pre><code>PdfDestWhatsitNode.height : integer\n</code></pre> <p>the height (not used in calculations)</p>"},{"location":"types/PdfDestWhatsitNode/#pdfdestwhatsitnodedepth","title":"PdfDestWhatsitNode.depth","text":"<pre><code>PdfDestWhatsitNode.depth : integer\n</code></pre> <p>the depth (not used in calculations)</p>"},{"location":"types/PdfDestWhatsitNode/#pdfdestwhatsitnodenamed_id","title":"PdfDestWhatsitNode.named_id","text":"<pre><code>PdfDestWhatsitNode.named_id : integer\n</code></pre> <p>is the <code>dest_id</code> a string value?</p>"},{"location":"types/PdfDestWhatsitNode/#pdfdestwhatsitnodedest_id","title":"PdfDestWhatsitNode.dest_id","text":"<pre><code>PdfDestWhatsitNode.dest_id : (integer|string)\n</code></pre> <p><code>integer</code>: the destination id <code>string</code>: the destination name</p>"},{"location":"types/PdfDestWhatsitNode/#pdfdestwhatsitnodedest_type","title":"PdfDestWhatsitNode.dest_type","text":"<pre><code>PdfDestWhatsitNode.dest_type : integer\n</code></pre> <p>type of destination</p>"},{"location":"types/PdfDestWhatsitNode/#pdfdestwhatsitnodexyz_zoom","title":"PdfDestWhatsitNode.xyz_zoom","text":"<pre><code>PdfDestWhatsitNode.xyz_zoom : integer\n</code></pre> <p>the zoom factor (times 1000)</p>"},{"location":"types/PdfDestWhatsitNode/#pdfdestwhatsitnodeobjnum","title":"PdfDestWhatsitNode.objnum","text":"<pre><code>PdfDestWhatsitNode.objnum : integer\n</code></pre> <p>the PDF object number; for structure references the PDF object number of the linked structure element</p>"},{"location":"types/PdfEndLinkWhatsitNode/","title":"class PdfEndLinkWhatsitNode","text":"<ul> <li>supers: WhatsitNode</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"pdf_end_link\", {\n  id = \"whatsit (8)\",\n  subtype = \"pdf_end_link (21)\",\n  fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\", \"attr (3)\" },\n})\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfEndLinkWhatsitNode/#fields","title":"fields","text":""},{"location":"types/PdfEndLinkWhatsitNode/#pdfendlinkwhatsitnodeattr","title":"PdfEndLinkWhatsitNode.attr","text":"<pre><code>PdfEndLinkWhatsitNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/PdfEndThreadWhatsitNode/","title":"class PdfEndThreadWhatsitNode","text":"<p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"pdf_end_thread\", {\n  id = \"whatsit (8)\",\n  subtype = \"pdf_end_thread (26)\",\n  fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\", \"attr (3)\" },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L1145-L1146</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfEndThreadWhatsitNode/#fields","title":"fields","text":""},{"location":"types/PdfEndThreadWhatsitNode/#pdfendthreadwhatsitnodeattr","title":"PdfEndThreadWhatsitNode.attr","text":"<pre><code>PdfEndThreadWhatsitNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/PdfLinkDataWhatsitNode/","title":"class PdfLinkDataWhatsitNode","text":"<p>Example:</p> <pre><code>assert.node_type(\n  \"whatsit\",\n  \"pdf_link_data\",\n  {\n    id = \"whatsit (8)\",\n    subtype = \"pdf_link_data (28)\",\n    fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\" },\n  }\n)\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/4f2b914d365bab8a2747afe6e8c86d0f1c8475f7/source/texk/web2c/luatexdir/tex/texnodes.c#L1066</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfLinkStateWhatsitNode/","title":"class PdfLinkStateWhatsitNode","text":"<p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"pdf_link_state\", {\n  id = \"whatsit (8)\",\n  subtype = \"pdf_link_state (33)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"value (4)\",\n  },\n})\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/4f2b914d365bab8a2747afe6e8c86d0f1c8475f7/source/texk/web2c/luatexdir/tex/texnodes.c#L1141-1143</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfLinkStateWhatsitNode/#fields","title":"fields","text":""},{"location":"types/PdfLinkStateWhatsitNode/#pdflinkstatewhatsitnodeattr","title":"PdfLinkStateWhatsitNode.attr","text":"<pre><code>PdfLinkStateWhatsitNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/PdfLinkStateWhatsitNode/#pdflinkstatewhatsitnodevalue","title":"PdfLinkStateWhatsitNode.value","text":"<pre><code>PdfLinkStateWhatsitNode.value : integer\n</code></pre>"},{"location":"types/PdfLiteralModes/","title":"alias PdfLiteralModes","text":"<pre><code>(alias) PdfLiteralModes = (0|1|2|3|4|5|6)\n    | 0 -- `origin`\n    | 1 -- `page`\n    | 2 -- `direct`\n    | 3 -- `raw`\n    | 4 -- `text`\n    | 5 -- `font`\n    | 6 -- `special`\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L1082-L1088</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfLiteralWhatsitNode/","title":"class PdfLiteralWhatsitNode","text":"<ul> <li>supers: WhatsitNode</li> </ul> <p>The higher the number, the less checking and the more you can run into trouble. Especially the <code>raw</code> variant can produce bad PDF so you can best check what you generate.</p> <p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"pdf_literal\", {\n  id = \"whatsit (8)\",\n  subtype = \"pdf_literal (16)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"mode (4)\",\n    \"data (5)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L1148-L1151</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfLiteralWhatsitNode/#fields","title":"fields","text":""},{"location":"types/PdfLiteralWhatsitNode/#pdfliteralwhatsitnodeattr","title":"PdfLiteralWhatsitNode.attr","text":"<pre><code>PdfLiteralWhatsitNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/PdfLiteralWhatsitNode/#pdfliteralwhatsitnodemode","title":"PdfLiteralWhatsitNode.mode","text":"<pre><code>PdfLiteralWhatsitNode.mode : PdfLiteralModes\n</code></pre> <p>the \u201cmode\u201d setting of this literal</p>"},{"location":"types/PdfLiteralWhatsitNode/#pdfliteralwhatsitnodedata","title":"PdfLiteralWhatsitNode.data","text":"<pre><code>PdfLiteralWhatsitNode.data : string\n</code></pre> <p>the to be written information stored as Lua string</p>"},{"location":"types/PdfLiteralWhatsitNode/#pdfliteralwhatsitnodetoken","title":"PdfLiteralWhatsitNode.token","text":"<pre><code>PdfLiteralWhatsitNode.token : string\n</code></pre> <p>the to be written information stored as token list</p>"},{"location":"types/PdfRefobjWhatsitNode/","title":"class PdfRefobjWhatsitNode","text":"<ul> <li>supers: WhatsitNode</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"pdf_refobj\", {\n  id = \"whatsit (8)\",\n  subtype = \"pdf_refobj (18)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"objnum (4)\",\n  },\n})\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfRefobjWhatsitNode/#fields","title":"fields","text":""},{"location":"types/PdfRefobjWhatsitNode/#pdfrefobjwhatsitnodeattr","title":"PdfRefobjWhatsitNode.attr","text":"<pre><code>PdfRefobjWhatsitNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/PdfRefobjWhatsitNode/#pdfrefobjwhatsitnodeobjnum","title":"PdfRefobjWhatsitNode.objnum","text":"<pre><code>PdfRefobjWhatsitNode.objnum : integer\n</code></pre> <p>the referenced PDF object number</p>"},{"location":"types/PdfRestoreWhatsitNode/","title":"class PdfRestoreWhatsitNode","text":"<p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"pdf_restore\", {\n  id = \"whatsit (8)\",\n  subtype = \"pdf_restore (32)\",\n  fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\", \"attr (3)\" },\n})\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfRestoreWhatsitNode/#fields","title":"fields","text":""},{"location":"types/PdfRestoreWhatsitNode/#pdfrestorewhatsitnodeattr","title":"PdfRestoreWhatsitNode.attr","text":"<pre><code>PdfRestoreWhatsitNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/PdfSaveWhatsitNode/","title":"class PdfSaveWhatsitNode","text":"<p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"pdf_save\", {\n  id = \"whatsit (8)\",\n  subtype = \"pdf_save (31)\",\n  fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\", \"attr (3)\" },\n})\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfSaveWhatsitNode/#fields","title":"fields","text":""},{"location":"types/PdfSaveWhatsitNode/#pdfsavewhatsitnodeattr","title":"PdfSaveWhatsitNode.attr","text":"<pre><code>PdfSaveWhatsitNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/PdfSetmatrixWhatsitNode/","title":"class PdfSetmatrixWhatsitNode","text":"<p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"pdf_setmatrix\", {\n  id = \"whatsit (8)\",\n  subtype = \"pdf_setmatrix (30)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"data (4)\",\n  },\n})\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfSetmatrixWhatsitNode/#fields","title":"fields","text":""},{"location":"types/PdfSetmatrixWhatsitNode/#pdfsetmatrixwhatsitnodeattr","title":"PdfSetmatrixWhatsitNode.attr","text":"<pre><code>PdfSetmatrixWhatsitNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/PdfSetmatrixWhatsitNode/#pdfsetmatrixwhatsitnodedata","title":"PdfSetmatrixWhatsitNode.data","text":"<pre><code>PdfSetmatrixWhatsitNode.data : string\n</code></pre> <p>data</p>"},{"location":"types/PdfStartLinkWhatsitNode/","title":"class PdfStartLinkWhatsitNode","text":"<ul> <li>supers: WhatsitNode</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"pdf_start_link\", {\n  id = \"whatsit (8)\",\n  subtype = \"pdf_start_link (20)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"width (4)\",\n    \"depth (5)\",\n    \"height (6)\",\n    \"objnum (7)\",\n    \"link_attr (8)\",\n    \"action (9)\",\n  },\n})\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfStartLinkWhatsitNode/#fields","title":"fields","text":""},{"location":"types/PdfStartLinkWhatsitNode/#pdfstartlinkwhatsitnodeattr","title":"PdfStartLinkWhatsitNode.attr","text":"<pre><code>PdfStartLinkWhatsitNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/PdfStartLinkWhatsitNode/#pdfstartlinkwhatsitnodewidth","title":"PdfStartLinkWhatsitNode.width","text":"<pre><code>PdfStartLinkWhatsitNode.width : integer\n</code></pre> <p>the width (not used in calculations)</p>"},{"location":"types/PdfStartLinkWhatsitNode/#pdfstartlinkwhatsitnodeheight","title":"PdfStartLinkWhatsitNode.height","text":"<pre><code>PdfStartLinkWhatsitNode.height : integer\n</code></pre> <p>the height (not used in calculations)</p>"},{"location":"types/PdfStartLinkWhatsitNode/#pdfstartlinkwhatsitnodedepth","title":"PdfStartLinkWhatsitNode.depth","text":"<pre><code>PdfStartLinkWhatsitNode.depth : integer\n</code></pre> <p>the depth (not used in calculations)</p>"},{"location":"types/PdfStartLinkWhatsitNode/#pdfstartlinkwhatsitnodeobjnum","title":"PdfStartLinkWhatsitNode.objnum","text":"<pre><code>PdfStartLinkWhatsitNode.objnum : integer\n</code></pre> <p>the referenced PDF object number</p>"},{"location":"types/PdfStartLinkWhatsitNode/#pdfstartlinkwhatsitnodelink_attr","title":"PdfStartLinkWhatsitNode.link_attr","text":"<pre><code>PdfStartLinkWhatsitNode.link_attr : table\n</code></pre> <p>the link attribute token list</p>"},{"location":"types/PdfStartLinkWhatsitNode/#pdfstartlinkwhatsitnodeaction","title":"PdfStartLinkWhatsitNode.action","text":"<pre><code>PdfStartLinkWhatsitNode.action : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>the action to perform</p>"},{"location":"types/PdfStartThreadWhatsitNode/","title":"class PdfStartThreadWhatsitNode","text":"<p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"pdf_start_thread\", {\n  id = \"whatsit (8)\",\n  subtype = \"pdf_start_thread (25)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"width (4)\",\n    \"depth (5)\",\n    \"height (6)\",\n    \"named_id (7)\",\n    \"thread_id (8)\",\n    \"thread_attr (9)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L1176-L1183</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfStartThreadWhatsitNode/#fields","title":"fields","text":""},{"location":"types/PdfStartThreadWhatsitNode/#pdfstartthreadwhatsitnodeattr","title":"PdfStartThreadWhatsitNode.attr","text":"<pre><code>PdfStartThreadWhatsitNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/PdfStartThreadWhatsitNode/#pdfstartthreadwhatsitnodewidth","title":"PdfStartThreadWhatsitNode.width","text":"<pre><code>PdfStartThreadWhatsitNode.width : integer\n</code></pre> <p>the width (not used in calculations)</p>"},{"location":"types/PdfStartThreadWhatsitNode/#pdfstartthreadwhatsitnodeheight","title":"PdfStartThreadWhatsitNode.height","text":"<pre><code>PdfStartThreadWhatsitNode.height : integer\n</code></pre> <p>the height (not used in calculations)</p>"},{"location":"types/PdfStartThreadWhatsitNode/#pdfstartthreadwhatsitnodedepth","title":"PdfStartThreadWhatsitNode.depth","text":"<pre><code>PdfStartThreadWhatsitNode.depth : integer\n</code></pre> <p>the depth (not used in calculations)</p>"},{"location":"types/PdfStartThreadWhatsitNode/#pdfstartthreadwhatsitnodenamed_id","title":"PdfStartThreadWhatsitNode.named_id","text":"<pre><code>PdfStartThreadWhatsitNode.named_id : integer\n</code></pre> <p>is <code>tread_id</code> a string value?</p>"},{"location":"types/PdfStartThreadWhatsitNode/#pdfstartthreadwhatsitnodetread_id","title":"PdfStartThreadWhatsitNode.tread_id","text":"<pre><code>PdfStartThreadWhatsitNode.tread_id : integer\n</code></pre> <p>the thread id  string  the thread name</p>"},{"location":"types/PdfStartThreadWhatsitNode/#pdfstartthreadwhatsitnodethread_attr","title":"PdfStartThreadWhatsitNode.thread_attr","text":"<pre><code>PdfStartThreadWhatsitNode.thread_attr : integer\n</code></pre> <p>extra thread information</p>"},{"location":"types/PdfThreadDataWhatsitNode/","title":"class PdfThreadDataWhatsitNode","text":"<p>Example:</p> <pre><code>assert.node_type(\n  \"whatsit\",\n  \"pdf_thread_data\",\n  {\n    id = \"whatsit (8)\",\n    subtype = \"pdf_thread_data (27)\",\n    fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\" },\n  }\n)\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/4f2b914d365bab8a2747afe6e8c86d0f1c8475f7/source/texk/web2c/luatexdir/tex/texnodes.c#L1065</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfThreadWhatsitNode/","title":"class PdfThreadWhatsitNode","text":"<p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"pdf_thread\", {\n  id = \"whatsit (8)\",\n  subtype = \"pdf_thread (24)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"width (4)\",\n    \"depth (5)\",\n    \"height (6)\",\n    \"named_id (7)\",\n    \"thread_id (8)\",\n    \"thread_attr (9)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L1185-L1192</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfThreadWhatsitNode/#fields","title":"fields","text":""},{"location":"types/PdfThreadWhatsitNode/#pdfthreadwhatsitnodeattr","title":"PdfThreadWhatsitNode.attr","text":"<pre><code>PdfThreadWhatsitNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/PdfThreadWhatsitNode/#pdfthreadwhatsitnodewidth","title":"PdfThreadWhatsitNode.width","text":"<pre><code>PdfThreadWhatsitNode.width : integer\n</code></pre> <p>the width (not used in calculations)</p>"},{"location":"types/PdfThreadWhatsitNode/#pdfthreadwhatsitnodeheight","title":"PdfThreadWhatsitNode.height","text":"<pre><code>PdfThreadWhatsitNode.height : integer\n</code></pre> <p>the height (not used in calculations)</p>"},{"location":"types/PdfThreadWhatsitNode/#pdfthreadwhatsitnodedepth","title":"PdfThreadWhatsitNode.depth","text":"<pre><code>PdfThreadWhatsitNode.depth : integer\n</code></pre> <p>the depth (not used in calculations)</p>"},{"location":"types/PdfThreadWhatsitNode/#pdfthreadwhatsitnodenamed_id","title":"PdfThreadWhatsitNode.named_id","text":"<pre><code>PdfThreadWhatsitNode.named_id : integer\n</code></pre> <p>is <code>tread_id</code> a string value?</p>"},{"location":"types/PdfThreadWhatsitNode/#pdfthreadwhatsitnodetread_id","title":"PdfThreadWhatsitNode.tread_id","text":"<pre><code>PdfThreadWhatsitNode.tread_id : integer\n</code></pre> <p>the thread id  string  the thread name</p>"},{"location":"types/PdfThreadWhatsitNode/#pdfthreadwhatsitnodethread_attr","title":"PdfThreadWhatsitNode.thread_attr","text":"<pre><code>PdfThreadWhatsitNode.thread_attr : integer\n</code></pre> <p>extra thread information</p>"},{"location":"types/PdfWindowTypes/","title":"alias PdfWindowTypes","text":"<pre><code>(alias) PdfWindowTypes = (0|1|2)\n    | 0 -- 'notset'\n    | 1 -- 'new'\n    | 2 -- 'nonew'\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L1095-L1097</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfeArray/","title":"class PdfeArray","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfeDictionary/","title":"class PdfeDictionary","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfeDocument/","title":"class PdfeDocument","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: lpdfelib.c#L1521-L1537</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfeDocument/#fields","title":"fields","text":""},{"location":"types/PdfeDocument/#pdfedocumentcatalog","title":"PdfeDocument.catalog","text":"<pre><code>PdfeDocument.catalog : any\n</code></pre>"},{"location":"types/PdfeDocument/#pdfedocumentcatalog_1","title":"PdfeDocument.Catalog","text":"<pre><code>PdfeDocument.Catalog : any\n</code></pre>"},{"location":"types/PdfeDocument/#pdfedocumentinfo","title":"PdfeDocument.info","text":"<pre><code>PdfeDocument.info : any\n</code></pre>"},{"location":"types/PdfeDocument/#pdfedocumentinfo_1","title":"PdfeDocument.Info","text":"<pre><code>PdfeDocument.Info : any\n</code></pre>"},{"location":"types/PdfeDocument/#pdfedocumenttrailer","title":"PdfeDocument.trailer","text":"<pre><code>PdfeDocument.trailer : any\n</code></pre>"},{"location":"types/PdfeDocument/#pdfedocumenttrailer_1","title":"PdfeDocument.Trailer","text":"<pre><code>PdfeDocument.Trailer : any\n</code></pre>"},{"location":"types/PdfeDocument/#pdfedocumentpages","title":"PdfeDocument.pages","text":"<pre><code>PdfeDocument.pages : any\n</code></pre>"},{"location":"types/PdfeDocument/#pdfedocumentpages_1","title":"PdfeDocument.Pages","text":"<pre><code>PdfeDocument.Pages : any\n</code></pre>"},{"location":"types/PdfeReference/","title":"class PdfeReference","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PdfeStream/","title":"class PdfeStream","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PenInfo/","title":"class PenInfo","text":"<p>There is helper function (<code>pen_info(obj)</code>) that returns a table containing a bunch of vital characteristics of the used pen (all values are floats):</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PenInfo/#fields","title":"fields","text":""},{"location":"types/PenInfo/#peninfowidth","title":"PenInfo.width","text":"<pre><code>PenInfo.width : number\n</code></pre> <p>width of the pen</p>"},{"location":"types/PenInfo/#peninfosx","title":"PenInfo.sx","text":"<pre><code>PenInfo.sx : number\n</code></pre> <p><code>x</code> scale</p>"},{"location":"types/PenInfo/#peninforx","title":"PenInfo.rx","text":"<pre><code>PenInfo.rx : number\n</code></pre> <p><code>xy</code> multiplier</p>"},{"location":"types/PenInfo/#peninfory","title":"PenInfo.ry","text":"<pre><code>PenInfo.ry : number\n</code></pre> <p><code>yx</code> multiplier</p>"},{"location":"types/PenInfo/#peninfosy","title":"PenInfo.sy","text":"<pre><code>PenInfo.sy : number\n</code></pre> <p><code>y</code> scale</p>"},{"location":"types/PenInfo/#peninfotx","title":"PenInfo.tx","text":"<pre><code>PenInfo.tx : number\n</code></pre> <p><code>x</code> offset</p>"},{"location":"types/PenInfo/#peninfoty","title":"PenInfo.ty","text":"<pre><code>PenInfo.ty : number\n</code></pre> <p><code>y</code> offset</p>"},{"location":"types/PenaltyNode/","title":"class PenaltyNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"penalty\", nil, {\n  id = \"penalty (14)\",\n  subtypes = {\n    \"userpenalty (0)\",\n    \"linebreakpenalty (1)\",\n    \"linepenalty (2)\",\n    \"wordpenalty (3)\",\n    \"finalpenalty (4)\",\n    \"noadpenalty (5)\",\n    \"beforedisplaypenalty (6)\",\n    \"afterdisplaypenalty (7)\",\n    \"equationnumberpenalty (8)\",\n  },\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"penalty (4)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L898-L900</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PenaltyNode/#fields","title":"fields","text":""},{"location":"types/PenaltyNode/#penaltynodesubtype","title":"PenaltyNode.subtype","text":"<pre><code>PenaltyNode.subtype : PenaltyNodeSubtype\n</code></pre>"},{"location":"types/PenaltyNode/#penaltynodeattr","title":"PenaltyNode.attr","text":"<pre><code>PenaltyNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/PenaltyNode/#penaltynodepenalty","title":"PenaltyNode.penalty","text":"<pre><code>PenaltyNode.penalty : integer\n</code></pre> <p>the penalty value</p>"},{"location":"types/PenaltyNodeSubtype/","title":"alias PenaltyNodeSubtype","text":"<pre><code>(alias) PenaltyNodeSubtype = (0|1|2|3|4|5|6|7|8)\n    | 0 -- userpenalty\n    | 1 -- linebreakpenalty\n    | 2 -- linepenalty\n    | 3 -- wordpenalty\n    | 4 -- finalpenalty\n    | 5 -- noadpenalty\n    | 6 -- beforedisplaypenalty\n    | 7 -- afterdisplaypenalty\n    | 8 -- equationnumberpenalty\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L587-L595</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PostLinebreakFilterCallback/","title":"alias PostLinebreakFilterCallback","text":"<pre><code>(alias) PostLinebreakFilterCallback = fun(head: Node, groupcode: string) -&gt; NodeCallbackReturn\n</code></pre> <p>Alter a node list afer linebreaking has taken place. The string argument gives some context.</p> <p>This callback is called just after LuaTeX has converted a list of nodes into a stack of <code>\\hbox</code>es.</p> <p>This callback does not replace any internal code.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: linebreak.c#L196</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PreDumpCallback/","title":"alias PreDumpCallback","text":"<pre><code>(alias) PreDumpCallback = fun()\n</code></pre> <p>Run actions just before format dumping takes place.</p> <p>This function is called just before dumping to a format file starts. It does not replace any code and there are neither arguments nor return values.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: dumpdata.c#L95</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PreLinebreakFilterCallback/","title":"alias PreLinebreakFilterCallback","text":"<pre><code>(alias) PreLinebreakFilterCallback = fun(head: Node, groupcode: PreLinebreakFilterGroupCode) -&gt; NodeCallbackReturn\n</code></pre> <p>Alter a node list before linebreaking takes place. The string argument gives some context.</p> <p>This callback is called just before LuaTeX starts converting a list of nodes into a stack of <code>hbox</code>es, after the addition of <code>parfillskip</code>.</p> <pre><code>---@type PreLinebreakFilter\nfunction(head, groupcode)\n  --- true|false|node\n  return true\nend\n</code></pre> <p>This callback does not replace any internal code.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: linebreak.c#L124</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PreLinebreakFilterGroupCode/","title":"alias PreLinebreakFilterGroupCode","text":"<pre><code>(alias) PreLinebreakFilterGroupCode = (\"\"|\"hbox\"|\"adjusted_hbox\"|\"vbox\"|\"vtop\"|\"align\"|\"disc\"|\"insert\"|\"vcenter\"|\"local_box\"...)\n    | \"\" -- main vertical list\n    | \"hbox\" -- hbox` in horizontal mode\n    | \"adjusted_hbox\" -- hbox` in vertical mode\n    | \"vbox\" -- vbox`\n    | \"vtop\" -- vtop' #\n    | \"align\" -- halign` or `valign`\n    | \"disc\" -- discretionaries\n    | \"insert\" -- packaging an insert\n    | \"vcenter\" -- vcenter`\n    | \"local_box\" -- localleftbox` or `localrightbox`\n    | \"split_off\" -- top of a `vsplit`\n    | \"split_keep\" -- remainder of a `vsplit`\n    | \"align_set\" -- alignment cell\n    | \"fin_row\" -- alignment row\n</code></pre> <p>The string called <code>groupcode</code> identifies the nodelist's context within TeX's processing. The range of possibilities is given in the table below, but not all of those can actually appear in <code>pre_linebreak_filter</code>, some are for the <code>hpack_filter</code> and <code>vpack_filter</code> callbacks that will be explained in the next two paragraphs.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PreOutputFilterCallback/","title":"alias PreOutputFilterCallback","text":"<pre><code>(alias) PreOutputFilterCallback = fun(head: Node, groupcode: string, size: integer, packtype: (\"additional\"|\"exactly\"), maxdepth: integer, direction: DirectionSpecifier?) -&gt; NodeCallbackReturn\n</code></pre> <p>Alter a node list before boxing to <code>outputbox</code> takes place.</p> <p>This callback is called when TeX is ready to start boxing the box 255 for <code>output</code>.</p> <p>This callback does not replace any internal code.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luanode.c#L262</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PrintableInput/","title":"alias PrintableInput","text":"<pre><code>(alias) PrintableInput = (string|number|integer)\n</code></pre>"},{"location":"types/ProcessInputBufferCallback/","title":"alias ProcessInputBufferCallback","text":"<pre><code>(alias) ProcessInputBufferCallback = fun(buffer: string) -&gt; string?\n</code></pre> <p>Modify the encoding of the input buffer.</p> <p>This callback allows you to change the contents of the line input buffer just before LuaTeX actually starts looking at it.</p> <p>If you return <code>nil</code>, LuaTeX will pretend like your callback never happened. You can gain a small amount of processing time from that. This callback does not replace any internal code.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/ProcessJobnameCallback/","title":"alias ProcessJobnameCallback","text":"<pre><code>(alias) ProcessJobnameCallback = fun(jobname: string) -&gt; string?\n</code></pre> <p>This callback allows you to change the jobname given by <code>jobname</code> in TeX and <code>tex.jobname</code> in Lua. It does not affect the internal job name or the name of the output or log files.</p> <p>The only argument is the actual job name; you should not use <code>tex.jobname</code> inside this function or infinite recursion may occur. If you return <code>nil</code>, LuaTeX will pretend your callback never happened. This callback does not replace any internal code.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: textoken.c#L2511</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/ProcessOutputBufferCallback/","title":"alias ProcessOutputBufferCallback","text":"<pre><code>(alias) ProcessOutputBufferCallback = fun(buffer: string) -&gt; string?\n</code></pre> <p>Modify the encoding of the output buffer.</p> <p>This callback allows you to change the contents of the line output buffer just before LuaTeX actually starts writing it to a file as the result of a <code>write</code> command. It is only called for output to an actual file (that is, excluding the log, the terminal, and so called <code>write</code> 18 calls).</p> <p>If you return <code>nil</code>, LuaTeX will pretend like your callback never happened. You can gain a small amount of processing time from that. This callback does not replace any internal code.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/ProcessPdfImageContentCallback/","title":"alias ProcessPdfImageContentCallback","text":"<pre><code>(alias) ProcessPdfImageContentCallback = fun(s: string) -&gt; string\n</code></pre> <p>When a page from a PDF file is embedded its page stream as well as related objects are copied to the target file. However, it can be that the page stream has operators that assume additional resources, for instance marked text. You can decide to filter that for which LuaTeX provides a callback. Here is a simple demonstration of use:</p> <pre><code>pdf.setrecompress(1)\n\ncallback.register(\"process_pdf_image_content\",function(s)\n    print(s)\n    return s\nend)\n</code></pre> <p>You need to explicitly enable recompression because otherwise the content stream gets just passed on in its original compressed form.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: pdftoepdf.c#L440</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/ProcessRuleCallback/","title":"alias ProcessRuleCallback","text":"<pre><code>(alias) ProcessRuleCallback = fun(node: Node, width: integer, height: integer)\n</code></pre> <p>This is an experimental callback. It can be used with rules of subtype 4 (user). The callback gets three arguments: the node, the width and the height. The callback can use <code>pdf.print</code> to write code to the PDF file but beware of not messing up the final result. No checking is done.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: pdfshipout.c#L246</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PseudoFileNode/","title":"class PseudoFileNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"pseudo_file\", nil, {\n  id = \"pseudo_file (31)\",\n  fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\" },\n})\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/4f2b914d365bab8a2747afe6e8c86d0f1c8475f7/source/texk/web2c/luatexdir/tex/texnodes.c#L524</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/PseudoLineNode/","title":"class PseudoLineNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"pseudo_line\", nil, {\n  id = \"pseudo_line (32)\",\n  fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\" },\n})\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/4f2b914d365bab8a2747afe6e8c86d0f1c8475f7/source/texk/web2c/luatexdir/tex/texnodes.c#L525</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/RadicalNode/","title":"class RadicalNode","text":"<ul> <li>supers: Node</li> </ul> <p>Warning: never assign a node list to the <code>nucleus</code>, <code>sub</code>, <code>sup</code>, <code>left</code>, or <code>degree</code> field unless you are sure its internal link structure is correct, otherwise an error can be triggered.</p> <p>Example:</p> <pre><code>assert.node_type(\"radical\", nil, {\n  id = \"radical (19)\",\n  subtypes = {\n    \"radical (0)\",\n    \"uradical (1)\",\n    \"uroot (2)\",\n    \"uunderdelimiter (3)\",\n    \"uoverdelimiter (4)\",\n    \"udelimiterunder (5)\",\n    \"udelimiterover (6)\",\n  },\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"nucleus (4)\",\n    \"sub (5)\",\n    \"sup (6)\",\n    \"left (7)\",\n    \"degree (8)\",\n    \"width (9)\",\n    \"options (10)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L902-L910</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/RadicalNode/#fields","title":"fields","text":""},{"location":"types/RadicalNode/#radicalnodesubtype","title":"RadicalNode.subtype","text":"<pre><code>RadicalNode.subtype : RadicalNodeSubtype\n</code></pre>"},{"location":"types/RadicalNode/#radicalnodeattr","title":"RadicalNode.attr","text":"<pre><code>RadicalNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/RadicalNode/#radicalnodenucleus","title":"RadicalNode.nucleus","text":"<pre><code>RadicalNode.nucleus : KernNode {\n    subtype: KernNodeSubtype,\n    kern: integer,\n}\n</code></pre> <p>base</p>"},{"location":"types/RadicalNode/#radicalnodesub","title":"RadicalNode.sub","text":"<pre><code>RadicalNode.sub : KernNode {\n    subtype: KernNodeSubtype,\n    kern: integer,\n}\n</code></pre> <p>subscript</p>"},{"location":"types/RadicalNode/#radicalnodesup","title":"RadicalNode.sup","text":"<pre><code>RadicalNode.sup : KernNode {\n    subtype: KernNodeSubtype,\n    kern: integer,\n}\n</code></pre> <p>superscript</p>"},{"location":"types/RadicalNode/#radicalnodeleft","title":"RadicalNode.left","text":"<pre><code>RadicalNode.left : DelimNode {\n    attr: Node,\n    small_char: integer,\n    small_fam: integer,\n    large_char: integer,\n    large_fam: integer,\n}\n</code></pre>"},{"location":"types/RadicalNode/#radicalnodedegree","title":"RadicalNode.degree","text":"<pre><code>RadicalNode.degree : KernNode {\n    subtype: KernNodeSubtype,\n    kern: integer,\n}\n</code></pre> <p>only set by <code>Uroot</code></p>"},{"location":"types/RadicalNode/#radicalnodewidth","title":"RadicalNode.width","text":"<pre><code>RadicalNode.width : integer\n</code></pre> <p>required width</p>"},{"location":"types/RadicalNode/#radicalnodeoptions","title":"RadicalNode.options","text":"<pre><code>RadicalNode.options : integer\n</code></pre> <p>bitset of rendering options</p>"},{"location":"types/RadicalNodeSubtype/","title":"alias RadicalNodeSubtype","text":"<pre><code>(alias) RadicalNodeSubtype = (0|1|2|3|4|5|6)\n    | 0 -- radical\n    | 1 -- uradical\n    | 2 -- uroot\n    | 3 -- uunderdelimiter\n    | 4 -- uoverdelimiter\n    | 5 -- udelimiterunder\n    | 6 -- udelimiterover\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L686-L692</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/ReadDataFileCallback/","title":"alias ReadDataFileCallback","text":"<pre><code>(alias) ReadDataFileCallback = ReadFileCallback\n</code></pre> <p>Read a data file.</p> <p>embedded files (as is possible with PDF objects)</p>"},{"location":"types/ReadEncFileCallback/","title":"alias ReadEncFileCallback","text":"<pre><code>(alias) ReadEncFileCallback = ReadFileCallback\n</code></pre> <p>Read a font encoding file.</p> <p>encoding files</p>"},{"location":"types/ReadFileCallback/","title":"alias ReadFileCallback","text":"<pre><code>(alias) ReadFileCallback = fun(file_name: string) -&gt; (boolean,string,integer)\n</code></pre> <p>callback for the loading of binary data files. The <code>name</code> will normally be a full path name as it is returned by either one of the file discovery callbacks or the internal version of <code>kpse.find_file()</code>.</p> <p>success</p> <p>Return <code>false</code> when a fatal error occurred (e.g.\\ when the file cannot be found, after all).</p> <p>data</p> <p>The bytes comprising the file.</p> <p>data_size</p> <p>The length of the <code>data</code>, in bytes.</p> <p>Return an empty string and zero if the file was found but there was a reading problem.</p>"},{"location":"types/ReadFontFileCallback/","title":"alias ReadFontFileCallback","text":"<pre><code>(alias) ReadFontFileCallback = ReadFileCallback\n</code></pre> <p>Read a TFM metrics file. Return <code>true</code>,  the data, and the data length for success, <code>false</code> otherwise</p> <p>ofm or tfm files</p>"},{"location":"types/ReadMapFileCallback/","title":"alias ReadMapFileCallback","text":"<pre><code>(alias) ReadMapFileCallback = ReadFileCallback\n</code></pre> <p>Read a font map file.</p> <p>map files</p>"},{"location":"types/ReadOnlyDimensionParameter/","title":"alias ReadOnlyDimensionParameter","text":"<pre><code>(alias) ReadOnlyDimensionParameter = (\"pagedepth\"|\"pagefilllstretch\"|\"pagefillstretch\"|\"pagefilstretch\"|\"pagegoal\"|\"pageshrink\"|\"pagestretch\"|\"pagetotal\")\n    | \"pagedepth\" -- Depth of the current page.\n    | \"pagefilllstretch\" -- Accumulated third-order stretch of the current page.\n    | \"pagefillstretch\" -- Accumulated second-order stretch of the current page.\n    | \"pagefilstretch\" -- Accumulated first-order stretch of the current page.\n    | \"pagegoal\" -- Goal height of the page box. This starts at `\\vsize`, and is diminished by heights of insertion items.\n    | \"pageshrink\" -- Accumulated shrink of the current page.\n    | \"pagestretch\" -- Accumulated zeroth-order stretch of the current page.\n    | \"pagetotal\" -- Accumulated natural height of the current page.\n</code></pre> <p>The dimension parameters accept Lua numbers (signifying scaled points) or strings (with included dimension). The result is always a number in scaled points. These are read-only:</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L415-422</li> </ul>"},{"location":"types/ReadOnlyIntegerParameter/","title":"alias ReadOnlyIntegerParameter","text":"<pre><code>(alias) ReadOnlyIntegerParameter = (\"deadcycles\"|\"insertpenalties\"|\"parshape\"|\"interlinepenalties\"|\"clubpenalties\"|\"widowpenalties\"|\"displaywidowpenalties\"|\"prevgraf\"|\"spacefactor\")\n    | \"deadcycles\" -- Counter that keeps track of how many times the output routine has been called without a `\\shipout` taking place.\n    | \"insertpenalties\" -- Total of penalties for split insertions. Inside the output routine, the number of held-over insertions.\n    | \"parshape\" -- Command for general paragraph shapes.\n    | \"interlinepenalties\" -- An extension to `\\interlinepenalty` that allows different penalties to be added after each line. It takes a space separated list of numbers as value. If `n` is positive interlinepenalties `n i_1 ... i_n` specifies the penalty to be used after each of the lines in a paragraph, with the last value being repeated as often as needed if the paragraph has more then `n` lines.\n    | \"clubpenalties\" -- An extension to `\\clubpenalty` that allows different penalties to be added after each line. It takes a space separated list of numbers as value. If `n` is positive clubpenalties `n i_1 ... i_n` specifies the penalty to be used after each of the lines in a paragraph, with the last value being repeated as often as needed if the paragraph has more then `n` lines.\n    | \"widowpenalties\" -- An extension to `\\widowpenalty` that allows different penalties to be added after each line. It takes a space separated list of numbers as value. If `n` is positive widowpenalties `n i_1 ... i_n` specifies the penalty to be used after each of the lines in a paragraph, with the last value being repeated as often as needed if the paragraph has more then `n` lines. Lines are counted backwards from the last line in this case.\n    | \"displaywidowpenalties\" -- An extension to `\\widowpenalty` that allows different penalties to be added after each line. It takes a space separated list of numbers as value. If `n` is positive displaywidowpenalties `n i_1 ... i_n` specifies the penalty to be used after each of the lines in a paragraph, with the last value being repeated as often as needed if the paragraph has more then `n` lines. Lines counted backwards from each display math within a paragraph.\n    | \"prevgraf\" -- The number of lines in the paragraph last added to the vertical list.\n    | \"spacefactor\" -- `1000` times the ratio by which the stretch (shrink) component of the interword glue should be multiplied (divided).\n</code></pre> <p>The integer parameters accept and return Lua numbers. These are read-only:</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L358-366</li> </ul>"},{"location":"types/ReadOpentypeFileCallback/","title":"alias ReadOpentypeFileCallback","text":"<pre><code>(alias) ReadOpentypeFileCallback = ReadFileCallback\n</code></pre> <p>Read an OpenType font.</p> <p>OpenType font files</p>"},{"location":"types/ReadPkFileCallback/","title":"alias ReadPkFileCallback","text":"<pre><code>(alias) ReadPkFileCallback = ReadFileCallback\n</code></pre> <p>Read a font bitmap PK file.</p> <p>pk bitmap files</p>"},{"location":"types/ReadTruetypeFileCallback/","title":"alias ReadTruetypeFileCallback","text":"<pre><code>(alias) ReadTruetypeFileCallback = ReadFileCallback\n</code></pre> <p>Read a TrueType font. TrueType font files</p>"},{"location":"types/ReadType1FileCallback/","title":"alias ReadType1FileCallback","text":"<pre><code>(alias) ReadType1FileCallback = ReadFileCallback\n</code></pre> <p>Read a Type1 font.</p> <p>Type1 font files</p>"},{"location":"types/ReadVfFileCallback/","title":"alias ReadVfFileCallback","text":"<pre><code>(alias) ReadVfFileCallback = ReadFileCallback\n</code></pre> <p>Read a VF metrics file.</p> <p>virtual fonts</p>"},{"location":"types/ReadWriteDimensionParameter/","title":"alias ReadWriteDimensionParameter","text":"<pre><code>(alias) ReadWriteDimensionParameter = (\"boxmaxdepth\"|\"delimitershortfall\"|\"displayindent\"|\"displaywidth\"|\"emergencystretch\"|\"hangindent\"|\"hfuzz\"|\"hoffset\"|\"hsize\"|\"lineskiplimit\"...)\n    | \"boxmaxdepth\" -- Maximum allowed depth of boxes. Default: `\\maxdimen`.\n    | \"delimitershortfall\" -- Size of the part of a delimited formula that is allowed to go uncovered by a delimiter. Default: `5pt`.\n    | \"displayindent\" -- Distance by which the box, in which the display is centred, is indented owing to hanging indentation.\n    | \"displaywidth\" -- Width of the box in which the display is centred.\n    | \"emergencystretch\" -- (TeX3 only) Assumed extra stretchability in lines of a paragraph.\n    | \"hangindent\" -- If positive, this indicates indentation from the left margin; if negative, this is the negative of the indentation from the right margin.\n    | \"hfuzz\" -- Excess size that TeX tolerates before it considers a horizontal box overfull.\n    | \"hoffset\" -- Distance by which the page is shifted right with respect to the reference point.\n    | \"hsize\" -- Line width used for typesetting a paragraph. Default: `6.5in`.\n    | \"lineskiplimit\" -- Distance to be maintained between the bottom and top of neighbouring boxes on a vertical list. Default: `0pt`.\n    | \"mathsurround\" -- Kern amount placed before and after in-line formulas.\n    | \"maxdepth\" -- Maximum depth of the page box. Default: `4pt`.\n    | \"nulldelimiterspace\" -- Width taken for empty delimiters. Default: `1.2pt`.\n    | \"overfullrule\" -- Width of the rule that is printed to indicate overfull horizontal boxes.\n    | \"pagebottomoffset\" -- To set the bottom margin in non-TLT text.\n    | \"pageheight\" -- The page height of the PDF output (the screen, the paper, etc.).\n    | \"pageleftoffset\" -- To set the left margin in non-TLT text.\n    | \"pagerightoffset\" -- To set the right margin in non-TLT text.\n    | \"pagetopoffset\" -- To set the top margin in non-TLT text.\n    | \"pagewidth\" -- The page width of the PDF output (the screen, the paper, etc.).\n    | \"parindent\" -- Width of the indentation box added in front of a paragraph. Default: `20pt`.\n    | \"predisplaysize\" -- Effective width of the line preceding the display.\n    | \"scriptspace\" -- Extra space after subscripts and superscripts. Default: `0.5pt`.\n    | \"splitmaxdepth\" -- Maximum depth of a box split off by a `\\vsplit` operation. Default: `\\maxdimen`.\n    | \"vfuzz\" -- Excess size that TeX tolerates before it considers a vertical box overfull.\n    | \"voffset\" -- Distance by which the page is shifted right/down with respect to the reference point.\n    | \"vsize\" -- Height of the page box. Default: `8.9in`.\n    | \"prevdepth\" -- Depth of the last box added to a vertical list as it is perceived by TeX.\n    | \"prevgraf\" -- The number of lines in the paragraph last added to the vertical list.\n    | \"spacefactor\" -- `1000` times the ratio by which the stretch (shrink) component of the interword glue should be multiplied (divided).\n</code></pre> <p>The dimension parameters accept Lua numbers (signifying scaled points) or strings (with included dimension). The result is always a number in scaled points. These are read-write:</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L378-407</li> </ul>"},{"location":"types/ReadWriteIntegerParameter/","title":"alias ReadWriteIntegerParameter","text":"<pre><code>(alias) ReadWriteIntegerParameter = (\"adjdemerits\"|\"binoppenalty\"|\"brokenpenalty\"|\"catcodetable\"|\"clubpenalty\"|\"day\"|\"defaulthyphenchar\"|\"defaultskewchar\"|\"delimiterfactor\"|\"displaywidowpenalty\"...)\n    | \"adjdemerits\" -- Penalty for adjacent visually incompatible lines. Default: `10000`.\n    | \"binoppenalty\" -- Penalty for breaking after a binary operator not enclosed in a subformula. Default: `700`.\n    | \"brokenpenalty\" -- Additional penalty for breaking a page after a hyphenated line. Default: `100`\n    | \"catcodetable\" -- Catcode tables are a new feature that allows you to switch to a predefined catcode regime in a single statement.\n    | \"clubpenalty\" -- Extra penalty for breaking a page after the first line of a paragraph. In Plain TeX this is `150`. This amount, and the following penalties, are added to the `\\interlinepenalty`, and a penalty of the resulting size is inserted after the `\\hbox` containing the first line of a paragraph instead of the `\\interlinepenalty`.\n    | \"day\" -- The day of the current job.\n    | \"defaulthyphenchar\" -- Value of `\\hyphenchar` when a font is loaded. Default: `\u2018\\-`.\n    | \"defaultskewchar\" -- Value of `\\skewchar` when a font is loaded.\n    | \"delimiterfactor\" -- `1000` times the fraction of a delimited formula that should be covered by a delimiter. Default: `901`.\n    | \"displaywidowpenalty\" -- Extra penalty for breaking a page before the last line above a display formula. The default value in Plain TeX is `50`.\n    | \"doublehyphendemerits\" -- Penalty for consecutive lines ending with a hyphen. Default: `10000`.\n    | \"endlinechar\" -- The character code of the end-of-line character appended to input lines. IniTEX default: `13`.\n    | \"errorcontextlines\" -- (TeX3 only) Number of additional context lines shown in error messages.\n    | \"escapechar\" -- Number of the character that is to be used for the escape character when control sequences are being converted into character tokens. IniTEX default: `92` (`\\`).\n    | \"exhyphenpenalty\" -- Penalty for breaking a horizontal line at a discretionary item in the special case where the prebreak text is empty. Default: `50`.\n    | \"fam\" -- The number of the current font family.\n    | \"finalhyphendemerits\" -- Penalty added when the penultimate line of a paragraph ends with a hyphen. Default: `5000`.\n    | \"floatingpenalty\" -- Penalty added when an insertion is split.\n    | \"globaldefs\" -- Parameter for overriding \\global prefixes. IniTEX default: `0`.\n    | \"hangafter\" -- If positive, this denotes the number of lines before indenting starts; if negative, the absolute value of this is the number of indented lines starting with the first line of the paragraph. Default: `1`.\n    | \"hbadness\" -- Amount of tolerance before TEX reports an underfull or overfull horizontal box.\n    | \"holdinginserts\" -- (TeX3 only) If this is positive, insertions are not placed in their boxes at output time.\n    | \"hyphenpenalty\" -- Penalty associated with break at a discretionary item in the general case. Default: `50`.\n    | \"interlinepenalty\" -- Penalty for breaking a page between lines of a paragraph. Default: `0`\n    | \"language\" -- Choose a set of hyphenation patterns and exceptions.\n    | \"lastlinefit\" -- A readable and writable integer parameter that accepts and returns Lua numbers.\n    | \"lefthyphenmin\" -- (TeX3 only) Minimal number of characters before a hyphenation. Default: `2`.\n    | \"linepenalty\" -- Penalty value associated with each line break. Default: `10`.\n    | \"localbrokenpenalty\" -- Local broken penalty (from `\\localbrokenpenalty`).\n    | \"localinterlinepenalty\" -- Local interline penalty (from `\\localinterlinepenalty`).\n    | \"looseness\" -- Number of lines by which this paragraph has to be made longer than it would be ideally.\n    | \"mag\" -- `1000` times the magnification of the document.\n    | \"maxdeadcycles\" -- The maximum number of times that the output routine is allowed to be called without a `\\shipout` occurring. IniTEX default: `25`.\n    | \"month\" -- The month of the current job.\n    | \"newlinechar\" -- Number of the character that triggers a new line in `\\write` statements.\n    | \"outputpenalty\" -- Value of the penalty at the current page break, or `10000` if the break was not at a penalty.\n    | \"pausing\" -- Specify that TEX should pause after each line that is read from a file.\n    | \"postdisplaypenalty\" -- Penalty placed in the vertical list below a display. Default: `0`.\n    | \"predisplaydirection\" -- An internal read/write integer, to indicate the direction of the last partial paragraph before a display; it is used to control the placement of elements such as equation numbers, and can be explictly set to affect this placement.\n    | \"predisplaypenalty\" -- Penalty placed in the vertical list above a display. Default: `10000`.\n    | \"pretolerance\" -- Tolerance value for a paragraph without hyphenation. Default: `100`.\n    | \"relpenalty\" -- Penalty for breaking after a binary relation not enclosed in a subformula. Default: `500`.\n    | \"righthyphenmin\" -- (TeX3 only) Minimum number of characters after a hyphenation. Default: `3`.\n    | \"savinghyphcodes\" -- When a `\\patterns` command is executed and \\savinghyphcodes has a positive value, the current `\\lccode` values are saved as hyphenation codes for the current language.\n    | \"savingvdiscards\" -- When \u03b5-TEX\u2019s parameter `\\savingvdiscards` has been assigned a positive value, these \u2018discarded items\u2019 are saved in two lists and can be recovered by the commands `\\pagediscards` and `\\splitdiscards` that act like \u2018unvboxing\u2019 hypothetical box registers containing a vbox with the discarded items.\n    | \"showboxbreadth\" -- Number of successive elements on each level that are shown when boxes are displayed.\n    | \"showboxdepth\" -- The number of levels of box dump that are shown when boxes are displayed.\n    | \"time\" -- Number of minutes after midnight that the current job started.\n    | \"tolerance\" -- Tolerance value for lines in a paragraph with hyphenation. Default: `200`.\n    | \"tracingassigns\" -- When the program is compiled with the code for collecting statistics and `\\tracingassigns` has a value of `1` or more, all assignments subject to TeX\u2019s grouping mechanism are traced.\n    | \"tracingcommands\" -- If this is `1` TEX displays primitive commands executed; if this is `2` or more the outcome of conditionals is also recorded.\n    | \"tracinggroups\" -- When `\\tracinggroups` has a value of `1` or more, the start and end of each save group is traced, together with the starting line and grouping level.\n    | \"tracingifs\" -- When `\\tracingifs` has a value of `1` or more, all conditionals (including `\\unless`, `\\or`, `\\else`, and `\\fi`) are traced, together with the starting line and nesting level.\n    | \"tracinglostchars\" -- If this parameter is positive, TeX gives diagnostic messages whenever a character is accessed that is not present in a font. Plain default: `1`.\n    | \"tracingmacros\" -- If this is `1`, the log file shows expansion of macros that are performed and the actual values of the arguments; if this is `2` or more token parameters such as `\\output` and `\\everypar` are also traced.\n    | \"tracingnesting\" -- When `\\tracingnesting` has a value of `1` or more, these anomalies are shown; when `\\tracingnesting` has a value of `2` or more, the current context (traceback) is shown as well.\n    | \"tracingonline\" -- If this parameter is positive, TeX will write trace information to the terminal in addition to the log file.\n    | \"tracingoutput\" -- If this is positive, the log file shows a dump of boxes that are shipped to the dvi file.\n    | \"tracingpages\" -- If this parameter is positive, TeX generates a trace of the page breaking algorithm.\n    | \"tracingparagraphs\" -- If this parameter is positive, TeX generates a trace of the line breaking algorithm.\n    | \"tracingrestores\" -- If this parameter is positive, TEX will report all values that are restored when a group ends.\n    | \"tracingscantokens\" -- When `\\tracingscantokens` has a value of `1` or more, the opening and closing of pseudo-files (generated by `\\scantokens`) is recorded as for any other file, with \u2018\u2423\u2019 as filename.\n    | \"tracingstats\" -- If this parameter is `1`, TeX reports at the end of the job the usage of various internal arrays; if it is `2`, the memory demands are given whenever a page is shipped out.\n    | \"uchyph\" -- Positive to allow hyphenation of words starting with a capital letter. Default: `1`.\n    | \"vbadness\" -- Amount of tolerance before TEX reports an underfull or overfull vertical box.\n    | \"widowpenalty\" -- Additional penalty for breaking a page before the last line of a paragraph. Default: `150`.\n    | \"year\" -- The year of the current job.\n</code></pre> <p>The integer parameters accept and return Lua numbers. These are read-write:</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L284-350</li> </ul>"},{"location":"types/ReceivePatternMode/","title":"alias ReceivePatternMode","text":"<pre><code>(alias) ReceivePatternMode = (\"*a\"|\"*l\")\n    | \"*a\" -- Reads from the socket until the connection is closed. No end-of-line translation is performed\n    | \"*l\" -- Reads a line of text from the socket. The line is terminated by a LF character (ASCII 10), optionally preceded by a CR character (ASCII 13). The CR and LF characters are not included in the returned line. In fact, all CR characters are ignored by the pattern.\n</code></pre>"},{"location":"types/RuleNode/","title":"class RuleNode","text":"<ul> <li>supers: Node</li> </ul> <p>A rule node stands for a solid black rectangle.</p> <p>Contrary to traditional TeX, LuaTeX has more <code>rule</code> subtypes because we also use rules to store reuseable objects and images. User nodes are invisible and can be intercepted by a callback.</p> <p>The <code>left</code> and <code>right</code> keys are somewhat special (and experimental). When rules are auto adapting to the surrounding box width you can enforce a shift to the right by setting <code>left</code>. The value is also subtracted from the width which can be a value set by the engine itself and is not entirely under user control. The <code>right</code> is also subtracted from the width. It all happens in the backend so these are not affecting the calculations in the frontend (actually the auto settings also happen in the backend). For a vertical rule <code>left</code> affects the height and <code>right</code> affects the depth. There is no matching interface at the TeX end (although we can have more keywords for rules it would complicate matters and introduce a speed penalty.) However, you can just construct a rule node with Lua and write it to the TeX input. The <code>outline</code> subtype is just a convenient variant and the <code>transform</code> field specifies the width of the outline.</p> <p>Example:</p> <pre><code>assert.node_type(\"rule\", nil, {\n  id = \"rule (2)\",\n  subtypes = {\n    \"normal (0)\",\n    \"box (1)\",\n    \"image (2)\",\n    \"empty (3)\",\n    \"user (4)\",\n    \"over (5)\",\n    \"under (6)\",\n    \"fraction (7)\",\n    \"radical (8)\",\n    \"outline (9)\",\n  },\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"width (4)\",\n    \"depth (5)\",\n    \"height (6)\",\n    \"dir (7)\",\n    \"index (8)\",\n    \"left (9)\",\n    \"right (10)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-nodes.tex#L119-L157</li> <li>Corresponding C source code: texnodes.c#L912-L920</li> <li>Donald Ervin Knuth. \u201cTeX: The Program\u201d: section 135. page 51 tex.pdf</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/RuleNode/#fields","title":"fields","text":""},{"location":"types/RuleNode/#rulenodesubtype","title":"RuleNode.subtype","text":"<pre><code>RuleNode.subtype : RuleNodeSubtype\n</code></pre>"},{"location":"types/RuleNode/#rulenodeattr","title":"RuleNode.attr","text":"<pre><code>RuleNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/RuleNode/#rulenodewidth","title":"RuleNode.width","text":"<pre><code>RuleNode.width : integer\n</code></pre> <p>the width of the rule where the special value \u22121073741824 is used for \u2018running\u2019 glue dimensions</p>"},{"location":"types/RuleNode/#rulenodeheight","title":"RuleNode.height","text":"<pre><code>RuleNode.height : integer\n</code></pre> <p>the height of the rule (can be negative)</p>"},{"location":"types/RuleNode/#rulenodedepth","title":"RuleNode.depth","text":"<pre><code>RuleNode.depth : integer\n</code></pre> <p>the depth of the rule (can be negative)</p>"},{"location":"types/RuleNode/#rulenodeleft","title":"RuleNode.left","text":"<pre><code>RuleNode.left : integer\n</code></pre> <p>shift at the left end (also subtracted from width)</p>"},{"location":"types/RuleNode/#rulenoderight","title":"RuleNode.right","text":"<pre><code>RuleNode.right : integer\n</code></pre> <p>(subtracted from width)</p>"},{"location":"types/RuleNode/#rulenodedir","title":"RuleNode.dir","text":"<pre><code>RuleNode.dir : DirectionSpecifier\n</code></pre> <p>the direction of this rule</p>"},{"location":"types/RuleNode/#rulenodeindex","title":"RuleNode.index","text":"<pre><code>RuleNode.index : integer\n</code></pre> <p>an optional index that can be referred too</p>"},{"location":"types/RuleNode/#rulenodetransform","title":"RuleNode.transform","text":"<pre><code>RuleNode.transform : integer\n</code></pre> <p>an private variable (also used to specify outline width)</p>"},{"location":"types/RuleNodeSubtype/","title":"alias RuleNodeSubtype","text":"<pre><code>(alias) RuleNodeSubtype = (0|1|2|3|4|5|6|7|8|9)\n    | 0 -- normal\n    | 1 -- box\n    | 2 -- image\n    | 3 -- empty\n    | 4 -- user\n    | 5 -- over\n    | 6 -- under\n    | 7 -- fraction\n    | 8 -- radical\n    | 9 -- outline\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L602-L611</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/SavePosWhatsitNode/","title":"class SavePosWhatsitNode","text":"<ul> <li>supers: WhatsitNode</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"save_pos\", {\n  id = \"whatsit (8)\",\n  subtype = \"save_pos (7)\",\n  fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\", \"attr (3)\" },\n})\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/SavePosWhatsitNode/#fields","title":"fields","text":""},{"location":"types/SavePosWhatsitNode/#saveposwhatsitnodeattr","title":"SavePosWhatsitNode.attr","text":"<pre><code>SavePosWhatsitNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/Scanner/","title":"class Scanner","text":""},{"location":"types/Scanner/#methods","title":"methods","text":""},{"location":"types/Scanner/#scannerpop","title":"Scanner.pop","text":"<pre><code>function Scanner.pop() -&gt;  any\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfscannerlib.c#L1063-L1069</li> </ul>"},{"location":"types/Scanner/#scannerpopnumber","title":"Scanner.popnumber","text":"<pre><code>function Scanner.popnumber()\n</code></pre> <p>Return only the value of a real or integer</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfscannerlib.c#L1013-L1021</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Scanner/#scannerpopname","title":"Scanner.popname","text":"<pre><code>function Scanner.popname()\n</code></pre> <p>Return only the value of a name</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfscannerlib.c#L1039-L1045</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Scanner/#scannerpopstring","title":"Scanner.popstring","text":"<pre><code>function Scanner.popstring()\n</code></pre> <p>Return only the value of a string</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfscannerlib.c#L1031-L1037</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Scanner/#scannerpoparray","title":"Scanner.poparray","text":"<pre><code>function Scanner.poparray()\n</code></pre> <p>Return only the value of a array</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfscannerlib.c#L1047-L1053</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Scanner/#scannerpopdictionary","title":"Scanner.popdictionary","text":"<pre><code>function Scanner.popdictionary()\n</code></pre> <p>Return only the value of a dict</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfscannerlib.c#L1055-L1061</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Scanner/#scannerpopboolean","title":"Scanner.popboolean","text":"<pre><code>function Scanner.popboolean()\n</code></pre> <p>Return only the value of a boolean</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfscannerlib.c#L1023-L1029</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Scanner/#scannerdone","title":"Scanner.done","text":"<pre><code>function Scanner.done()\n</code></pre> <p>Abort further processing of this scan() call</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lpdfscannerlib.c#L830-L836</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/ShapeNode/","title":"class ShapeNode","text":"<ul> <li>supers: Node</li> </ul> <p><code>\\parshape</code></p> <p>Example:</p> <pre><code>assert.node_type(\n  \"shape\",\n  nil,\n  {\n    id = \"shape (49)\",\n    fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\" },\n  }\n)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L488</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/ShowErrorHookCallback/","title":"alias ShowErrorHookCallback","text":"<pre><code>(alias) ShowErrorHookCallback = fun()\n</code></pre> <p>Run action at error reporting time.</p> <p>This callback is run from inside the TeX error function, and the idea is to allow you to do some extra reporting on top of what TeX already does (none of the normal actions are removed). You may find some of the values in the <code>status</code> table useful. This callback does not replace any internal code.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: filename.c#L282</li> <li>Corresponding C source code: errors.c#L430</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/ShowErrorMessageCallback/","title":"alias ShowErrorMessageCallback","text":"<pre><code>(alias) ShowErrorMessageCallback = fun()\n</code></pre> <p>This callback replaces the code that prints the error message. The usual interaction after the message is not affected.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: errors.c#L105</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/ShowLuaErrorHookCallback/","title":"alias ShowLuaErrorHookCallback","text":"<pre><code>(alias) ShowLuaErrorHookCallback = fun()\n</code></pre> <p>This callback replaces the code that prints the extra Lua error message.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: errors.c#L995</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Socket/","title":"class Socket","text":"<p>https://lunarmodules.github.io/luasocket/socket.html</p> <p>The socket namespace</p> <p>The <code>socket</code> namespace contains the core functionality of LuaSocket.</p> <p>To obtain the <code>socket</code> namespace, run:</p> <pre><code>-- loads the socket module\nlocal socket = require(\"socket\")\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Socket/#methods","title":"methods","text":""},{"location":"types/Socket/#socketgettime","title":"Socket.gettime","text":"<pre><code>function Socket.gettime() -&gt; time number\n</code></pre> <p>@return <code>time</code> - for example <code>1683526723.1653</code></p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Return the UNIX time in seconds.</p> <p>You should subtract the values returned by this function to get meaningful values.</p> <p>Example:</p> <pre><code>t = socket.gettime()\n-- do stuff\nprint(socket.gettime() - t .. \" seconds elapsed\")\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: timeout.c#L190-L194</li> </ul>"},{"location":"types/Socket/#socketnewtry","title":"Socket.newtry","text":"<p><pre><code>function Socket.newtry(finalizer: function) -&gt;  function\n</code></pre> @param <code>finalizer</code> - -<code>Finalizer</code> is a function that will be called before <code>try</code> throws the exception.</p> <p>@return  - The function returns your customized <code>try</code> function.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Creates and returns a clean <code>try</code> function that allows for cleanup before the exception is  raised.</p> <p>Note: This idea saved a lotof work with the implementation of protocols in LuaSocket:</p> <pre><code>foo = socket.protect(function()\n    -- connect somewhere\n    local c = socket.try(socket.connect(\"somewhere\", 42))\n    -- create a try function that closes 'c' on error\n    local try = socket.newtry(function() c:close() end)\n    -- do everything reassured c will be closed\n    try(c:send(\"hello there?\\r\\n\"))\n    local answer = try(c:receive())\n    ...\n    try(c:send(\"good bye\\r\\n\"))\n    c:close()\nend)\n</code></pre>"},{"location":"types/Socket/#socketprotect","title":"Socket.protect","text":"<p><pre><code>function Socket.protect(func: function) -&gt;  function\n</code></pre> @param <code>func</code> - <code>func</code> is a function that calls <code>try</code> (or <code>assert</code>, or <code>error</code>) to throw exceptions.</p> <p>@return  - Returns an equivalent function that instead of throwing exceptions in case of a failed <code>try</code>call, returns <code>nil</code> followed by an error message.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Converts a function that throws exceptions into a safe function. This function only catches exceptions thrown by the <code>try</code> and <code>newtry</code>functions. It does not catch normal Lua errors.</p>"},{"location":"types/Socket/#socketselect","title":"Socket.select","text":"<p><pre><code>function Socket.select(\n  recvt: table?,\n  sendt: table?,\n  timeout: integer?\n)\n</code></pre> @param <code>recvt</code> - <code>recvt</code> is an array with the sockets to test for characters available for reading.</p> <p>@param <code>sendt</code> - Sockets in the <code>sendt</code> array are watched to see if it is OK to immediately write on them.</p> <p>@param <code>timeout</code> - <code>timeout</code> is the maximum amount of time (in seconds) to wait for a change in status.  A <code>nil</code>, negative or omitted <code>timeout</code> value allows the function to block indefinitely.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Waits for a number of sockets to change status.</p> <p><code>Recvt</code> and <code>sendt</code> can also be empty tables or <code>nil</code>. Non-socket values (or values with non-numeric indices) in the arrays will be silently ignored.</p> <p>The function returns a list with the sockets ready for reading, a list with the sockets ready for writing and an error message. The error message is \"<code>timeout</code>\" if a timeout condition was met, \"<code>select failed</code>\" if the call to <code>select</code> failed, and <code>nil</code> otherwise. The returned tables are doubly keyed both by integers and also by the sockets themselves, to simplify the test if a specific socket has changed status.</p> <p>Note:<code>select</code> can monitor a limited number of sockets, as defined by the constant <code>socket._SETSIZE</code>. This number may be as high as 1024 or as low as 64 by default, depending on the system. It is usually possible to change this at compile time. Invoking <code>select</code> with a larger number of sockets will raise an error.</p> <p>Important note: a known bug in WinSock causes <code>select</code> to fail on non-blocking TCP sockets. The function may return a socket as writable even though the socket is notready for sending.</p> <p>Another important note: calling select with a server socket in the receive parameter before a call to accept does notguarantee <code>accept</code>will return immediately. Use the <code>settimeout</code> method or <code>accept</code> might block forever.</p> <p>Yet another note: If you close a socket and pass it to <code>select</code>, it will be ignored.</p> <p>Using select with non-socket objects: Any object that implements <code>getfd</code> and <code>dirty</code> can be used with <code>select</code>, allowing objects from other libraries to be used within a <code>socket.select</code> driven loop.</p>"},{"location":"types/Socket/#socketsink","title":"Socket.sink","text":"<pre><code>function Socket.sink(\n  mode: (\"http-chunked\"|\"close-when-done\"|\"keep-open\"),\n  socket: any\n)\n</code></pre> <p>Creates an LTN12 sink from a stream socket object.</p> <p><code>Mode</code> defines the behavior of the sink. The following options are available:</p> <ul> <li><code>\"http-chunked\"</code>: sends data through socket after applying the chunked transfer coding, closing the socket when done;</li> <li><code>\"close-when-done\"</code>: sends all received data through the socket, closing the socket when done;</li> <li><code>\"keep-open\"</code>: sends all received data through the socket, leaving it open when done.</li> </ul> <p><code>Socket</code> is the stream socket object used to send the data.</p> <p>The function returns a sink with the appropriate behavior.</p>"},{"location":"types/Socket/#socketskip","title":"Socket.skip","text":"<pre><code>function Socket.skip(\n  d: integer,\n  ...: any\n)\n</code></pre> <p>Drops a number of arguments and returns the remaining.</p> <p><code>D</code> is the number of arguments to drop. <code>Ret1</code> to <code>retN</code> are the arguments.</p> <p>The function returns <code>retd+1</code> to <code>retN</code>.</p> <p>Note: This function is useful to avoid creation of dummy variables:</p> <pre><code>-- get the status code and separator from SMTP server reply\nlocal code, sep = socket.skip(2, string.find(line, \"^(%d%d%d)(.?)\"))\n</code></pre>"},{"location":"types/Socket/#socketsleep","title":"Socket.sleep","text":"<p><pre><code>function Socket.sleep(time: integer)\n</code></pre> @param <code>time</code> - <code>time</code> is the number of seconds to sleep for. If <code>time</code> is negative, the function returns immediately.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Freeze the program execution during a given amount of time.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: timeout.c#L196-L226</li> </ul>"},{"location":"types/Socket/#socketsource","title":"Socket.source","text":"<pre><code>function Socket.source(\n  mode: (\"http-chunked\"|\"by-length\"|\"until-closed\"),\n  socket: any,\n  timeout: integer\n)\n</code></pre> <p>Creates an LTN12 source from a stream socket object.</p> <p><code>Mode</code> defines the behavior of the source. The following options are available:</p> <ul> <li><code>\"http-chunked\"</code>: receives data from socket and removes the chunked transfer codingbefore returning the data;</li> <li><code>\"by-length\"</code>: receives a fixed number of bytes from the socket. This mode requires the extra argument <code>length</code>;</li> <li><code>\"until-closed\"</code>: receives data from a socket until the other side closes the connection.</li> </ul> <p><code>Socket</code> is the stream socket object used to receive the data.</p> <p>The function returns a source with the appropriate behavior.</p>"},{"location":"types/Socket/#sockettry","title":"Socket.try","text":"<pre><code>function Socket.try(...: any)\n</code></pre> <p>Throws an exception in case <code>ret1</code> is falsy, using <code>ret2</code> as the error message. The exception is supposed to be caught by a <code>protect</code>ed function only.</p> <p><code>Ret1</code> to <code>retN</code> can be arbitrary arguments, but are usually the return values of a function call nested with <code>try</code>.</p> <p>The function returns <code>ret</code>1 to <code>ret</code>N if <code>ret</code>1 is not <code>nil</code> or <code>false</code>. Otherwise, it calls <code>error</code> passing <code>ret</code>2 wrapped in a table with metatable used by <code>protect</code>to distinguish exceptions from runtime errors.</p> <pre><code>-- connects or throws an exception with the appropriate error message\nc = socket.try(socket.connect(\"localhost\", 80))\n</code></pre>"},{"location":"types/Socket/#socketbind","title":"Socket.bind","text":"<p><pre><code>function Socket.bind(\n  address: string,\n  port: integer,\n  backlog: integer?\n) -&gt;  TCPSocketServer {\n    accept = function,\n    getoption = function,\n    setoption = function,\n}\n</code></pre> @param <code>backlog</code> - Defaults to 32.</p> <p>This function is a shortcut that creates and returns a TCP server object bound to a local <code>address</code> and <code>port</code>, ready to accept client connections. Optionally, user can also specify the <code>backlog</code> argument to the <code>listen</code> method.</p> <p>Note: The server object returned will have the option <code>reuseaddr</code> set to <code>true</code>.</p>"},{"location":"types/Socket/#socketconnect","title":"Socket.connect","text":"<p><pre><code>function Socket.connect(\n  address: string,\n  port: integer,\n  locaddr: string?,\n  locport: integer?,\n  family: (\"inet\"|\"inet6\")?\n)\n -&gt;  TCPSocketClient?\n -&gt;  string?\n</code></pre> @param <code>locaddr</code> - The local address</p> <p>@param <code>locport</code> - The local port</p> <p>@param <code>family</code> - If not specified, the family depends on your system configuration.</p> <p>@return  - Returns the client on success, or <code>nil</code> and an error message on failure.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - Returns the client on success, or <code>nil</code> and an error message on failure.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>This function is a shortcut that creates and returns a TCP client object connected to a remote <code>address</code> at a given <code>port</code>. Optionally, the user can also specify the local address and port to bind (<code>locaddr</code> and <code>locport</code>), or restrict the socket family to \"<code>inet</code>\" or \"<code>inet6</code>\".</p> <p>Two variations of connect are defined as simple helper functions that restrict the <code>family</code>, <code>socket.connect4</code> and <code>socket.connect6</code>.</p>"},{"location":"types/Socket/#socketconnect4","title":"Socket.connect4","text":"<p><pre><code>function Socket.connect4(\n  address: string,\n  port: integer,\n  locaddr: string?,\n  locport: integer?\n)\n -&gt;  TCPSocketClient?\n -&gt;  string?\n</code></pre> @param <code>locaddr</code> - The local address</p> <p>@param <code>locport</code> - The local port</p> <p>@return  - Returns the client on success, or <code>nil</code> and an error message on failure.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - Returns the client on success, or <code>nil</code> and an error message on failure.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>This function is a shortcut that creates and returns an IPv4 TCP client object connected to a remote <code>address</code> at a given <code>port</code>. Optionally, the user can also specify the local address and port to bind (<code>locaddr</code> and <code>locport</code>)</p>"},{"location":"types/Socket/#socketconnect6","title":"Socket.connect6","text":"<p><pre><code>function Socket.connect6(\n  address: string,\n  port: integer,\n  locaddr: string?,\n  locport: integer?\n)\n -&gt;  TCPSocketClient?\n -&gt;  string?\n</code></pre> @param <code>locaddr</code> - The local address</p> <p>@param <code>locport</code> - The local port</p> <p>@return  - Returns the client on success, or <code>nil</code> and an error message on failure.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - Returns the client on success, or <code>nil</code> and an error message on failure.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>This function is a shortcut that creates and returns an IPv6 TCP client object connected to a remote <code>address</code> at a given <code>port</code>. Optionally, the user can also specify the local address and port to bind (<code>locaddr</code> and <code>locport</code>)</p>"},{"location":"types/Socket/#sockettcp","title":"Socket.tcp","text":"<pre><code>function Socket.tcp()\n -&gt;  TCPSocketMaster?\n -&gt;  string?\n</code></pre> <p>@return  - New master object if successful, otherwise <code>nil</code> followed by an error message.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - New master object if successful, otherwise <code>nil</code> followed by an error message.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Creates and returns an TCP master object. A master object can be transformed into a server object with the method <code>listen</code> (after a call to <code>bind</code>) or into a client object with the method <code>connect</code>. The only other method supported by a master object is the close method.</p> <p>Note: The choice between IPv4 and IPv6 happens during a call to <code>bind</code> or <code>connect</code>, depending on the address family obtained from the resolver.</p> <p>Note: Before the choice between IPv4 and IPv6 happens, the internal socket object is invalid and therefore <code>setoption</code> will fail.</p>"},{"location":"types/Socket/#sockettcp4","title":"Socket.tcp4","text":"<pre><code>function Socket.tcp4()\n -&gt;  TCPSocketMaster?\n -&gt;  string?\n</code></pre> <p>@return  - New master object if successful, otherwise <code>nil</code> followed by an error message.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - New master object if successful, otherwise <code>nil</code> followed by an error message.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Creates and returns an IPv4 TCP master object. A master object can be transformed into a server object with the method <code>listen</code> (after a call to <code>bind</code>) or into a client object with the method connect. The only other method supported by a master object is the <code>close</code> method.</p>"},{"location":"types/Socket/#sockettcp6","title":"Socket.tcp6","text":"<pre><code>function Socket.tcp6()\n -&gt;  TCPSocketMaster?\n -&gt;  string?\n</code></pre> <p>@return  - New master object if successful, otherwise <code>nil</code> followed by an error message.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - New master object if successful, otherwise <code>nil</code> followed by an error message.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Creates and returns an IPv6 TCP master object. A master object can be transformed into a server object with the method <code>listen</code> (after a call to <code>bind</code>) or into a client object with the method <code>connect</code>. The only other method supported by a master object is the <code>close</code> method.</p> <p>Note: The TCP object returned will have the option \"ipv6-v6only\" set to <code>true</code>.</p>"},{"location":"types/Socket/#socketudp","title":"Socket.udp","text":"<pre><code>function Socket.udp()\n -&gt;  (UDPSocketConnected|UDPSocketUnconnected)?\n -&gt;  SocketReturnError\n</code></pre> <p>Creates and returns an unconnected UDP object. Unconnected objects support the sendto, receive, receivefrom, getoption, getsockname, setoption, settimeout, setpeername, setsockname, and close. The setpeername is used to connect the object.</p> <p>In case of success, a new unconnected UDP object returned. In case of error, nil is returned, followed by an error message.</p> <p>Note: The choice between IPv4 and IPv6 happens during a call to sendto, setpeername, or sockname, depending on the address family obtained from the resolver.</p> <p>Note: Before the choice between IPv4 and IPv6 happens, the internal socket object is invalid and therefore setoption will fail.</p>"},{"location":"types/Socket/#to-mark-a-socket-as-connected-or-unconnected-use-cast-example","title":"To mark a socket as connected or unconnected use <code>---@cast</code>. Example:","text":"<pre><code>local server, err = socket.udp()\nlocal client, err = socket.udp()\n---@cast server UDPSocketUnconnected\nserver:setsockname(\"127.0.0.1\", 12345)\n---@cast client UDPSocketConnected\nclient:setpeername(\"127.0.0.1\", 12345)\n</code></pre>"},{"location":"types/Socket/#socketudp4","title":"Socket.udp4","text":"<pre><code>function Socket.udp4()\n -&gt;  (UDPSocketConnected|UDPSocketUnconnected)?\n -&gt;  SocketReturnError\n</code></pre> <p>Creates and returns an unconnected IPv4 UDP object. Unconnected objects support the sendto, receive, receivefrom, getoption, getsockname, setoption, settimeout, setpeername, setsockname, and close. The setpeername is used to connect the object.</p> <p>In case of success, a new unconnected UDP object returned. In case of error, nil is returned, followed by an error message.</p>"},{"location":"types/Socket/#to-mark-a-socket-as-connected-or-unconnected-use-cast-example_1","title":"To mark a socket as connected or unconnected use <code>---@cast</code>. Example:","text":"<pre><code>local server, err = socket.udp4()\nlocal client, err = socket.udp4()\n---@cast server UDPSocketUnconnected\nserver:setsockname(\"127.0.0.1\", 12345)\n---@cast client UDPSocketConnected\nclient:setpeername(\"127.0.0.1\", 12345)\n</code></pre>"},{"location":"types/Socket/#socketudp6","title":"Socket.udp6","text":"<pre><code>function Socket.udp6()\n -&gt;  (UDPSocketConnected|UDPSocketUnconnected)?\n -&gt;  SocketReturnError\n</code></pre> <p>Creates and returns an unconnected IPv6 UDP object. Unconnected objects support the sendto,</p> <p>In case of success, a new unconnected UDP object returned. In case of error, nil is returned, followed by an error message.</p> <p>Note: The UDP object returned will have the option \"ipv6-v6only\" set to true.</p>"},{"location":"types/Socket/#to-mark-a-socket-as-connected-or-unconnected-use-cast-example_2","title":"To mark a socket as connected or unconnected use <code>---@cast</code>. Example:","text":"<pre><code>local server, err = socket.udp6()\nlocal client, err = socket.udp6()\n---@cast server UDPSocketUnconnected\nserver:setsockname(\"127.0.0.1\", 12345)\n---@cast client UDPSocketConnected\nclient:setpeername(\"127.0.0.1\", 12345)\n</code></pre>"},{"location":"types/Socket/#fields","title":"fields","text":""},{"location":"types/Socket/#socketheaders","title":"Socket.headers","text":"<pre><code>Socket.headers: table\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Socket/#socket_debug","title":"Socket._DEBUG","text":"<pre><code>Socket._DEBUG : boolean\n</code></pre> <p>This constant is set to <code>true</code> if the library was compiled with debug support.</p>"},{"location":"types/Socket/#socket_datagramsize","title":"Socket._DATAGRAMSIZE","text":"<pre><code>Socket._DATAGRAMSIZE : integer\n</code></pre> <p>Default datagram size used by calls to <code>receive</code>and <code>receivefrom</code>. (Unless changed in compile time, the value is 8192.)</p>"},{"location":"types/Socket/#socket_setsize","title":"Socket._SETSIZE","text":"<pre><code>Socket._SETSIZE : integer\n</code></pre> <p>The maximum number of sockets that the select function can handle.</p>"},{"location":"types/Socket/#socket_socketinvalid","title":"Socket._SOCKETINVALID","text":"<pre><code>Socket._SOCKETINVALID : any\n</code></pre> <p>The OS value for an invalid socket. This can be used with <code>tcp:getfd</code>and <code>tcp:setfd</code>methods.</p>"},{"location":"types/Socket/#socket_version","title":"Socket._VERSION","text":"<pre><code>Socket._VERSION : string\n</code></pre> <p>This constant has a string describing the current LuaSocket version.</p>"},{"location":"types/SocketError/","title":"alias SocketError","text":"<pre><code>(alias) SocketError = (\"timeout\"|\"closed\")\n    | \"timeout\" -- If there was a timeout during the operation.\n    | \"closed\" -- If the connection was closed before the transmission was completed.\n</code></pre>"},{"location":"types/SocketFamily/","title":"alias SocketFamily","text":"<pre><code>(alias) SocketFamily = (\"inet\"|\"inet6\"|\"unspec\"|\"unknown\")\n    | \"inet\" -- IPv4\n    | \"inet6\" -- IPv6\n    | \"unspec\" -- Unspecified\n    | \"unknown\" -- Unknown\n</code></pre> <p>A string with the family (\"inet\" or \"inet6\")</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/SocketReturnError/","title":"alias SocketReturnError","text":"<pre><code>(alias) SocketReturnError = string?\n</code></pre> <p>Error message in case of failure</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/SocketReturnResult/","title":"alias SocketReturnResult","text":"<pre><code>(alias) SocketReturnResult = 1?\n</code></pre> <p>A 1 in case of success</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/SpanNode/","title":"class SpanNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"span\", nil, {\n  id = \"span (37)\",\n  fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\" },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L476</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/SpecialWhatsitNode/","title":"class SpecialWhatsitNode","text":"<ul> <li>supers: WhatsitNode</li> </ul> <p>There is only one DVI backend whatsit, and it just flushes its content to the output file.</p> <p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"special\", {\n  id = \"whatsit (8)\",\n  subtype = \"special (3)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"data (4)\",\n  },\n})\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/SpecialWhatsitNode/#fields","title":"fields","text":""},{"location":"types/SpecialWhatsitNode/#specialwhatsitnodeattr","title":"SpecialWhatsitNode.attr","text":"<pre><code>SpecialWhatsitNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/SpecialWhatsitNode/#specialwhatsitnodedata","title":"SpecialWhatsitNode.data","text":"<pre><code>SpecialWhatsitNode.data : string\n</code></pre> <p>the <code>special</code> information</p>"},{"location":"types/SplitInsertNode/","title":"class SplitInsertNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"split_insert\", nil, {\n  id = \"split_insert (34)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"height (3)\",\n    \"last_ins_ptr (4)\",\n    \"best_ins_ptr (5)\",\n    \"broken_ptr (6)\",\n    \"broken_ins (7)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L922-L927</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/SplitInsertNode/#fields","title":"fields","text":""},{"location":"types/SplitInsertNode/#splitinsertnodeheight","title":"SplitInsertNode.height","text":"<pre><code>SplitInsertNode.height : integer\n</code></pre>"},{"location":"types/SplitInsertNode/#splitinsertnodelast_ins_ptr","title":"SplitInsertNode.last_ins_ptr","text":"<pre><code>SplitInsertNode.last_ins_ptr : integer\n</code></pre>"},{"location":"types/SplitInsertNode/#splitinsertnodebest_ins_ptr","title":"SplitInsertNode.best_ins_ptr","text":"<pre><code>SplitInsertNode.best_ins_ptr : integer\n</code></pre>"},{"location":"types/SplitInsertNode/#splitinsertnodebroken_ptr","title":"SplitInsertNode.broken_ptr","text":"<pre><code>SplitInsertNode.broken_ptr : integer\n</code></pre>"},{"location":"types/SplitInsertNode/#splitinsertnodebroken_ins","title":"SplitInsertNode.broken_ins","text":"<pre><code>SplitInsertNode.broken_ins : integer\n</code></pre>"},{"location":"types/StartFileCallback/","title":"alias StartFileCallback","text":"<pre><code>(alias) StartFileCallback = fun(category: StartFileCallbackCategory, filename: string)\n</code></pre> <p>This callback replaces the code that prints LuaTeX's when a file is opened like <code>(filename</code> for regular files.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luatexcallbackids.h#L127</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/StartFileCallbackCategory/","title":"alias StartFileCallbackCategory","text":"<pre><code>(alias) StartFileCallbackCategory = (1|2|3|4|5)\n    | 1 -- a normal data file, like a *TeX* source\n    | 2 -- a font map coupling font names to resources\n    | 3 -- an image file (`png`, `pdf`, etc)\n    | 4 -- an embedded font subset\n    | 5 -- a fully embedded font\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/StartPageNumberCallback/","title":"alias StartPageNumberCallback","text":"<pre><code>(alias) StartPageNumberCallback = fun()\n</code></pre> <p>Run actions at the start of typeset page number message reporting.</p> <p>Replaces the code that prints the <code>[</code> and the page number at the begin of <code>shipout</code>. This callback will also override the printing of box information that normally takes place when <code>tracingoutput</code> is positive.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: pdfshipout.c#L61</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/StartRunCallback/","title":"alias StartRunCallback","text":"<pre><code>(alias) StartRunCallback = fun()\n</code></pre> <p>Run actions at the start of the typesetting run.</p> <p>This callback replaces the code that prints LuaTeX's banner. Note that for successful use, this callback has to be set in the Lua initialization script, otherwise it will be seen only after the run has already started.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: printing.c#L557</li> <li>Corresponding C source code: texfileio.c#L917</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/StatusInfo/","title":"class StatusInfo","text":"<p>Reference:</p> <ul> <li>Corresponding C source code: lstatslib.c#L289-L389</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/StatusInfo/#fields","title":"fields","text":""},{"location":"types/StatusInfo/#statusinfooutput_active","title":"StatusInfo.output_active","text":"<pre><code>StatusInfo.output_active : boolean\n</code></pre> <p><code>true</code> if the output routine is active, for example <code>false</code>.</p>"},{"location":"types/StatusInfo/#statusinfobest_page_break","title":"StatusInfo.best_page_break","text":"<pre><code>StatusInfo.best_page_break : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>The current best break (a node)</p>"},{"location":"types/StatusInfo/#statusinfofilename","title":"StatusInfo.filename","text":"<pre><code>StatusInfo.filename : string\n</code></pre> <p>The name of the current input file , for example <code>./list.tex</code>.</p>"},{"location":"types/StatusInfo/#statusinfoinputid","title":"StatusInfo.inputid","text":"<pre><code>StatusInfo.inputid : integer\n</code></pre> <p>The numeric id of the current input, for example <code>2118770</code>.</p>"},{"location":"types/StatusInfo/#statusinfolinenumber","title":"StatusInfo.linenumber","text":"<pre><code>StatusInfo.linenumber : integer\n</code></pre> <p>The location in the current input file, for example <code>12</code>.</p>"},{"location":"types/StatusInfo/#statusinfolasterrorstring","title":"StatusInfo.lasterrorstring","text":"<pre><code>StatusInfo.lasterrorstring : string\n</code></pre> <p>The last TeX error string.</p>"},{"location":"types/StatusInfo/#statusinfolastluaerrorstring","title":"StatusInfo.lastluaerrorstring","text":"<pre><code>StatusInfo.lastluaerrorstring : string\n</code></pre> <p>The last Lua error string.</p>"},{"location":"types/StatusInfo/#statusinfolastwarningtag","title":"StatusInfo.lastwarningtag","text":"<pre><code>StatusInfo.lastwarningtag : string\n</code></pre> <p>The last warning string.</p>"},{"location":"types/StatusInfo/#statusinfolastwarningstring","title":"StatusInfo.lastwarningstring","text":"<pre><code>StatusInfo.lastwarningstring : string\n</code></pre> <p>The last warning tag, normally an indication of in what part.</p>"},{"location":"types/StatusInfo/#statusinfolasterrorcontext","title":"StatusInfo.lasterrorcontext","text":"<pre><code>StatusInfo.lasterrorcontext : string\n</code></pre> <p>The last error context string (with newlines).</p>"},{"location":"types/StatusInfo/#statusinfopdf_gone","title":"StatusInfo.pdf_gone","text":"<pre><code>StatusInfo.pdf_gone : integer\n</code></pre> <p>Written PDF bytes, for example <code>0</code>.</p>"},{"location":"types/StatusInfo/#statusinfopdf_ptr","title":"StatusInfo.pdf_ptr","text":"<pre><code>StatusInfo.pdf_ptr : integer\n</code></pre> <p>Not yet written PDF bytes, for example <code>0</code>.</p>"},{"location":"types/StatusInfo/#statusinfodvi_gone","title":"StatusInfo.dvi_gone","text":"<pre><code>StatusInfo.dvi_gone : integer\n</code></pre> <p>Written DVI bytes, for example <code>1631423304</code>.</p>"},{"location":"types/StatusInfo/#statusinfodvi_ptr","title":"StatusInfo.dvi_ptr","text":"<pre><code>StatusInfo.dvi_ptr : integer\n</code></pre> <p>Not yet written DVI bytes, for example <code>-1858237624</code>.</p>"},{"location":"types/StatusInfo/#statusinfototal_pages","title":"StatusInfo.total_pages","text":"<pre><code>StatusInfo.total_pages : integer\n</code></pre> <p>The total pages of written pages, for example <code>0</code>.</p>"},{"location":"types/StatusInfo/#statusinfooutput_file_name","title":"StatusInfo.output_file_name","text":"<pre><code>StatusInfo.output_file_name : string\n</code></pre> <p>The name of the PDF or DVI file.</p>"},{"location":"types/StatusInfo/#statusinfolog_name","title":"StatusInfo.log_name","text":"<pre><code>StatusInfo.log_name : string\n</code></pre> <p>The name of the log file, for example <code>list.log</code>.</p>"},{"location":"types/StatusInfo/#statusinfobanner","title":"StatusInfo.banner","text":"<pre><code>StatusInfo.banner : string\n</code></pre> <p>The terminal display banner, for example <code>This is LuaHBTeX, Version 1.15.0 (TeX Live 2022)</code>.</p>"},{"location":"types/StatusInfo/#statusinfoluatex_version","title":"StatusInfo.luatex_version","text":"<pre><code>StatusInfo.luatex_version : integer\n</code></pre> <p>The LuaTeX version number, for example <code>115</code>.</p>"},{"location":"types/StatusInfo/#statusinfoluatex_revision","title":"StatusInfo.luatex_revision","text":"<pre><code>StatusInfo.luatex_revision : integer\n</code></pre> <p>The LuaTeX revision string.</p>"},{"location":"types/StatusInfo/#statusinfodevelopment_id","title":"StatusInfo.development_id","text":"<pre><code>StatusInfo.development_id : integer\n</code></pre> <p>for example <code>7509</code>.</p>"},{"location":"types/StatusInfo/#statusinfoluatex_hashtype","title":"StatusInfo.luatex_hashtype","text":"<pre><code>StatusInfo.luatex_hashtype : string\n</code></pre> <p>The hash method used (in LuaJITTEX), for example <code>lua</code>.</p>"},{"location":"types/StatusInfo/#statusinfoluatex_hashchars","title":"StatusInfo.luatex_hashchars","text":"<pre><code>StatusInfo.luatex_hashchars : integer\n</code></pre> <p>The length to which Lua hashes strings (<code>2^n</code>), for example <code>6</code>.</p>"},{"location":"types/StatusInfo/#statusinfoluatex_engine","title":"StatusInfo.luatex_engine","text":"<pre><code>StatusInfo.luatex_engine : string\n</code></pre> <p>The LuaTeX engine identifier, for example <code>luahbtex</code>.</p>"},{"location":"types/StatusInfo/#statusinfoini_version","title":"StatusInfo.ini_version","text":"<pre><code>StatusInfo.ini_version : boolean\n</code></pre> <p><code>true</code> if this is an iniTeX run, for example <code>false</code>.</p>"},{"location":"types/StatusInfo/#statusinfoshell_escape","title":"StatusInfo.shell_escape","text":"<pre><code>StatusInfo.shell_escape : integer\n</code></pre> <p><code>0</code> means disabled, <code>1</code> means anything is permitted, and <code>2</code> is restricted, for example <code>2</code>.</p>"},{"location":"types/StatusInfo/#statusinfosafer_option","title":"StatusInfo.safer_option","text":"<pre><code>StatusInfo.safer_option : integer\n</code></pre> <p><code>1</code> means safer is enforced, for example <code>0</code>.</p>"},{"location":"types/StatusInfo/#statusinfokpse_used","title":"StatusInfo.kpse_used","text":"<pre><code>StatusInfo.kpse_used : integer\n</code></pre> <p><code>1</code> means that kpse is used, for example <code>1</code>.</p>"},{"location":"types/StatusInfo/#statusinfovar_used","title":"StatusInfo.var_used","text":"<pre><code>StatusInfo.var_used : integer\n</code></pre> <p>The variable (one-word) memory in use, for example <code>309</code>.</p>"},{"location":"types/StatusInfo/#statusinfodyn_used","title":"StatusInfo.dyn_used","text":"<pre><code>StatusInfo.dyn_used : integer\n</code></pre> <p>The token (multi-word) memory in use, for example <code>383564</code>.</p>"},{"location":"types/StatusInfo/#statusinfostr_ptr","title":"StatusInfo.str_ptr","text":"<pre><code>StatusInfo.str_ptr : integer\n</code></pre> <p>The string pointer, for example <code>2119239</code>.</p>"},{"location":"types/StatusInfo/#statusinfoinit_str_ptr","title":"StatusInfo.init_str_ptr","text":"<pre><code>StatusInfo.init_str_ptr : integer\n</code></pre> <p>The iniTeX string pointer, for example <code>2118768</code>.</p>"},{"location":"types/StatusInfo/#statusinfomax_strings","title":"StatusInfo.max_strings","text":"<pre><code>StatusInfo.max_strings : integer\n</code></pre> <p>The maximum allowed strings, for example <code>500000</code>.</p>"},{"location":"types/StatusInfo/#statusinfopool_ptr","title":"StatusInfo.pool_ptr","text":"<pre><code>StatusInfo.pool_ptr : string\n</code></pre> <p>The pool index, for example <code>393692</code>.</p>"},{"location":"types/StatusInfo/#statusinfoinit_pool_ptr","title":"StatusInfo.init_pool_ptr","text":"<pre><code>StatusInfo.init_pool_ptr : integer\n</code></pre> <p>The iniTeX string pool index, for example <code>0</code>.</p>"},{"location":"types/StatusInfo/#statusinfopool_size","title":"StatusInfo.pool_size","text":"<pre><code>StatusInfo.pool_size : integer\n</code></pre> <p>The current size allocated for string characters, for example <code>20000</code>.</p>"},{"location":"types/StatusInfo/#statusinfovar_mem_max","title":"StatusInfo.var_mem_max","text":"<pre><code>StatusInfo.var_mem_max : integer\n</code></pre> <p>Maximum variable memory of allocated words for nodes, for example <code>100000</code>.</p>"},{"location":"types/StatusInfo/#statusinfonode_mem_usage","title":"StatusInfo.node_mem_usage","text":"<pre><code>StatusInfo.node_mem_usage : string\n</code></pre> <p>A string giving insight into currently used nodes, for example <code>2 hlist, 1 rule, 1 dir, 3 kern, 1 glyph, 3 attribute, 48 glue_spec, 3 attribute_list, 1 write</code>.</p>"},{"location":"types/StatusInfo/#statusinfofix_mem_max","title":"StatusInfo.fix_mem_max","text":"<pre><code>StatusInfo.fix_mem_max : integer\n</code></pre> <p>The maximum number of allocated words for tokens, for example <code>1977958</code>.</p>"},{"location":"types/StatusInfo/#statusinfofix_mem_min","title":"StatusInfo.fix_mem_min","text":"<pre><code>StatusInfo.fix_mem_min : integer\n</code></pre> <p>The minimum number of allocated words for tokens, for example <code>0</code>.</p>"},{"location":"types/StatusInfo/#statusinfofix_mem_end","title":"StatusInfo.fix_mem_end","text":"<pre><code>StatusInfo.fix_mem_end : integer\n</code></pre> <p>maximum number of used tokens, for example <code>1869998</code>.</p>"},{"location":"types/StatusInfo/#statusinfocs_count","title":"StatusInfo.cs_count","text":"<pre><code>StatusInfo.cs_count : integer\n</code></pre> <p>The count of control sequences, for example <code>20658</code>.</p>"},{"location":"types/StatusInfo/#statusinfohash_size","title":"StatusInfo.hash_size","text":"<pre><code>StatusInfo.hash_size : integer\n</code></pre> <p>The size of the hash, for example <code>65536</code>.</p>"},{"location":"types/StatusInfo/#statusinfohash_extra","title":"StatusInfo.hash_extra","text":"<pre><code>StatusInfo.hash_extra : integer\n</code></pre> <p>The extra allowed hash, for example <code>600000</code>.</p>"},{"location":"types/StatusInfo/#statusinfofont_ptr","title":"StatusInfo.font_ptr","text":"<pre><code>StatusInfo.font_ptr : integer\n</code></pre> <p>The active fonts pointer, for example <code>15</code>.</p>"},{"location":"types/StatusInfo/#statusinfomax_in_stack","title":"StatusInfo.max_in_stack","text":"<pre><code>StatusInfo.max_in_stack : integer\n</code></pre> <p>The maximum of the used input stack entries, for example <code>33</code>.</p>"},{"location":"types/StatusInfo/#statusinfomax_nest_stack","title":"StatusInfo.max_nest_stack","text":"<pre><code>StatusInfo.max_nest_stack : integer\n</code></pre> <p>The maximum of the used nesting stack entries, for example <code>0</code>.</p>"},{"location":"types/StatusInfo/#statusinfomax_param_stack","title":"StatusInfo.max_param_stack","text":"<pre><code>StatusInfo.max_param_stack : integer\n</code></pre> <p>The maximum of the used parameter stack entries, for example <code>37</code>.</p>"},{"location":"types/StatusInfo/#statusinfomax_buf_stack","title":"StatusInfo.max_buf_stack","text":"<pre><code>StatusInfo.max_buf_stack : integer\n</code></pre> <p>The maximum used buffer position, for example <code>126</code>.</p>"},{"location":"types/StatusInfo/#statusinfomax_save_stack","title":"StatusInfo.max_save_stack","text":"<pre><code>StatusInfo.max_save_stack : integer\n</code></pre> <p>The maximum of the used save stack entries, for example <code>50</code>.</p>"},{"location":"types/StatusInfo/#statusinfostack_size","title":"StatusInfo.stack_size","text":"<pre><code>StatusInfo.stack_size : integer\n</code></pre> <p>The input stack size, for example <code>10000</code>.</p>"},{"location":"types/StatusInfo/#statusinfonest_size","title":"StatusInfo.nest_size","text":"<pre><code>StatusInfo.nest_size : integer\n</code></pre> <p>The nesting stack size, for example <code>1000</code>.</p>"},{"location":"types/StatusInfo/#statusinfoparam_size","title":"StatusInfo.param_size","text":"<pre><code>StatusInfo.param_size : integer\n</code></pre> <p>The parameter stack size, for example <code>20000</code>.</p>"},{"location":"types/StatusInfo/#statusinfobuf_size","title":"StatusInfo.buf_size","text":"<pre><code>StatusInfo.buf_size : integer\n</code></pre> <p>The current allocated size of the line buffer, for example <code>200000</code>.</p>"},{"location":"types/StatusInfo/#statusinfosave_size","title":"StatusInfo.save_size","text":"<pre><code>StatusInfo.save_size : integer\n</code></pre> <p>The save stack size, for example <code>200000</code>.</p>"},{"location":"types/StatusInfo/#statusinfoinput_ptr","title":"StatusInfo.input_ptr","text":"<pre><code>StatusInfo.input_ptr : integer\n</code></pre> <p>The level of input we're at, for example <code>1</code>.</p>"},{"location":"types/StatusInfo/#statusinfoobj_ptr","title":"StatusInfo.obj_ptr","text":"<pre><code>StatusInfo.obj_ptr : integer\n</code></pre> <p>The PDF object pointer.</p>"},{"location":"types/StatusInfo/#statusinfoobj_tab_size","title":"StatusInfo.obj_tab_size","text":"<pre><code>StatusInfo.obj_tab_size : integer\n</code></pre> <p>The PDF object table size, for example <code>1000</code>.</p>"},{"location":"types/StatusInfo/#statusinfopdf_os_cntr","title":"StatusInfo.pdf_os_cntr","text":"<pre><code>StatusInfo.pdf_os_cntr : integer\n</code></pre> <p>The PDF object stream pointer, for example <code>0</code>.</p>"},{"location":"types/StatusInfo/#statusinfopdf_os_objidx","title":"StatusInfo.pdf_os_objidx","text":"<pre><code>StatusInfo.pdf_os_objidx : integer\n</code></pre> <p>The PDF object stream index, for example <code>0</code>.</p>"},{"location":"types/StatusInfo/#statusinfopdf_dest_names_ptr","title":"StatusInfo.pdf_dest_names_ptr","text":"<pre><code>StatusInfo.pdf_dest_names_ptr : integer\n</code></pre> <p>max PDF destination pointer, for example <code>0</code>.</p>"},{"location":"types/StatusInfo/#statusinfodest_names_size","title":"StatusInfo.dest_names_size","text":"<pre><code>StatusInfo.dest_names_size : integer\n</code></pre> <p>The PDF destination table size, for example <code>1000</code>.</p>"},{"location":"types/StatusInfo/#statusinfopdf_mem_ptr","title":"StatusInfo.pdf_mem_ptr","text":"<pre><code>StatusInfo.pdf_mem_ptr : integer\n</code></pre> <p>The PDF memory used, for example <code>1</code>.</p>"},{"location":"types/StatusInfo/#statusinfopdf_mem_size","title":"StatusInfo.pdf_mem_size","text":"<pre><code>StatusInfo.pdf_mem_size : integer\n</code></pre> <p>The PDF memory size, for example <code>10000</code>.</p>"},{"location":"types/StatusInfo/#statusinfolargest_used_mark","title":"StatusInfo.largest_used_mark","text":"<pre><code>StatusInfo.largest_used_mark : integer\n</code></pre> <p>The largest referenced marks class, for example <code>0</code>.</p>"},{"location":"types/StatusInfo/#statusinfoluabytecodes","title":"StatusInfo.luabytecodes","text":"<pre><code>StatusInfo.luabytecodes : integer\n</code></pre> <p>The active Lua bytecode registers, for example <code>1</code>.</p>"},{"location":"types/StatusInfo/#statusinfoluabytecode_bytes","title":"StatusInfo.luabytecode_bytes","text":"<pre><code>StatusInfo.luabytecode_bytes : integer\n</code></pre> <p>The used bytes in the Lua bytecode registers, for example <code>32</code>.</p>"},{"location":"types/StatusInfo/#statusinfoluastate_bytes","title":"StatusInfo.luastate_bytes","text":"<pre><code>StatusInfo.luastate_bytes : integer\n</code></pre> <p>The bytes in use by Lua interpreters, for example <code>54667449</code>.</p>"},{"location":"types/StatusInfo/#statusinfocallbacks","title":"StatusInfo.callbacks","text":"<pre><code>StatusInfo.callbacks : integer\n</code></pre> <p>The total number of executed callbacks so far, for example <code>9</code>.</p>"},{"location":"types/StatusInfo/#statusinfoindirect_callbacks","title":"StatusInfo.indirect_callbacks","text":"<pre><code>StatusInfo.indirect_callbacks : integer\n</code></pre> <p>The total number of those callbacks that were themselves a result of other callbacks (e.g. file readers), for example <code>0</code>.</p>"},{"location":"types/StatusInfo/#statusinfosaved_callbacks","title":"StatusInfo.saved_callbacks","text":"<pre><code>StatusInfo.saved_callbacks : integer\n</code></pre> <p>alias for <code>indirect_callbacks</code> for example <code>0</code>.</p>"},{"location":"types/StatusInfo/#statusinfolate_callbacks","title":"StatusInfo.late_callbacks","text":"<pre><code>StatusInfo.late_callbacks : integer\n</code></pre> <p>for example <code>0</code>.</p>"},{"location":"types/StatusInfo/#statusinfodirect_callbacks","title":"StatusInfo.direct_callbacks","text":"<pre><code>StatusInfo.direct_callbacks : integer\n</code></pre> <p>for example <code>10</code>.</p>"},{"location":"types/StatusInfo/#statusinfofunction_callbacks","title":"StatusInfo.function_callbacks","text":"<pre><code>StatusInfo.function_callbacks : integer\n</code></pre> <p>of active fonts, for example <code>238</code>.</p>"},{"location":"types/StatusInfo/#statusinfolc_collate","title":"StatusInfo.lc_collate","text":"<pre><code>StatusInfo.lc_collate : string\n</code></pre> <p>the value of <code>LC_COLLATE</code> at startup time (becomes <code>C</code> at startup), for example <code>en_US.UTF-8</code>.</p>"},{"location":"types/StatusInfo/#statusinfolc_ctype","title":"StatusInfo.lc_ctype","text":"<pre><code>StatusInfo.lc_ctype : string\n</code></pre> <p>the value of <code>LC_CTYPE</code> at startup time (becomes <code>C</code> at startup), for example <code>en_US.UTF-8</code>.</p>"},{"location":"types/StatusInfo/#statusinfolc_numeric","title":"StatusInfo.lc_numeric","text":"<pre><code>StatusInfo.lc_numeric : string\n</code></pre> <p>the value of <code>LC_NUMERIC</code> at startup time, for example <code>de_DE.UTF-8</code>.</p>"},{"location":"types/StopFileCallback/","title":"alias StopFileCallback","text":"<pre><code>(alias) StopFileCallback = fun(category: integer)\n</code></pre> <p>This callback replaces the code that prints LuaTeX's when a file is closed like the <code>)</code> for regular files.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luatexcallbackids.h#L150</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/StopPageNumberCallback/","title":"alias StopPageNumberCallback","text":"<pre><code>(alias) StopPageNumberCallback = fun()\n</code></pre> <p>Run actions at the end of typeset page number message reporting.</p> <p>Replaces the code that prints the <code>]</code> at the end of <code>shipout</code>.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: pdfshipout.c#L62</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/StopRunCallback/","title":"alias StopRunCallback","text":"<pre><code>(alias) StopRunCallback = fun()\n</code></pre> <p>Run actions just before the end of the typesetting run.</p> <p>This callback replaces the code that prints LuaTeX's statistics and \u201coutput written to\u201d messages. The engine can still do housekeeping and therefore you should not rely on this hook for postprocessing the PDF or log file.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: mainbody.c#L609</li> <li>Corresponding C source code: dvigen.c#L1447</li> <li>Corresponding C source code: pdfgen.c#L2243</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/StyleNode/","title":"class StyleNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"style\", nil, {\n  id = \"style (16)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"style (4)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L929-L931</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/StyleNode/#fields","title":"fields","text":""},{"location":"types/StyleNode/#stylenodeattr","title":"StyleNode.attr","text":"<pre><code>StyleNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/StyleNode/#stylenodestyle","title":"StyleNode.style","text":"<pre><code>StyleNode.style : string\n</code></pre> <p>contains the style</p>"},{"location":"types/SubBoxNode/","title":"class SubBoxNode","text":"<ul> <li>supers: Node</li> </ul> <p>For subsidiary list items</p> <p>Example:</p> <pre><code>assert.node_type(\"sub_box\", nil, {\n  id = \"sub_box (24)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"head (4)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L933-L935</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/SubBoxNode/#fields","title":"fields","text":""},{"location":"types/SubBoxNode/#subboxnodeattr","title":"SubBoxNode.attr","text":"<pre><code>SubBoxNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/SubBoxNode/#subboxnodehead","title":"SubBoxNode.head","text":"<pre><code>SubBoxNode.head : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of nodes. <code>head</code> points to a \u201cnormal\u201d vbox or hbox.</p>"},{"location":"types/SubMlistNode/","title":"class SubMlistNode","text":"<ul> <li>supers: Node</li> </ul> <p>For subsidiary list items</p> <p>Example:</p> <pre><code>assert.node_type(\"sub_mlist\", nil, {\n  id = \"sub_mlist (25)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"head (4)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L937-L939</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/SubMlistNode/#fields","title":"fields","text":""},{"location":"types/SubMlistNode/#submlistnodeattr","title":"SubMlistNode.attr","text":"<pre><code>SubMlistNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/SubMlistNode/#submlistnodehead","title":"SubMlistNode.head","text":"<pre><code>SubMlistNode.head : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of nodes. <code>head</code> points to a math list that is yet to be converted.</p>"},{"location":"types/SyntexMode/","title":"alias SyntexMode","text":"<pre><code>(alias) SyntexMode = (0|1|2|3|4)\n    | 0 -- is the default and used normal synctex logic\n    | 1 -- uses the values set by the next helpers\n    | 2 -- sets for glyph nodes\n    | 3 -- sets glyph and glue nodes\n    | 4 -- sets only glyph modes\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/TCPOption/","title":"alias TCPOption","text":"<pre><code>(alias) TCPOption = (\"keepalive\"|\"linger\"|\"reuseaddr\"|\"tcp-nodelay\"|\"tcp-keepidle\"|\"tcp-keepcnt\"|\"tcp-keepintvl\"|\"tcp-defer-accept\"|\"tcp-fastopen\"|\"tcp-fastopen-connect\"...)\n    | \"keepalive\" -- Setting this option to `true` enables the periodic transmission of messages on a connected socket. Should the connected party fail to respond to these messages, the connection is considered broken and processes using the socket are notified;\n    | \"linger\" -- Controls the action taken when unsent data are queued on a socket and a close is performed. The value is a table with a boolean entry `on` and a numeric entry for the time interval `timeout` in seconds. If the `on` field is set to `true`, the system will block the process on the close attempt until it is able to transmit the data or until `timeout` has passed. If `on` is `false` and a `close` is issued, the system will process the `close` in a manner that allows the process to continue as quickly as possible. I do not advise you to set this to anything other than zero;\n    | \"reuseaddr\" -- Setting this option indicates that the rules used in validating addresses supplied in a call to bind should allow reuse of local addresses;\n    | \"tcp-nodelay\" -- Setting this option to `true` disables the Nagle's algorithm for the connection;\n    | \"tcp-keepidle\" -- value in seconds for `TCP_KEEPIDLE` **Linux only!!**\n    | \"tcp-keepcnt\" -- value for `TCP_KEEPCNT` **Linux only!!**\n    | \"tcp-keepintvl\" -- value for `TCP_KEEPINTVL` **Linux only!!**\n    | \"tcp-defer-accept\" -- value for `TCP_DEFER_ACCEPT` **Linux only!!**\n    | \"tcp-fastopen\" -- value for `TCP_FASTOPEN` **Linux only!!**\n    | \"tcp-fastopen-connect\" -- value for `TCP_FASTOPEN_CONNECT` **Linux only!!**\n    | \"ipv6-v6only\" -- Setting this option to `true` restricts an inet6 socket to sending and receiving only IPv6 packets.\nThe descriptions above come from the man pages.\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/TCPShutdownMode/","title":"alias TCPShutdownMode","text":"<pre><code>(alias) TCPShutdownMode = (\"both\"|\"send\"|\"receive\")\n    | \"both\" -- Disallow further sends and receives on the object.\n    | \"send\" -- Disallow further sends on the object.\n    | \"receive\" -- Disallow further receives on the object.\n</code></pre>"},{"location":"types/TCPSocketClient/","title":"class TCPSocketClient","text":"<ul> <li>supers: TCPSocketMaster</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/TCPSocketClient/#methods","title":"methods","text":""},{"location":"types/TCPSocketClient/#tcpsocketclientgetoption","title":"TCPSocketClient.getoption","text":"<pre><code>function TCPSocketClient.getoption(option: TCPOption)\n -&gt;  any?\n -&gt;  string?\n</code></pre> <p>@return  - The option value in case of success, or nil followed by an error message otherwise.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - The option value in case of success, or nil followed by an error message otherwise.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Gets options for the TCP object. See <code>setoption</code> for description of the option names and values.</p>"},{"location":"types/TCPSocketClient/#tcpsocketclientgetpeername","title":"TCPSocketClient.getpeername","text":"<pre><code>function TCPSocketClient.getpeername()\n -&gt;  string?\n -&gt;  integer?\n -&gt;  SocketFamily?\n</code></pre> <p>@return  - The IP address of the peer, the port number that the peer is using for the connection, and the family. In case of error, returns <code>nil</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - The IP address of the peer, the port number that the peer is using for the connection, and the family. In case of error, returns <code>nil</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - The IP address of the peer, the port number that the peer is using for the connection, and the family. In case of error, returns <code>nil</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Returns information about the remote side of a connected client object.</p> <p>Note: It makes no sense to call this method on server objects.</p>"},{"location":"types/TCPSocketClient/#tcpsocketclientreceive","title":"TCPSocketClient.receive","text":"<p><pre><code>function TCPSocketClient.receive(\n  pattern: (ReceivePatternMode|number)?,\n  prefix: string?\n)\n -&gt;  string?\n -&gt;  (SocketError|string)?\n</code></pre> @param <code>pattern</code> - The default is \"*l\"</p> <p>@param <code>prefix</code> - Optional string to be concatenated to the beginning of any received data before return.</p> <p>@return  - Returns the received pattern when successful, otherwise nil and an error message.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - Returns the received pattern when successful, otherwise nil and an error message.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Reads data from a client object, according to the specified read pattern. Patterns follow the Lua file I/O format, and the difference in performance between all patterns is negligible.</p> <p>Important note: This function was changed severely. It used to support multiple patterns (but I have never seen this feature used) and now it doesn't anymore. Partial results used to be returned in the same way as successful results. This last feature violated the idea that all functions should return nil on error. Thus it was changed too.</p>"},{"location":"types/TCPSocketClient/#tcpsocketclientsend","title":"TCPSocketClient.send","text":"<p><pre><code>function TCPSocketClient.send(\n  data: string,\n  i: integer?,\n  j: integer?\n)\n -&gt;  integer?\n -&gt;  (SocketError|string)?\n -&gt;  integer?\n</code></pre> @param <code>data</code> - The string to be sent.</p> <p>@return  - On success the number of bytes sent, otherwise nil followed by an error message, followed by the index of the last byte within <code>[i, j]</code> that has been sent. You might want to try again from the byte following that.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - On success the number of bytes sent, otherwise nil followed by an error message, followed by the index of the last byte within <code>[i, j]</code> that has been sent. You might want to try again from the byte following that.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - On success the number of bytes sent, otherwise nil followed by an error message, followed by the index of the last byte within <code>[i, j]</code> that has been sent. You might want to try again from the byte following that.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Sends data through client object.</p> <p>The optional arguments <code>i</code> and <code>j</code> work exactly like the standard <code>string.sub</code> Lua function to allow the selection of a substring to be sent.</p> <p>Note: Output is not buffered. For small strings, it is always better to concatenate them in Lua (with the '..' operator) and send the result in one call instead of calling the method several times.</p>"},{"location":"types/TCPSocketClient/#tcpsocketclientsetoption","title":"TCPSocketClient.setoption","text":"<p><pre><code>function TCPSocketClient.setoption(\n  option: TCPOption,\n  value: any\n)\n -&gt;  1?\n -&gt;  string?\n</code></pre> @param <code>option</code> - A string with the option name</p> <p>@param <code>value</code> - Depends on the option being set</p> <p>@return  - 1 on success, nil and an error message otherwise.</p> <p>@return  - 1 on success, nil and an error message otherwise.</p> <p>Sets options for the TCP object. Options are only needed by low-level or time-critical applications. You should only modify an option if you are sure you need it.</p>"},{"location":"types/TCPSocketClient/#tcpsocketclientshutdown","title":"TCPSocketClient.shutdown","text":"<p><pre><code>function TCPSocketClient.shutdown(mode: TCPShutdownMode) -&gt;  1\n</code></pre> @param <code>mode</code> - Determines which way of the connection should be shut down.</p> <p>@return  - Always returns 1.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Shuts down part of a full-duplex connection.</p>"},{"location":"types/TCPSocketMaster/","title":"class TCPSocketMaster","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/TCPSocketMaster/#methods","title":"methods","text":""},{"location":"types/TCPSocketMaster/#tcpsocketmasterbind","title":"TCPSocketMaster.bind","text":"<pre><code>function TCPSocketMaster.bind(\n  address: string,\n  port: integer\n)\n -&gt;  1?\n -&gt;  string?\n</code></pre> <p>Binds a master object to address and port on the local host.</p> <p>Address can be an IP address or a host name. Port must be an integer number in the range [0..64K). If address is <code>'*'</code>, the system binds to all local interfaces using the <code>INADDR_ANY</code> constant or <code>IN6ADDR_ANY_INIT</code>, according to the family. If <code>port</code> is <code>0</code>, the system automatically chooses an ephemeral port.</p> <p>In case of success, the method returns <code>1</code>. In case of error, the method returns <code>nil</code> followed by an error message.</p> <p>On success, the type changes to <code>TCPSocketServer</code>, and you should cast it as such.</p> <p>Note: The function <code>socket.bind</code> is available and is a shortcut for the creation of server sockets.</p>"},{"location":"types/TCPSocketMaster/#tcpsocketmasterclose","title":"TCPSocketMaster.close","text":"<pre><code>function TCPSocketMaster.close()\n</code></pre> <p>Closes a TCP object. The internal socket used by the object is closed and the local address to which the object was bound is made available to other applications. No further operations (except for further calls to the close method) are allowed on a closed socket.</p> <p>Note: It is important to close all used sockets once they are not needed, since, in many systems, each socket uses a file descriptor, which are limited system resources. Garbage-collected objects are automatically closed before destruction, though. \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/TCPSocketMaster/#tcpsocketmasterconnect","title":"TCPSocketMaster.connect","text":"<p><pre><code>function TCPSocketMaster.connect(\n  address: string,\n  port: integer\n)\n -&gt;  1?\n -&gt;  string?\n</code></pre> @param <code>address</code> - IP address or a host name</p> <p>@param <code>port</code> - TCP port, in the range [1..64K)</p> <p>@return  - In case of error, the method returns nil followed by a string describing the error. In case of success, the method returns 1. \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - In case of error, the method returns nil followed by a string describing the error. In case of success, the method returns 1. \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Attempts to connect a master object to a remote host, transforming it into a client object. Client objects support methods <code>send</code>, <code>receive</code>, <code>getsockname</code>, <code>getpeername</code>, <code>settimeout</code>, and <code>close</code>.</p> <p>On success, the type changes to <code>TCPClient</code>, and you should cast it as such.</p> <p>Note: The function <code>socket.connect</code> is available and is a shortcut for the creation of client sockets. Note: Starting with LuaSocket 2.0, the <code>settimeout</code> method affects the behavior of connect, causing it to return with an error in case of a timeout. If that happens, you can still call socket.select with the socket in the sendt table. The socket will be writable when the connection is established. Note: Starting with LuaSocket 3.0, the host name resolution depends on whether the socket was created by socket.tcp, socket.tcp4 or socket.tcp6. Addresses from the appropriate family (or both) are tried in the order returned by the resolver until the first success or until the last failure. If the timeout was set to zero, only the first address is tried.</p>"},{"location":"types/TCPSocketMaster/#tcpsocketmasterdirty","title":"TCPSocketMaster.dirty","text":"<pre><code>function TCPSocketMaster.dirty() -&gt;  boolean\n</code></pre> <p>@return  - <code>true</code> if there is any data in the read buffer, <code>false</code> otherwise.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Check the read buffer status.</p> <p>Note: This is an internal method, use at your own risk.</p>"},{"location":"types/TCPSocketMaster/#tcpsocketmastergetfd","title":"TCPSocketMaster.getfd","text":"<pre><code>function TCPSocketMaster.getfd() -&gt;  integer\n</code></pre> <p>@return  - The descriptor or handle. <code>-1</code> if the object has been closed. <code>_SOCKETINVALID</code> if it is an invalid socket.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Get the underling socket descriptor or handle associated to the object.</p> <p>Note: This is an internal method. Unlikely to be portable. use at your own risk.</p>"},{"location":"types/TCPSocketMaster/#tcpsocketmastergetsockname","title":"TCPSocketMaster.getsockname","text":"<pre><code>function TCPSocketMaster.getsockname()\n -&gt;  string?\n -&gt;  integer?\n -&gt;  SocketFamily?\n</code></pre> <p>@return  - The IP address of the peer, the port number that the peer is using for the connection, and the family. In case of error, returns <code>nil</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - The IP address of the peer, the port number that the peer is using for the connection, and the family. In case of error, returns <code>nil</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - The IP address of the peer, the port number that the peer is using for the connection, and the family. In case of error, returns <code>nil</code>.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Returns the local address information associated to the object.</p>"},{"location":"types/TCPSocketMaster/#tcpsocketmastergettimeout","title":"TCPSocketMaster.gettimeout","text":"<pre><code>function TCPSocketMaster.gettimeout()\n -&gt;  number\n -&gt;  number\n</code></pre> <p>@return  - Current block timeout, current total timeout.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - Current block timeout, current total timeout.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Returns the current block timeout followed by the current total timeout.</p>"},{"location":"types/TCPSocketMaster/#tcpsocketmasterlisten","title":"TCPSocketMaster.listen","text":"<p><pre><code>function TCPSocketMaster.listen(backlog: integer)\n -&gt;  1?\n -&gt;  string?\n</code></pre> @param <code>backlog</code> - The number number of client connections that can be queued waiting for service. If the queue is full and another client attempts connection, the connection is refused.</p> <p>@return  - Returns 1 on success, nil and an error on failure.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - Returns 1 on success, nil and an error on failure.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Specifies the socket is willing to receive connections, transforming the object into a server object. Server objects support the <code>accept</code>, <code>getsockname</code>, <code>setoption</code>, <code>settimeout</code>, and <code>close</code> methods.</p> <p>On success, the type changes to <code>TCPSocketServer</code>, and you should cast it as such.</p>"},{"location":"types/TCPSocketMaster/#tcpsocketmastersetstats","title":"TCPSocketMaster.setstats","text":"<p><pre><code>function TCPSocketMaster.setstats(\n  received: number,\n  sent: number,\n  age: number\n) -&gt;  1?\n</code></pre> @param <code>received</code> - Bytes received</p> <p>@param <code>sent</code> - Byte sent</p> <p>@param <code>age</code> - Age in seconds</p> <p>@return  - 1 on success, nil otherwise. \ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Resets accounting information on the socket, useful for throttling of bandwidth.</p>"},{"location":"types/TCPSocketMaster/#tcpsocketmastersettimeout","title":"TCPSocketMaster.settimeout","text":"<p><pre><code>function TCPSocketMaster.settimeout(\n  value: number?,\n  mode: TCPTimeoutMode?\n)\n</code></pre> @param <code>value</code> - Time to wait, in seconds. Use <code>nil</code> or negative to block indefinitely.</p> <p>@param <code>mode</code> - The default mode is \"b\"</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Changes the timeout values for the object. By default, all I/O operations are blocking. That is, any call to the methods <code>send</code>, <code>receive</code>, and <code>accept</code> will block indefinitely, until the operation completes. The <code>settimeout</code> method defines a limit on the amount of time the I/O methods can block. When a timeout is set and the specified amount of time has elapsed, the affected methods give up and fail with an error code.</p> <p>Note: although timeout values have millisecond precision in LuaSocket, large blocks can cause I/O functions not to respect timeout values due to the time the library takes to transfer blocks to and from the OS and to and from the Lua interpreter. Also, function that accept host names and perform automatic name resolution might be blocked by the resolver for longer than the specified timeout value.</p> <p>Note: The old timeout method is deprecated. The name has been changed for sake of uniformity, since all other method names already contained verbs making their imperative nature obvious.</p>"},{"location":"types/TCPSocketMaster/#tcpsocketmastersetfd","title":"TCPSocketMaster.setfd","text":"<pre><code>function TCPSocketMaster.setfd(fd: integer)\n</code></pre> <p>Sets the underling socket descriptor or handle associated to the object. The current one is simply replaced, not closed, and no other change to the object state is made. To set it as invalid use <code>_SOCKETINVALID</code>.</p> <p>Note: This is an internal method. Unlikely to be portable. Use at your own risk.</p>"},{"location":"types/TCPSocketServer/","title":"class TCPSocketServer","text":"<ul> <li>supers: TCPSocketMaster</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/TCPSocketServer/#methods","title":"methods","text":""},{"location":"types/TCPSocketServer/#tcpsocketserveraccept","title":"TCPSocketServer.accept","text":"<pre><code>function TCPSocketServer.accept()\n -&gt;  TCPSocketClient?\n -&gt;  (\"timeout\"|string)\n</code></pre> <p>Waits for a remote connection on the server object and returns a client object representing that connection.</p> <p>If a connection is successfully initiated, a client object is returned. If a timeout condition is met, the method returns <code>nil</code> followed by the error string 'timeout'. Other errors are reported by <code>nil</code> followed by a message describing the error.</p> <p>Note: calling <code>socket.select</code> with a server object in the recvt parameter before a call to accept does not guarantee accept will return immediately. Use the <code>settimeout</code> method or accept might block until another client shows up.</p>"},{"location":"types/TCPSocketServer/#tcpsocketservergetoption","title":"TCPSocketServer.getoption","text":"<pre><code>function TCPSocketServer.getoption(option: TCPOption)\n -&gt;  any?\n -&gt;  string?\n</code></pre> <p>@return  - The option value in case of success, or nil followed by an error message otherwise.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - The option value in case of success, or nil followed by an error message otherwise.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Gets options for the TCP object. See <code>setoption</code> for description of the option names and values.</p>"},{"location":"types/TCPSocketServer/#tcpsocketserversetoption","title":"TCPSocketServer.setoption","text":"<p><pre><code>function TCPSocketServer.setoption(\n  option: TCPOption,\n  value: any\n)\n -&gt;  1?\n -&gt;  string?\n</code></pre> @param <code>option</code> - A string with the option name</p> <p>@param <code>value</code> - Depends on the option being set</p> <p>@return  - 1 on success, nil and an error message otherwise.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>@return  - 1 on success, nil and an error message otherwise.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Sets options for the TCP object. Options are only needed by low-level or time-critical applications. You should only modify an option if you are sure you need it.</p>"},{"location":"types/TCPTimeoutMode/","title":"alias TCPTimeoutMode","text":"<pre><code>(alias) TCPTimeoutMode = (\"b\"|\"t\")\n    | \"b\" -- block timeout. Specifies the upper limit on the amount of time LuaSocket can be blocked by the operating system while waiting for completion of any single I/O operation.\n    | \"t\" -- total timeout. Specifies the upper limit on the amount of time LuaSocket can block a Lua script before returning from a call.\n</code></pre>"},{"location":"types/TempNode/","title":"class TempNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"temp\", nil, {\n  id = \"temp (41)\",\n  fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\" },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L480</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/TexEngine/","title":"alias TexEngine","text":"<pre><code>(alias) TexEngine = (\"etex\"|\"tex\"|\"core\"|\"luatex\")\n    | \"etex\"\n    | \"tex\"\n    | \"core\"\n    | \"luatex\"\n</code></pre>"},{"location":"types/TfmFont/","title":"class TfmFont","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/TfmFont/#fields","title":"fields","text":""},{"location":"types/TfmFont/#tfmfontname","title":"TfmFont.name","text":"<pre><code>TfmFont.name : string\n</code></pre> <p>metric (file) name</p>"},{"location":"types/TfmFont/#tfmfontarea","title":"TfmFont.area","text":"<pre><code>TfmFont.area : string\n</code></pre> <p>(directory) location, typically empty</p>"},{"location":"types/TfmFont/#tfmfontused","title":"TfmFont.used","text":"<pre><code>TfmFont.used : boolean\n</code></pre> <p>Indicates usage (initial: false). The key <code>used</code> is set by the engine when a font is actively in use. This makes sure that the font's definition is written to the output file (DVI or PDF). The tfm reader sets it to false.</p>"},{"location":"types/TfmFont/#tfmfontcharacters","title":"TfmFont.characters","text":"<pre><code>TfmFont.characters : table&lt;integer,FontCharacter&gt;\n</code></pre> <p>the defined glyphs of this font</p>"},{"location":"types/TfmFont/#tfmfontchecksum","title":"TfmFont.checksum","text":"<pre><code>TfmFont.checksum : integer\n</code></pre> <p>default: 0</p>"},{"location":"types/TfmFont/#tfmfontdesignsize","title":"TfmFont.designsize","text":"<pre><code>TfmFont.designsize : integer\n</code></pre> <p>expected size (default: 655360 == 10pt)</p>"},{"location":"types/TfmFont/#tfmfontdirection","title":"TfmFont.direction","text":"<pre><code>TfmFont.direction : FontDirection\n</code></pre> <p>default: 0</p>"},{"location":"types/TfmFont/#tfmfontparameters","title":"TfmFont.parameters","text":"<pre><code>TfmFont.parameters : FontParameters\n</code></pre> <p>default: 7 parameters, all zero</p>"},{"location":"types/TfmFont/#tfmfontsize","title":"TfmFont.size","text":"<pre><code>TfmFont.size : integer\n</code></pre> <p>the required scaling (by default the same as designsize)</p>"},{"location":"types/TfmFont/#tfmfonttounicode","title":"TfmFont.tounicode","text":"<pre><code>TfmFont.tounicode : integer\n</code></pre> <p>When this is set to 1 LuaTeX assumes per-glyph tounicode entries are present in the font.</p>"},{"location":"types/Token/","title":"class Token","text":"<p>A token object has the properties of the <code>relax</code> primitive.</p> <p>Alternatively you can use a getter <code>get_&lt;fieldname&gt;</code> to access a property of a token.</p> <p>The numbers that represent a catcode are the same as in TeX itself, so using this information assumes that you know a bit about TeX's internals. The other numbers and names are used consistently but are not frozen. So, when you use them for comparing you can best query a known primitive or character first to see the values.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L2285-L2310</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/Token/#fields","title":"fields","text":""},{"location":"types/Token/#tokencommand","title":"Token.command","text":"<pre><code>Token.command : integer\n</code></pre> <p>A number representing the internal command number (catcode in case of a character), for example: <code>1</code> (<code>left_brace</code>), <code>2</code> (<code>right_brace</code>), <code>3</code> (<code>math_shift</code>), <code>4</code> (<code>tab_mark</code>), <code>6</code> (<code>mac_param</code>), <code>7</code> (<code>sup_mark</code>), <code>8</code> (<code>sub_mark</code>), <code>10</code> (<code>spacer</code>), <code>11</code> (<code>letter</code>), <code>12</code> (<code>other</code>), <code>147</code> (<code>call</code>).</p>"},{"location":"types/Token/#tokencmdname","title":"Token.cmdname","text":"<pre><code>Token.cmdname : TokenCommandName\n</code></pre> <p>The type of the command, for example <code>letter</code>.</p>"},{"location":"types/Token/#tokencsname","title":"Token.csname","text":"<pre><code>Token.csname : string?\n</code></pre> <p>The associated control sequence (if applicable), for example <code>bigskip</code>.</p>"},{"location":"types/Token/#tokenid","title":"Token.id","text":"<pre><code>Token.id : integer\n</code></pre> <p>The unique id of the token, for example <code>6876</code>.</p>"},{"location":"types/Token/#tokentok","title":"Token.tok","text":"<pre><code>Token.tok : integer\n</code></pre> <p>The full token number as stored in TeX, for example <code>536883863</code>.</p>"},{"location":"types/Token/#tokenactive","title":"Token.active","text":"<pre><code>Token.active : boolean\n</code></pre> <p>A boolean indicating the active state of the token, for example <code>true</code>.</p>"},{"location":"types/Token/#tokenexpandable","title":"Token.expandable","text":"<pre><code>Token.expandable : boolean\n</code></pre> <p>A boolean indicating if the token (macro) is expandable, for example <code>true</code>.</p>"},{"location":"types/Token/#tokenprotected","title":"Token.protected","text":"<pre><code>Token.protected : boolean\n</code></pre> <p>A boolean indicating if the token (macro) is protected, for example <code>false</code>.</p>"},{"location":"types/Token/#tokenmode","title":"Token.mode","text":"<pre><code>Token.mode : integer\n</code></pre> <p>A number either representing a character or another entity, for example <code>1007</code>.</p>"},{"location":"types/Token/#tokenindex","title":"Token.index","text":"<pre><code>Token.index : integer?\n</code></pre> <p>A number running from 0x0000 upto 0xFFFF indicating a <code>TeX</code> register index. In case of letters the unicode code point, for example <code>398</code> = <code>\u018e</code>.</p>"},{"location":"types/TokenCommandName/","title":"alias TokenCommandName","text":"<pre><code>(alias) TokenCommandName = (\"relax\"|\"left_brace\"|\"right_brace\"|\"math_shift\"|\"tab_mark\"|\"car_ret\"|\"mac_param\"|\"sup_mark\"|\"sub_mark\"|\"endv\"...)\n    | \"relax\"\n    | \"left_brace\"\n    | \"right_brace\"\n    | \"math_shift\"\n    | \"tab_mark\"\n    | \"car_ret\"\n    | \"mac_param\"\n    | \"sup_mark\"\n    | \"sub_mark\"\n    | \"endv\"\n    | \"spacer\"\n    | \"letter\"\n    | \"other_char\"\n    | \"par_end\"\n    | \"stop\"\n    | \"delim_num\"\n    | \"char_num\"\n    | \"math_char_num\"\n    | \"mark\"\n    | \"node\"\n    | \"xray\"\n    | \"make_box\"\n    | \"hmove\"\n    | \"vmove\"\n    | \"un_hbox\"\n    | \"un_vbox\"\n    | \"remove_item\"\n    | \"hskip\"\n    | \"vskip\"\n    | \"mskip\"\n    | \"kern\"\n    | \"mkern\"\n    | \"leader_ship\"\n    | \"halign\"\n    | \"valign\"\n    | \"no_align\"\n    | \"vrule\"\n    | \"hrule\"\n    | \"novrule\"\n    | \"nohrule\"\n    | \"insert\"\n    | \"vadjust\"\n    | \"ignore_spaces\"\n    | \"after_assignment\"\n    | \"after_group\"\n    | \"partoken_name\"\n    | \"break_penalty\"\n    | \"start_par\"\n    | \"ital_corr\"\n    | \"accent\"\n    | \"math_accent\"\n    | \"discretionary\"\n    | \"eq_no\"\n    | \"left_right\"\n    | \"math_comp\"\n    | \"limit_switch\"\n    | \"above\"\n    | \"math_style\"\n    | \"math_choice\"\n    | \"non_script\"\n    | \"vcenter\"\n    | \"case_shift\"\n    | \"message\"\n    | \"normal\"\n    | \"extension\"\n    | \"option\"\n    | \"lua_function_call\"\n    | \"lua_bytecode_call\"\n    | \"lua_call\"\n    | \"in_stream\"\n    | \"begin_group\"\n    | \"end_group\"\n    | \"omit\"\n    | \"ex_space\"\n    | \"boundary\"\n    | \"radical\"\n    | \"super_sub_script\"\n    | \"no_super_sub_script\"\n    | \"math_shift_cs\"\n    | \"end_cs_name\"\n    | \"char_ghost\"\n    | \"assign_local_box\"\n    | \"char_given\"\n    | \"math_given\"\n    | \"xmath_given\"\n    | \"last_item\"\n    | \"toks_register\"\n    | \"assign_toks\"\n    | \"assign_int\"\n    | \"assign_attr\"\n    | \"assign_dimen\"\n    | \"assign_glue\"\n    | \"assign_mu_glue\"\n    | \"assign_font_dimen\"\n    | \"assign_font_int\"\n    | \"assign_hang_indent\"\n    | \"set_aux\"\n    | \"set_prev_graf\"\n    | \"set_page_dimen\"\n    | \"set_page_int\"\n    | \"set_box_dimen\"\n    | \"set_tex_shape\"\n    | \"set_etex_shape\"\n    | \"def_char_code\"\n    | \"def_del_code\"\n    | \"extdef_math_code\"\n    | \"extdef_del_code\"\n    | \"def_family\"\n    | \"set_math_param\"\n    | \"set_font\"\n    | \"def_font\"\n    | \"def_lua_call\"\n    | \"register\"\n    | \"assign_box_direction\"\n    | \"assign_box_dir\"\n    | \"assign_direction\"\n    | \"assign_dir\"\n    | \"combinetoks\"\n    | \"advance\"\n    | \"multiply\"\n    | \"divide\"\n    | \"prefix\"\n    | \"let\"\n    | \"shorthand_def\"\n    | \"read_to_cs\"\n    | \"def\"\n    | \"set_box\"\n    | \"hyph_data\"\n    | \"set_interaction\"\n    | \"letterspace_font\"\n    | \"expand_font\"\n    | \"copy_font\"\n    | \"set_font_id\"\n    | \"undefined_cs\"\n    | \"expand_after\"\n    | \"no_expand\"\n    | \"input\"\n    | \"lua_expandable_call\"\n    | \"lua_local_call\"\n    | \"if_test\"\n    | \"fi_or_else\"\n    | \"cs_name\"\n    | \"convert\"\n    | \"variable\"\n    | \"feedback\"\n    | \"the\"\n    | \"top_bot_mark\"\n    | \"call\"\n    | \"long_call\"\n    | \"outer_call\"\n    | \"long_outer_call\"\n    | \"end_template\"\n    | \"dont_expand\"\n    | \"glue_ref\"\n    | \"shape_ref\"\n    | \"box_ref\"\n    | \"data\"\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: luatoken.c#L192-L351</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/TokenlistParameter/","title":"alias TokenlistParameter","text":"<pre><code>(alias) TokenlistParameter = (\"errhelp\"|\"everycr\"|\"everydisplay\"|\"everyeof\"|\"everyhbox\"|\"everyjob\"|\"everymath\"|\"everypar\"|\"everyvbox\"|\"output\")\n    | \"errhelp\" -- Tokens that will be displayed if the user asks further help after an `\\errmessage`.\n    | \"everycr\" -- Token list inserted after every `\\cr` or non-redundant `\\crcr`.\n    | \"everydisplay\" -- Token list inserted at the start of a display.\n    | \"everyeof\" -- The content of this token list is injected when a file ends.\n    | \"everyhbox\" -- Token list inserted at the start of a horizontal box.\n    | \"everyjob\" -- Token list that is inserted at the start of each new job.\n    | \"everymath\" -- Token list inserted at the start of non-display math.\n    | \"everypar\" -- Token list inserted in front of paragraph text.\n    | \"everyvbox\" -- Token list inserted at the start of a vertical box.\n    | \"output\" -- Token list with instructions for shipping out pages.\n</code></pre> <p>The tokenlist parameters accept and return Lua strings. Lua strings are converted to and from token lists using <code>\\the\\toks</code> style expansion: all category codes are either space (10) or other (12). It follows that assigning to some of these, like <code>tex.output</code>, is actually useless, but it feels bad to make exceptions in view of a coming extension that will accept full-blown token strings.</p> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-tex.tex#L520-529</li> </ul>"},{"location":"types/UDPOption/","title":"alias UDPOption","text":"<pre><code>(alias) UDPOption = (\"dontroute\"|\"broadcast\"|\"reuseaddr\"|\"reuseport\"|\"ip-multicast-loop\"|\"ipv6-v6only\"|\"ip-multicast-if\"|\"ip-multicast-ttl\"|\"ip-add-membership\"|\"ip-drop-membership\")\n    | \"dontroute\" -- : Indicates that outgoing messages should bypass the standard routing facilities. Receives a boolean value;\n    | \"broadcast\" -- : Requests permission to send broadcast datagrams on the socket. Receives a boolean value;\n    | \"reuseaddr\" -- : Indicates that the rules used in validating addresses supplied in a bind() call should allow reuse of local addresses. Receives a boolean value;\n    | \"reuseport\" -- : Allows completely duplicate bindings by multiple processes if they all set 'reuseport' before binding the port. Receives a boolean value;\n    | \"ip-multicast-loop\" -- : Specifies whether or not a copy of an outgoing multicast datagram is delivered to the sending host as long as it is a member of the multicast group. Receives a boolean value;\n    | \"ipv6-v6only\" -- : Specifies whether to restrict inet6 sockets to sending and receiving only IPv6 packets. Receive a boolean value;\n    | \"ip-multicast-if\" -- : Sets the interface over which outgoing multicast datagrams are sent. Receives an IP address;\n    | \"ip-multicast-ttl\" -- : Sets the Time To Live in the IP header for outgoing multicast datagrams. Receives a number;\n    | \"ip-add-membership\" -- : Joins the multicast group specified. Receives a table with fields multiaddr and interface, each containing an IP address;\n    | \"ip-drop-membership\" -- : Leaves the multicast group specified. Receives a table with fields multiaddr and interface, each containing an IP address.\n</code></pre> <p>The option descriptions come from the official documentation, which come from the man pages.</p>"},{"location":"types/UDPSocketConnected/","title":"class UDPSocketConnected","text":"<ul> <li>supers: UDPSocketGeneric</li> </ul>"},{"location":"types/UDPSocketConnected/#methods","title":"methods","text":""},{"location":"types/UDPSocketConnected/#udpsocketconnectedgetpeername","title":"UDPSocketConnected.getpeername","text":"<pre><code>function UDPSocketConnected.getpeername()\n -&gt;  string?\n -&gt;  number?\n -&gt;  SocketFamily?\n</code></pre> <p>Retrieves information about the peer associated with a connected UDP object.</p> <p>Returns a string with the IP address of the peer, the port number that peer is using for the connection, and a string with the family (\"inet\" or \"inet6\"). In case of error, the method returns nil.</p> <p>Note: It makes no sense to call this method on unconnected objects.</p>"},{"location":"types/UDPSocketConnected/#udpsocketconnectedsend","title":"UDPSocketConnected.send","text":"<pre><code>function UDPSocketConnected.send(datagram: Datagram)\n -&gt;  SocketReturnResult\n -&gt;  SocketReturnError\n</code></pre> <p>Sends a datagram to the UDP peer of a connected object.</p> <p>Datagram is a string with the datagram contents. The maximum datagram size for UDP is 64K minus IP layer overhead. However datagrams larger than the link layer packet size will be fragmented, which may deteriorate performance and/or reliability.</p> <p>If successful, the method returns <code>1</code>. In case of error, the method returns <code>nil</code> followed by an <code>error message</code>.</p> <p>Note: In UDP, the send method never blocks and the only way it can fail is if the underlying transport layer refuses to send a message to the specified address (i.e. no interface accepts the address).</p>"},{"location":"types/UDPSocketGeneric/","title":"class UDPSocketGeneric","text":""},{"location":"types/UDPSocketGeneric/#methods","title":"methods","text":""},{"location":"types/UDPSocketGeneric/#udpsocketgenericclose","title":"UDPSocketGeneric.close","text":"<pre><code>function UDPSocketGeneric.close()\n</code></pre> <p>Closes a UDP object. The internal socket used by the object is closed and the local address to which the object was bound is made available to other applications. No further operations (except for further calls to the close method) are allowed on a closed socket.</p> <p>Note: It is important to close all used sockets once they are not needed, since, in many systems, each socket uses a file descriptor, which are limited system resources. Garbage-collected objects are automatically closed before destruction, though.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/UDPSocketGeneric/#udpsocketgenericgetoption","title":"UDPSocketGeneric.getoption","text":"<pre><code>function UDPSocketGeneric.getoption(option: UDPOption)\n -&gt;  any\n -&gt;  SocketReturnError\n</code></pre> <p>Gets an option value from the UDP object.</p> <p>Option is a string with the option name.</p> <p>The method returns the option value in case of success, or nil followed by an error message otherwise.</p>"},{"location":"types/UDPSocketGeneric/#udpsocketgenericgetsockname","title":"UDPSocketGeneric.getsockname","text":"<pre><code>function UDPSocketGeneric.getsockname()\n -&gt;  string?\n -&gt;  number?\n -&gt;  SocketFamily?\n</code></pre> <p>Returns the local address information associated to the object.</p> <p>The method returns a string with local IP address, a number with the local port, and a string with the family (\"inet\" or \"inet6\"). In case of error, the method returns nil.</p> <p>Note: UDP sockets are not bound to any address until the <code>setsockname</code> or the <code>sendto</code> method is called for the first time (in which case it is bound to an ephemeral port and the wild-card address).</p>"},{"location":"types/UDPSocketGeneric/#udpsocketgenericgettimeout","title":"UDPSocketGeneric.gettimeout","text":"<pre><code>function UDPSocketGeneric.gettimeout() -&gt; timeout number\n</code></pre> <p>Returns the current timeout value.</p>"},{"location":"types/UDPSocketGeneric/#udpsocketgenericreceive","title":"UDPSocketGeneric.receive","text":"<pre><code>function UDPSocketGeneric.receive(size: number?)\n -&gt; datagram Datagram?\n -&gt; err \"timeout\"?\n</code></pre> <p>@return <code>err</code> - <code>'timeout'</code> in case of timeout</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Receives a datagram from the UDP object. If the UDP object is connected, only datagrams coming from the peer are accepted. Otherwise, the returned datagram can come from any host.</p> <p>The optional size parameter specifies the maximum size of the datagram to be retrieved. If there are more than size bytes available in the datagram, the excess bytes are discarded. If there are less then size bytes available in the current datagram, the available bytes are returned. If size is omitted, the compile-time constant <code>socket._DATAGRAMSIZE</code> is used (it defaults to 8192 bytes). Larger sizes will cause a temporary buffer to be allocated for the operation.</p> <p>In case of success, the method returns the received datagram. In case of timeout, the method returns nil followed by the string <code>'timeout'</code>.</p> <p>Note: don't call this from unconnected sockets. Since you wont be able to know where it came from. Use <code>receivefrom</code> instead.</p>"},{"location":"types/UDPSocketGeneric/#udpsocketgenericsetoption","title":"UDPSocketGeneric.setoption","text":"<pre><code>function UDPSocketGeneric.setoption(\n  option: UDPOption,\n  value: any\n)\n -&gt;  SocketReturnResult\n -&gt;  SocketReturnError\n</code></pre> <p>Sets options for the UDP object. Options are only needed by low-level or time-critical applications. You should only modify an option if you are sure you need it.</p> <p>Option is a string with the option name, and value depends on the option being set</p> <p>The method returns 1 in case of success, or nil followed by an error message otherwise.</p>"},{"location":"types/UDPSocketGeneric/#udpsocketgenericsetpeername","title":"UDPSocketGeneric.setpeername","text":"<p><pre><code>function UDPSocketGeneric.setpeername(\n  address: string,\n  port: number\n)\n -&gt;  SocketReturnResult\n -&gt;  SocketReturnError\n</code></pre> @param <code>address</code> - can be a host name</p> <p>Changes the peer of a UDP object. This method turns an unconnected UDP object into a connected UDP object or vice versa.</p> <p>For connected objects, outgoing datagrams will be sent to the specified peer, and datagrams received from other peers will be discarded by the OS. Connected UDP objects must use the send and receive methods instead of sendto and receivefrom.</p> <p>Address can be an IP address or a host name. Port is the port number. If address is '*' and the object is connected, the peer association is removed and the object becomes an unconnected object again. In that case, the port argument is ignored.</p> <p>In case of error the method returns nil followed by an error message. In case of success, the method returns 1.</p> <p>Note: Since the address of the peer does not have to be passed to and from the OS, the use of connected UDP objects is recommended when the same peer is used for several transmissions and can result in up to 30% performance gains.</p> <p>Note: Starting with LuaSocket 3.0, the host name resolution depends on whether the socket was created by socket.udp or socket.udp6. Addresses from the appropriate family are tried in succession until the first success or until the last failure.</p>"},{"location":"types/UDPSocketGeneric/#udpsocketgenericsetpeername_1","title":"UDPSocketGeneric.setpeername","text":"<p><pre><code>function UDPSocketGeneric.setpeername(address: \"*\")\n -&gt;  SocketReturnResult\n -&gt;  SocketReturnError\n</code></pre> @param <code>address</code> - will turn it unconnected</p> <p>Changes the peer of a UDP object. This method turns an unconnected UDP object into a connected UDP object or vice versa.</p> <p>For connected objects, outgoing datagrams will be sent to the specified peer, and datagrams received from other peers will be discarded by the OS. Connected UDP objects must use the send and receive methods instead of sendto and receivefrom.</p> <p>Address can be an IP address or a host name. Port is the port number. If address is '*' and the object is connected, the peer association is removed and the object becomes an unconnected object again. In that case, the port argument is ignored.</p> <p>In case of error the method returns nil followed by an error message. In case of success, the method returns 1.</p> <p>Note: Since the address of the peer does not have to be passed to and from the OS, the use of connected UDP objects is recommended when the same peer is used for several transmissions and can result in up to 30% performance gains.</p> <p>Note: Starting with LuaSocket 3.0, the host name resolution depends on whether the socket was created by socket.udp or socket.udp6. Addresses from the appropriate family are tried in succession until the first success or until the last failure.</p>"},{"location":"types/UDPSocketGeneric/#udpsocketgenericsetsockname","title":"UDPSocketGeneric.setsockname","text":"<pre><code>function UDPSocketGeneric.setsockname(\n  address,\n  port\n)\n -&gt;  SocketReturnResult\n -&gt;  SocketReturnError\n</code></pre> <p>Binds the UDP object to a local address.</p> <p>Address can be an IP address or a host name. If address is '*' the system binds to all local interfaces using the constant INADDR_ANY. If port is 0, the system chooses an ephemeral port.</p> <p>If successful, the method returns 1. In case of error, the method returns nil followed by an error message.</p> <p>Note: This method can only be called before any datagram is sent through the UDP object, and only once. Otherwise, the system automatically binds the object to all local interfaces and chooses an ephemeral port as soon as the first datagram is sent. After the local address is set, either automatically by the system or explicitly by setsockname, it cannot be changed.</p>"},{"location":"types/UDPSocketGeneric/#udpsocketgenericsettimeout","title":"UDPSocketGeneric.settimeout","text":"<pre><code>function UDPSocketGeneric.settimeout(timeout: number)\n</code></pre> <p>Sets the timeout value for the socket</p> <p>Sets the time to blocks the process when calling <code>receive</code> and <code>receivefrom</code> until the timeout is reached or a packet arrives.</p>"},{"location":"types/UDPSocketUnconnected/","title":"class UDPSocketUnconnected","text":"<ul> <li>supers: UDPSocketGeneric</li> </ul>"},{"location":"types/UDPSocketUnconnected/#methods","title":"methods","text":""},{"location":"types/UDPSocketUnconnected/#udpsocketunconnectedreceivefrom","title":"UDPSocketUnconnected.receivefrom","text":"<pre><code>function UDPSocketUnconnected.receivefrom(size: number?)\n -&gt; datagram Datagram?\n -&gt; ip_or_err (string|\"timeout\")\n -&gt; port number\n</code></pre> <p>@return <code>ip_or_err</code> - IP address or <code>'timeout'</code> error string</p> <p>Works exactly as the <code>receive</code> method, except it returns the IP address and port as extra return values (and is therefore slightly less efficient)</p>"},{"location":"types/UDPSocketUnconnected/#udpsocketunconnectedsendto","title":"UDPSocketUnconnected.sendto","text":"<pre><code>function UDPSocketUnconnected.sendto(\n  datagram: Datagram,\n  ip: string,\n  port: number\n)\n -&gt;  SocketReturnResult\n -&gt;  SocketReturnError\n</code></pre> <p>Sends a datagram to the specified IP address and port number.</p> <p>Datagram is a string with the datagram contents. The maximum datagram size for UDP is 64K minus IP layer overhead. However datagrams larger than the link layer packet size will be fragmented, which may deteriorate performance and/or reliability. Ip is the IP address of the recipient. Host names are not allowed for performance reasons. Port is the port number at the recipient.</p> <p>If successful, the method returns 1. In case of error, the method returns nil followed by an error message.</p> <p>Note: In UDP, the send method never blocks and the only way it can fail is if the underlying transport layer refuses to send a message to the specified address (i.e. no interface accepts the address).</p>"},{"location":"types/UnhyphenatedNode/","title":"class UnhyphenatedNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"unhyphenated\", nil, {\n  id = \"unhyphenated (45)\",\n  fields = { \"prev (-1)\", \"next (0)\", \"id (1)\", \"subtype (2)\" },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L484</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/UnsetNode/","title":"class UnsetNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"unset\", nil, {\n  id = \"unset (15)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"width (4)\",\n    \"depth (5)\",\n    \"height (6)\",\n    \"dir (7)\",\n    \"shrink (8)\",\n    \"glue_order (9)\",\n    \"glue_sign (10)\",\n    \"stretch (11)\",\n    \"span (12)\",\n    \"head (13)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L941-L952</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/UnsetNode/#fields","title":"fields","text":""},{"location":"types/UnsetNode/#unsetnodeattr","title":"UnsetNode.attr","text":"<pre><code>UnsetNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre>"},{"location":"types/UnsetNode/#unsetnodewidth","title":"UnsetNode.width","text":"<pre><code>UnsetNode.width : integer\n</code></pre>"},{"location":"types/UnsetNode/#unsetnodedepth","title":"UnsetNode.depth","text":"<pre><code>UnsetNode.depth : integer\n</code></pre>"},{"location":"types/UnsetNode/#unsetnodeheight","title":"UnsetNode.height","text":"<pre><code>UnsetNode.height : integer\n</code></pre>"},{"location":"types/UnsetNode/#unsetnodedir","title":"UnsetNode.dir","text":"<pre><code>UnsetNode.dir : DirectionSpecifier\n</code></pre>"},{"location":"types/UnsetNode/#unsetnodeshrink","title":"UnsetNode.shrink","text":"<pre><code>UnsetNode.shrink : integer\n</code></pre>"},{"location":"types/UnsetNode/#unsetnodeglue_order","title":"UnsetNode.glue_order","text":"<pre><code>UnsetNode.glue_order : integer\n</code></pre>"},{"location":"types/UnsetNode/#unsetnodeglue_sign","title":"UnsetNode.glue_sign","text":"<pre><code>UnsetNode.glue_sign : integer\n</code></pre>"},{"location":"types/UnsetNode/#unsetnodestretch","title":"UnsetNode.stretch","text":"<pre><code>UnsetNode.stretch : integer\n</code></pre>"},{"location":"types/UnsetNode/#unsetnodespan","title":"UnsetNode.span","text":"<pre><code>UnsetNode.span : unknown\n</code></pre>"},{"location":"types/UnsetNode/#unsetnodehead","title":"UnsetNode.head","text":"<pre><code>UnsetNode.head : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre>"},{"location":"types/UserDefinedWhatsitNode/","title":"class UserDefinedWhatsitNode","text":"<ul> <li>supers: WhatsitNode</li> </ul> <p>User-defined whatsit nodes can only be created and handled from Lua code. In effect, they are an extension to the extension mechanism. The LuaTeX engine will simply step over such whatsits without ever looking at the contents.</p> <p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"user_defined\", {\n  id = \"whatsit (8)\",\n  subtype = \"user_defined (9)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"user_id (4)\",\n    \"type (5)\",\n    \"value (6)\",\n  }\n})\n</code></pre> <p>Reference:</p> <ul> <li>Source file of the <code>LuaTeX</code> manual: luatex-nodes.tex#L833-L864</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/UserDefinedWhatsitNode/#fields","title":"fields","text":""},{"location":"types/UserDefinedWhatsitNode/#userdefinedwhatsitnodeuser_id","title":"UserDefinedWhatsitNode.user_id","text":"<pre><code>UserDefinedWhatsitNode.user_id : integer\n</code></pre> <p>id number</p>"},{"location":"types/UserDefinedWhatsitNode/#userdefinedwhatsitnodetype","title":"UserDefinedWhatsitNode.type","text":"<pre><code>UserDefinedWhatsitNode.type : (97|100|108|110|115|116)\n</code></pre> <p>The <code>type</code> can have one of six distinct values. The number is the ASCII value if the first character of the type name (so you can use string.byte(\"l\") instead of <code>108</code>): 97 \u201ca\u201d list of attributes (a node list), 100 \u201cd\u201d a Lua number, 108 \u201cl\u201d a Lua value (table, number, boolean, etc), 110 \u201cn\u201d a node list, 115 \u201cs\u201d a Lua string, 116 \u201ct\u201d a Lua token list in Lua table form (a list of triplets).</p>"},{"location":"types/UserDefinedWhatsitNode/#userdefinedwhatsitnodevalue","title":"UserDefinedWhatsitNode.value","text":"<pre><code>UserDefinedWhatsitNode.value : (number|Node|string|table)\n</code></pre>"},{"location":"types/VfFont/","title":"class VfFont","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/VfFont/#fields","title":"fields","text":""},{"location":"types/VfFont/#vffontname","title":"VfFont.name","text":"<pre><code>VfFont.name : string\n</code></pre> <p>metric (file) name</p>"},{"location":"types/VfFont/#vffontcharacters","title":"VfFont.characters","text":"<pre><code>VfFont.characters : table&lt;integer,FontCharacter&gt;\n</code></pre> <p>the defined glyphs of this font</p>"},{"location":"types/VfFont/#vffontchecksum","title":"VfFont.checksum","text":"<pre><code>VfFont.checksum : integer\n</code></pre> <p>default: 0</p>"},{"location":"types/VfFont/#vffontfonts","title":"VfFont.fonts","text":"<pre><code>VfFont.fonts : table\n</code></pre> <p>locally used fonts</p>"},{"location":"types/VfFont/#vffontheader","title":"VfFont.header","text":"<pre><code>VfFont.header : string\n</code></pre> <p>header comments, if any</p>"},{"location":"types/VfFont/#vffonttype","title":"VfFont.type","text":"<pre><code>VfFont.type : string\n</code></pre> <p>basic type of this font</p>"},{"location":"types/VlistNode/","title":"class VlistNode","text":"<ul> <li>supers: ListNode</li> </ul> <p>A vlist node is like an hlist node in all respects except that it contains a vertical list.</p> <p>Example:</p> <pre><code>assert.node_type(\"vlist\", nil, {\n  id = \"vlist (1)\",\n  subtypes = {\n    \"unknown (0)\",\n    \"line (1)\",\n    \"box (2)\",\n    \"indent (3)\",\n    \"alignment (4)\",\n    \"cell (5)\",\n    \"equation (6)\",\n    \"equationnumber (7)\",\n    \"math (8)\",\n    \"mathchar (9)\",\n    \"hextensible (10)\",\n    \"vextensible (11)\",\n    \"hdelimiter (12)\",\n    \"vdelimiter (13)\",\n    \"overdelimiter (14)\",\n    \"underdelimiter (15)\",\n    \"numerator (16)\",\n    \"denominator (17)\",\n    \"limits (18)\",\n    \"fraction (19)\",\n    \"nucleus (20)\",\n    \"sup (21)\",\n    \"sub (22)\",\n    \"degree (23)\",\n    \"scripts (24)\",\n    \"over (25)\",\n    \"under (26)\",\n    \"accent (27)\",\n    \"radical (28)\",\n  },\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"width (4)\",\n    \"depth (5)\",\n    \"height (6)\",\n    \"dir (7)\",\n    \"shift (8)\",\n    \"glue_order (9)\",\n    \"glue_sign (10)\",\n    \"glue_set (11)\",\n    \"head (12)\",\n  },\n})\n</code></pre> <p>Reference:</p> <ul> <li>Donald Ervin Knuth. \u201cTeX: The Program\u201d: page 51 tex.pdf</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/VlistNode/#fields","title":"fields","text":""},{"location":"types/VlistNode/#vlistnodesubtype","title":"VlistNode.subtype","text":"<pre><code>VlistNode.subtype : VlistNodeSubtype\n</code></pre>"},{"location":"types/VlistNodeSubtype/","title":"alias VlistNodeSubtype","text":"<pre><code>(alias) VlistNodeSubtype = (0|4|5)\n    | 0 -- unknown\n    | 4 -- alignment\n    | 5 -- cell\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/VpackFilterCallback/","title":"alias VpackFilterCallback","text":"<pre><code>(alias) VpackFilterCallback = fun(head: Node, groupcode: string, size: integer, packtype: (\"additional\"|\"exactly\"), maxdepth: integer, direction: DirectionSpecifier?, attributelist: Node?) -&gt; NodeCallbackReturn\n</code></pre> <p>Alter a node list before vertical packing takes place. The second number is the desired max depth.</p> <p>This callback is called when TeX is ready to start boxing some vertical mode material. Math displays are ignored at the moment.</p> <p>This function is very similar to the <code>hpack_filter</code>. Besides the fact that it is called at different moments, there is an extra variable that matches TeX's <code>maxdepth</code> setting.</p> <p>This callback does not replace any internal code.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luanode.c#L264</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/VpackQualityCallback/","title":"alias VpackQualityCallback","text":"<pre><code>(alias) VpackQualityCallback = fun(incident: (\"overfull\"|\"underfull\"|\"loose\"|\"tight\"), detail: integer, head: Node, first: integer, last: integer)\n</code></pre> <p>This callback can be used to intercept the overfull messages that can result from packing a vertical list (as happens in the page builder).</p> <p>The incident is one of <code>overfull</code>, <code>underfull</code>, <code>loose</code> or <code>tight</code>. The detail is either the amount of overflow in case of <code>overfull</code>, or the badness otherwise. The head is the list that is constructed.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: packaging.c#L1345</li> <li>Corresponding C source code: packaging.c#L1405</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/WhatsitNode/","title":"class WhatsitNode","text":"<ul> <li>supers: Node</li> </ul> <p>Whatsit nodes come in many subtypes that you can ask for them by running <code>node.whatsits</code>.</p> <p>Some of them are generic and independent of the output mode and others are specific to the chosen backend: DVI or PDF. Here we discuss the generic font-end nodes nodes.</p> <p>Source: luatex-nodes.tex#L781-L797</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/WhatsitTypeId/","title":"alias WhatsitTypeId","text":"<pre><code>(alias) WhatsitTypeId = (0|1|2|3|4|7|8|9|16|17...)\n    | 0 -- open\n    | 1 -- write\n    | 2 -- close\n    | 3 -- special\n    | 4 -- late_special\n    | 7 -- save_pos\n    | 8 -- late_lua\n    | 9 -- user_defined\n    | 16 -- pdf_literal\n    | 17 -- pdf_late_literal\n    | 18 -- pdf_refobj\n    | 19 -- pdf_annot\n    | 20 -- pdf_start_link\n    | 21 -- pdf_end_link\n    | 22 -- pdf_dest\n    | 23 -- pdf_action\n    | 24 -- pdf_thread\n    | 25 -- pdf_start_thread\n    | 26 -- pdf_end_thread\n    | 27 -- pdf_thread_data\n    | 28 -- pdf_link_data\n    | 29 -- pdf_colorstack\n    | 30 -- pdf_setmatrix\n    | 31 -- pdf_save\n    | 32 -- pdf_restore\n    | 33 -- pdf_link_state\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L956-1006</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/WhatsitTypeName/","title":"alias WhatsitTypeName","text":"<pre><code>(alias) WhatsitTypeName = (\"open\"|\"write\"|\"close\"|\"special\"|\"late_special\"|\"save_pos\"|\"late_lua\"|\"user_defined\"|\"pdf_literal\"|\"pdf_late_literal\"...)\n    | \"open\" -- 0\n    | \"write\" -- 1\n    | \"close\" -- 2\n    | \"special\" -- 3\n    | \"late_special\" -- 4\n    | \"save_pos\" -- 7\n    | \"late_lua\" -- 8\n    | \"user_defined\" -- 9\n    | \"pdf_literal\" -- 16\n    | \"pdf_late_literal\" -- 17\n    | \"pdf_refobj\" -- 18\n    | \"pdf_annot\" -- 19\n    | \"pdf_start_link\" -- 20\n    | \"pdf_end_link\" -- 21\n    | \"pdf_dest\" -- 22\n    | \"pdf_action\" -- 23\n    | \"pdf_thread\" -- 24\n    | \"pdf_start_thread\" -- 25\n    | \"pdf_end_thread\" -- 26\n    | \"pdf_thread_data\" -- 27\n    | \"pdf_link_data\" -- 28\n    | \"pdf_colorstack\" -- 29\n    | \"pdf_setmatrix\" -- 30\n    | \"pdf_save\" -- 31\n    | \"pdf_restore\" -- 32\n    | \"pdf_link_state\" -- 33\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: texnodes.c#L956-1006</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/WrapupRunCallback/","title":"alias WrapupRunCallback","text":"<pre><code>(alias) WrapupRunCallback = fun()\n</code></pre> <p>This callback is called after the PDF and log files are closed. Use it at your own risk.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: mainbody.c#L687</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/WriteTarget/","title":"alias WriteTarget","text":"<pre><code>(alias) WriteTarget = (\"term\"|\"log\"|\"term and log\")\n    | \"term\"\n    | \"log\"\n    | \"term and log\"\n</code></pre> <p>The optional <code>target</code> can be one of three possibilities: <code>term</code>, <code>log</code> or <code>term and log</code>.</p>"},{"location":"types/WriteWhatsitNode/","title":"class WriteWhatsitNode","text":"<ul> <li>supers: Node</li> </ul> <p>Example:</p> <pre><code>assert.node_type(\"whatsit\", \"write\", {\n  id = \"whatsit (8)\",\n  subtype = \"write (1)\",\n  fields = {\n    \"prev (-1)\",\n    \"next (0)\",\n    \"id (1)\",\n    \"subtype (2)\",\n    \"attr (3)\",\n    \"stream (4)\",\n    \"data (5)\",\n  },\n})\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/WriteWhatsitNode/#fields","title":"fields","text":""},{"location":"types/WriteWhatsitNode/#writewhatsitnodeattr","title":"WriteWhatsitNode.attr","text":"<pre><code>WriteWhatsitNode.attr : Node {\n    next: Node?,\n    prev: Node?,\n    id: integer,\n    subtype: integer,\n    head: Node?,\n    attr: Node,\n}\n</code></pre> <p>A list of attributes.</p>"},{"location":"types/WriteWhatsitNode/#writewhatsitnodestream","title":"WriteWhatsitNode.stream","text":"<pre><code>WriteWhatsitNode.stream : integer\n</code></pre> <p>TeX's stream id number</p>"},{"location":"types/WriteWhatsitNode/#writewhatsitnodedata","title":"WriteWhatsitNode.data","text":"<pre><code>WriteWhatsitNode.data : table\n</code></pre> <p>a table representing the token list to be written</p>"},{"location":"types/ZFile/","title":"class ZFile","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/ZFile/#methods","title":"methods","text":""},{"location":"types/ZFile/#zfileclose","title":"ZFile.close","text":"<pre><code>function ZFile.close() -&gt; success boolean\n</code></pre> <p>Close a zfile opened by <code>zip.open</code>.</p> <p>Example:</p> <pre><code>local z_file = zip.open('../test.zip')\nassert(z_file)\nlocal success = z_file:close()\nassert(success == true, success)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: luazip.c#L121-L131</li> </ul>"},{"location":"types/ZFile/#zfilefiles","title":"ZFile.files","text":"<pre><code>function ZFile.files() -&gt;  fun() -&gt; ZInternalFileInfo\n</code></pre> <p>Return an iterator function that returns a new table containing informations about the current file.</p> <p>Example:</p> <pre><code>local z_file = zip.open('../test.zip')\nassert(z_file)\n\nfor info in z_file:files() do\n  assert(info.filename)\n  assert(info.compression_method)\n  assert(info.compressed_size)\n  assert(info.uncompressed_size)\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: luazip.c#L278-L285</li> </ul>"},{"location":"types/ZFile/#zfileopen","title":"ZFile.open","text":"<pre><code>function ZFile.open(filename: string)\n -&gt;  ZInternalFile?\n -&gt; err string?\n</code></pre> <p>Open a file that is stored inside the zip file opened by <code>zip.open</code>.</p> <p>The filename may contain the full path of the file contained inside the zip. The directory separator must be '/'. Unlike <code>f:open</code>, there is no <code>mode</code> parameter, as the only supported mode is \"read\".</p> <p>Example:</p> <pre><code>local z_file = zip.open('test.zip')\nassert(z_file)\nlocal _, err = z_file:open('xxx.xxx')\nassert(err == 'could not open file `xxx.xxx\\'')\n\nlocal z_internal_file, err = z_file:open('Hello-world.txt')\nassert(z_internal_file)\nassert(err == nil)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: luazip.c#L133-L146</li> </ul>"},{"location":"types/ZInternalFile/","title":"class ZInternalFile","text":""},{"location":"types/ZInternalFile/#methods","title":"methods","text":""},{"location":"types/ZInternalFile/#zinternalfileread","title":"ZInternalFile.read","text":"<pre><code>function ZInternalFile.read(...: (\"*a\"|\"*l\"|integer)) -&gt;  string?\n</code></pre> <p>Read a <code>file</code> according to the given formats, which specify what to read.</p> <p>For each format, the function returns a string with the characters read, or nil if it cannot read data with the specified format. When called without formats, it uses a default format that reads the entire next line (see below).</p> <p>The available formats are:</p> <ul> <li><code>*a</code>: reads the whole file, starting at the current position. On end of file, it returns the empty string.</li> <li><code>*l</code>: reads the next line (skipping the end of line), returns nil on end of file. This is the default format.</li> <li><code>number</code>: reads a string with up to that number of characters, returning nil on end of file.</li> </ul> <p>Example:</p> <pre><code>local z_file = zip.open('../test.zip')\nassert(z_file)\nlocal z_internal_file, err = z_file:open('Hello-world.txt')\nassert(z_internal_file)\nlocal content = z_internal_file:read('*a')\nassert(content == 'Hello, World!\\n', content)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: luazip.c#L407-L409</li> </ul>"},{"location":"types/ZInternalFile/#zinternalfileseek","title":"ZInternalFile.seek","text":"<pre><code>function ZInternalFile.seek(\n  whence: (\"set\"|\"cur\"|\"end\")?,\n  offset: integer?\n)\n -&gt; offset integer?\n -&gt; err string?\n -&gt; errno integer?\n</code></pre> <p>Sets and gets the file position.</p> <p>Unlike the standard I/O read, the format <code>\"*n\"</code> is not supported.</p> <p>Sets and gets the file position, measured from the beginning of the file, to the position given by <code>offset</code> plus a base specified by the string <code>whence</code>, as follows:</p> <ul> <li><code>set</code>: base is position 0 (beginning of the file);</li> <li><code>cur</code>: base is current position;</li> <li><code>end</code>: base is end of file;</li> </ul> <p>In case of success, function <code>seek</code> returns the final file position, measured in bytes from the beginning of the file. If this function fails, it returns nil, plus an error string. The default value for <code>whence</code> is <code>\"cur\"</code>, and for <code>offset</code> is 0. Therefore, the call <code>zfile:seek()</code> returns the current file position, without changing it; the call <code>zfile:seek(\"set\")</code> sets the position to the beginning of the file (and returns 0); and the call <code>zfile:seek(\"end\")</code> sets the position to the end of the file, and returns its size.</p> <p>Example:</p> <pre><code>local z_file = zip.open('../test.zip')\nassert(z_file)\nlocal z_internal_file, err = z_file:open('Hello-world.txt')\nassert(z_internal_file)\n\nlocal size = z_internal_file:seek('end')\nassert(size == 14, size)\n\nlocal offset = z_internal_file:seek('set', 7)\nassert(offset == 7)\n\nlocal cur = z_internal_file:seek('cur')\nassert(cur == 7)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: luazip.c#L429-L447</li> </ul>"},{"location":"types/ZInternalFile/#zinternalfileclose","title":"ZInternalFile.close","text":"<pre><code>function ZInternalFile.close()\n -&gt; success true?\n -&gt; err string?\n -&gt; errno integer?\n</code></pre> <p>Close a file opened by <code>zfile:open()</code>.</p> <p>Example:</p> <pre><code>local z_file = zip.open('../test.zip')\nassert(z_file)\nlocal z_internal_file, err = z_file:open('Hello-world.txt')\nassert(z_internal_file)\nlocal success = z_internal_file:close()\nassert(success == true)\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: luazip.c#L295-L297</li> </ul> <p>@see ZFile.open</p>"},{"location":"types/ZInternalFile/#zinternalfilelines","title":"ZInternalFile.lines","text":"<pre><code>function ZInternalFile.lines() -&gt;  fun() -&gt; string\n</code></pre> <p>Return an iterator function that returns a new line from the file each time it is called.</p> <p>Therefore, the construction</p> <pre><code>for line in file:lines() do ... end\n</code></pre> <p>will iterate over all lines of the file.</p> <p>Example:</p> <pre><code>local z_file = zip.open('../test.zip')\nassert(z_file)\nlocal z_internal_file, err = z_file:open('Hello-world.txt')\nassert(z_internal_file)\nfor line in z_internal_file:lines() do\n  assert(line == 'Hello, World!')\nend\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: luazip.c#L423-L427</li> </ul>"},{"location":"types/ZInternalFileInfo/","title":"class ZInternalFileInfo","text":""},{"location":"types/ZInternalFileInfo/#fields","title":"fields","text":""},{"location":"types/ZInternalFileInfo/#zinternalfileinfofilename","title":"ZInternalFileInfo.filename","text":"<pre><code>ZInternalFileInfo.filename : string\n</code></pre> <p>The full path of a file, for example <code>folder/Test.txt</code>.</p>"},{"location":"types/ZInternalFileInfo/#zinternalfileinfocompression_method","title":"ZInternalFileInfo.compression_method","text":"<pre><code>ZInternalFileInfo.compression_method : integer\n</code></pre> <p>for example <code>8</code>.</p>"},{"location":"types/ZInternalFileInfo/#zinternalfileinfocompressed_size","title":"ZInternalFileInfo.compressed_size","text":"<pre><code>ZInternalFileInfo.compressed_size : integer\n</code></pre> <p>The compressed size of the file in bytes, for example <code>28673</code>.</p>"},{"location":"types/ZInternalFileInfo/#zinternalfileinfouncompressed_size","title":"ZInternalFileInfo.uncompressed_size","text":"<pre><code>ZInternalFileInfo.uncompressed_size : integer\n</code></pre> <p>The uncompressed size of the file in bytes, for example <code>434654</code>.</p>"},{"location":"types/ZStream/","title":"class ZStream","text":"<p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/ZStream/#methods","title":"methods","text":""},{"location":"types/ZStream/#zstreamadlerreset","title":"ZStream.adlerreset","text":"<pre><code>function ZStream.adlerreset()\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lzlib.c#L307-L322</li> </ul>"},{"location":"types/ZStream/#zstreamcompress","title":"ZStream.compress","text":"<pre><code>function ZStream.compress(buffer: string) -&gt; buffer string\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lzlib.c#L231-L263</li> </ul>"},{"location":"types/ZStream/#zstreamdecompress","title":"ZStream.decompress","text":"<pre><code>function ZStream.decompress(buffer: string) -&gt; buffer string\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lzlib.c#L195-L227</li> </ul>"},{"location":"types/ZStream/#zstreamflush","title":"ZStream.flush","text":"<pre><code>function ZStream.flush()\n</code></pre> <p>Flush the output for deflate streams.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lzlib.c#L267-L303</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/ZStream/#zstreamclose","title":"ZStream.close","text":"<pre><code>function ZStream.close()\n</code></pre> <p>Close the stream.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: lzlib.c#L138-L143</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/ZStream/#zstreamadler","title":"ZStream.adler","text":"<pre><code>function ZStream.adler() -&gt; adler number\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: lzlib.c#L147-L152</li> </ul>"},{"location":"types/luatex.img.Image/","title":"class Image","text":"<ul> <li>namespace: luatex.img</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/luatex.img.Image/#fields","title":"fields","text":""},{"location":"types/luatex.img.Image/#imageattr","title":"Image.attr","text":"<pre><code>Image.attr : string\n</code></pre> <p>the image attributes for LuaTeX</p>"},{"location":"types/luatex.img.Image/#imagebbox","title":"Image.bbox","text":"<pre><code>Image.bbox : table\n</code></pre> <p>table with 4 boundingbox dimensions <code>llx</code>, <code>lly</code>, <code>urx</code> and <code>ury</code> overruling the <code>pagebox</code> entry</p>"},{"location":"types/luatex.img.Image/#imagecolordepth","title":"Image.colordepth","text":"<pre><code>Image.colordepth : number\n</code></pre> <p>the number of bits used by the color space</p>"},{"location":"types/luatex.img.Image/#imagecolorspace","title":"Image.colorspace","text":"<pre><code>Image.colorspace : number\n</code></pre> <p>the color space object number</p>"},{"location":"types/luatex.img.Image/#imagedepth","title":"Image.depth","text":"<pre><code>Image.depth : number\n</code></pre> <p>the image depth for LuaTeX</p>"},{"location":"types/luatex.img.Image/#imagefilename","title":"Image.filename","text":"<pre><code>Image.filename : string\n</code></pre> <p>the image file name</p>"},{"location":"types/luatex.img.Image/#imagefilepath","title":"Image.filepath","text":"<pre><code>Image.filepath : string\n</code></pre> <p>the full (expanded) file name of the image</p>"},{"location":"types/luatex.img.Image/#imageheight","title":"Image.height","text":"<pre><code>Image.height : number\n</code></pre> <p>the image height for LuaTeX</p>"},{"location":"types/luatex.img.Image/#imageimagetype","title":"Image.imagetype","text":"<pre><code>Image.imagetype : string\n</code></pre> <p>one of <code>pdf</code>, <code>png</code>, <code>jpg</code>, <code>jp2</code> or <code>jbig2</code></p>"},{"location":"types/luatex.img.Image/#imageindex","title":"Image.index","text":"<pre><code>Image.index : number\n</code></pre> <p>the PDF image name suffix</p>"},{"location":"types/luatex.img.Image/#imageobjnum","title":"Image.objnum","text":"<pre><code>Image.objnum : number\n</code></pre> <p>the PDF image object number</p>"},{"location":"types/luatex.img.Image/#imagepage","title":"Image.page","text":"<pre><code>Image.page : number\n</code></pre> <p>the identifier for the requested image page</p>"},{"location":"types/luatex.img.Image/#imagepagebox","title":"Image.pagebox","text":"<pre><code>Image.pagebox : string\n</code></pre> <p>the requested bounding box, one of <code>none</code>, <code>media</code>, <code>crop</code>, <code>bleed</code>, <code>trim</code>, <code>art</code></p>"},{"location":"types/luatex.img.Image/#imagepages","title":"Image.pages","text":"<pre><code>Image.pages : number\n</code></pre> <p>the total number of available pages</p>"},{"location":"types/luatex.img.Image/#imagerotation","title":"Image.rotation","text":"<pre><code>Image.rotation : number\n</code></pre> <p>the image rotation from included PDF file, in multiples of 90 deg.</p>"},{"location":"types/luatex.img.Image/#imagestream","title":"Image.stream","text":"<pre><code>Image.stream : string\n</code></pre> <p>the raw stream data for an <code>/Xobject</code> <code>/Form</code> object</p>"},{"location":"types/luatex.img.Image/#imagetransform","title":"Image.transform","text":"<pre><code>Image.transform : number\n</code></pre> <p>the image transform, integer number 0..7</p>"},{"location":"types/luatex.img.Image/#imageorientation","title":"Image.orientation","text":"<pre><code>Image.orientation : number\n</code></pre> <p>the (jpeg) image orientation, integer number 1..8 (0 for unset)</p>"},{"location":"types/luatex.img.Image/#imagewidth","title":"Image.width","text":"<pre><code>Image.width : number\n</code></pre> <p>the image width for LuaTeX</p>"},{"location":"types/luatex.img.Image/#imagexres","title":"Image.xres","text":"<pre><code>Image.xres : number\n</code></pre> <p>the horizontal natural image resolution (in \\DPI)</p>"},{"location":"types/luatex.img.Image/#imagexsize","title":"Image.xsize","text":"<pre><code>Image.xsize : number\n</code></pre> <p>the natural image width</p>"},{"location":"types/luatex.img.Image/#imageyres","title":"Image.yres","text":"<pre><code>Image.yres : number\n</code></pre> <p>the vertical natural image resolution (in \\DPI)</p>"},{"location":"types/luatex.img.Image/#imageysize","title":"Image.ysize","text":"<pre><code>Image.ysize : number\n</code></pre> <p>the natural image height</p>"},{"location":"types/luatex.img.Image/#imagevisiblefilename","title":"Image.visiblefilename","text":"<pre><code>Image.visiblefilename : string\n</code></pre> <p>when set, this name will find its way in the PDF file as <code>PTEX</code> specification; when an empty string is assigned nothing is written to file; otherwise the natural filename is taken</p>"},{"location":"types/luatex.img.Image/#imageuserpassword","title":"Image.userpassword","text":"<pre><code>Image.userpassword : string\n</code></pre> <p>the userpassword needed for opening a PDF file</p>"},{"location":"types/luatex.img.Image/#imageownerpassword","title":"Image.ownerpassword","text":"<pre><code>Image.ownerpassword : string\n</code></pre> <p>the ownerpassword needed for opening a PDF file</p>"},{"location":"types/luatex.img.Image/#imagekeepopen","title":"Image.keepopen","text":"<pre><code>Image.keepopen : boolean\n</code></pre> <p>keep the PDF file open</p>"},{"location":"types/luatex.img.Image/#imagenobbox","title":"Image.nobbox","text":"<pre><code>Image.nobbox : boolean\n</code></pre> <p>don't add a boundingbox specification for streams</p>"},{"location":"types/luatex.img.Image/#imagenolength","title":"Image.nolength","text":"<pre><code>Image.nolength : boolean\n</code></pre> <p>don't add length key nor compress for streams</p>"},{"location":"types/luatex.img.Image/#imagenosize","title":"Image.nosize","text":"<pre><code>Image.nosize : boolean\n</code></pre> <p>don't add size fields for streams</p>"},{"location":"types/luatex.img.ImageSpec/","title":"class ImageSpec","text":"<ul> <li>namespace: luatex.img</li> </ul> <p>Must be a table, and that table must contain a <code>filename</code> key.</p> <p>Reference:</p> <ul> <li>Corresponding C source code: luatex-api.h#L506-L532</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/luatex.img.ImageSpec/#fields","title":"fields","text":""},{"location":"types/luatex.img.ImageSpec/#imagespecattr","title":"ImageSpec.attr","text":"<pre><code>ImageSpec.attr : string?\n</code></pre> <p>the image attributes for LuaTeX</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecbbox","title":"ImageSpec.bbox","text":"<pre><code>ImageSpec.bbox : table?\n</code></pre> <p>table with 4 boundingbox dimensions <code>llx</code>, <code>lly</code>, <code>urx</code> and <code>ury</code> overruling the <code>pagebox</code> entry</p>"},{"location":"types/luatex.img.ImageSpec/#imagespeccolordepth","title":"ImageSpec.colordepth","text":"<pre><code>ImageSpec.colordepth : number?\n</code></pre> <p>the number of bits used by the color space</p>"},{"location":"types/luatex.img.ImageSpec/#imagespeccolorspace","title":"ImageSpec.colorspace","text":"<pre><code>ImageSpec.colorspace : number?\n</code></pre> <p>the color space object number</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecdepth","title":"ImageSpec.depth","text":"<pre><code>ImageSpec.depth : number?\n</code></pre> <p>the image depth for LuaTeX</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecfilename","title":"ImageSpec.filename","text":"<pre><code>ImageSpec.filename : string\n</code></pre> <p>the image file name</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecfilepath","title":"ImageSpec.filepath","text":"<pre><code>ImageSpec.filepath : string?\n</code></pre> <p>the full (expanded) file name of the image</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecheight","title":"ImageSpec.height","text":"<pre><code>ImageSpec.height : number?\n</code></pre> <p>the image height for LuaTeX</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecimagetype","title":"ImageSpec.imagetype","text":"<pre><code>ImageSpec.imagetype : string?\n</code></pre> <p>one of <code>pdf</code>, <code>png</code>, <code>jpg</code>, <code>jp2</code> or <code>jbig2</code></p>"},{"location":"types/luatex.img.ImageSpec/#imagespecindex","title":"ImageSpec.index","text":"<pre><code>ImageSpec.index : number?\n</code></pre> <p>the PDF image name suffix</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecobjnum","title":"ImageSpec.objnum","text":"<pre><code>ImageSpec.objnum : number?\n</code></pre> <p>the PDF image object number</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecpage","title":"ImageSpec.page","text":"<pre><code>ImageSpec.page : number?\n</code></pre> <p>the identifier for the requested image page</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecpagebox","title":"ImageSpec.pagebox","text":"<pre><code>ImageSpec.pagebox : string?\n</code></pre> <p>the requested bounding box, one of <code>none</code>, <code>media</code>, <code>crop</code>, <code>bleed</code>, <code>trim</code>, <code>art</code></p>"},{"location":"types/luatex.img.ImageSpec/#imagespecpages","title":"ImageSpec.pages","text":"<pre><code>ImageSpec.pages : number?\n</code></pre> <p>the total number of available pages</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecrotation","title":"ImageSpec.rotation","text":"<pre><code>ImageSpec.rotation : number?\n</code></pre> <p>the image rotation from included PDF file, in multiples of 90 deg.</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecstream","title":"ImageSpec.stream","text":"<pre><code>ImageSpec.stream : string?\n</code></pre> <p>the raw stream data for an <code>/Xobject</code> <code>/Form</code> object</p>"},{"location":"types/luatex.img.ImageSpec/#imagespectransform","title":"ImageSpec.transform","text":"<pre><code>ImageSpec.transform : number?\n</code></pre> <p>the image transform, integer number 0..7</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecorientation","title":"ImageSpec.orientation","text":"<pre><code>ImageSpec.orientation : number?\n</code></pre> <p>the (jpeg) image orientation, integer number 1..8 (0 for unset)</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecwidth","title":"ImageSpec.width","text":"<pre><code>ImageSpec.width : number?\n</code></pre> <p>the image width for LuaTeX</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecxres","title":"ImageSpec.xres","text":"<pre><code>ImageSpec.xres : number?\n</code></pre> <p>the horizontal natural image resolution (in \\DPI)</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecxsize","title":"ImageSpec.xsize","text":"<pre><code>ImageSpec.xsize : number?\n</code></pre> <p>the natural image width</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecyres","title":"ImageSpec.yres","text":"<pre><code>ImageSpec.yres : number?\n</code></pre> <p>the vertical natural image resolution (in \\DPI)</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecysize","title":"ImageSpec.ysize","text":"<pre><code>ImageSpec.ysize : number?\n</code></pre> <p>the natural image height</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecvisiblefilename","title":"ImageSpec.visiblefilename","text":"<pre><code>ImageSpec.visiblefilename : string?\n</code></pre> <p>when set, this name will find its way in the PDF file as <code>PTEX</code> specification; when an empty string is assigned nothing is written to file; otherwise the natural filename is taken</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecuserpassword","title":"ImageSpec.userpassword","text":"<pre><code>ImageSpec.userpassword : string?\n</code></pre> <p>the userpassword needed for opening a PDF file</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecownerpassword","title":"ImageSpec.ownerpassword","text":"<pre><code>ImageSpec.ownerpassword : string?\n</code></pre> <p>the ownerpassword needed for opening a PDF file</p>"},{"location":"types/luatex.img.ImageSpec/#imagespeckeepopen","title":"ImageSpec.keepopen","text":"<pre><code>ImageSpec.keepopen : boolean?\n</code></pre> <p>keep the PDF file open</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecnobbox","title":"ImageSpec.nobbox","text":"<pre><code>ImageSpec.nobbox : boolean?\n</code></pre> <p>don't add a boundingbox specification for streams</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecnolength","title":"ImageSpec.nolength","text":"<pre><code>ImageSpec.nolength : boolean?\n</code></pre> <p>don't add length key nor compress for streams</p>"},{"location":"types/luatex.img.ImageSpec/#imagespecnosize","title":"ImageSpec.nosize","text":"<pre><code>ImageSpec.nosize : boolean?\n</code></pre> <p>don't add size fields for streams</p>"},{"location":"types/luatex.img.ImgBox/","title":"alias ImgBox","text":"<ul> <li>namespace: luatex.img</li> </ul> <pre><code>(alias) ImgBox = unknown\n</code></pre> <p>Reference:</p> <ul> <li>Corresponding C source code: luatex-api.h#L534-L540</li> </ul> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/luatex.img.ImgType/","title":"alias ImgType","text":"<ul> <li>namespace: luatex.img</li> </ul> <pre><code>(alias) ImgType = unknown\n</code></pre> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/os.Times/","title":"class Times","text":"<ul> <li>namespace: os</li> </ul>"},{"location":"types/os.Times/#fields","title":"fields","text":""},{"location":"types/os.Times/#timescstime","title":"Times.cstime","text":"<pre><code>Times.cstime : number\n</code></pre> <p>System time of children</p>"},{"location":"types/os.Times/#timescutime","title":"Times.cutime","text":"<pre><code>Times.cutime : number\n</code></pre> <p>Zser time of children</p>"},{"location":"types/os.Times/#timesstime","title":"Times.stime","text":"<pre><code>Times.stime : number\n</code></pre> <p>System time</p>"},{"location":"types/os.Times/#timesutime","title":"Times.utime","text":"<pre><code>Times.utime : number\n</code></pre> <p>User time</p>"},{"location":"types/os.Uname/","title":"class Uname","text":"<ul> <li>namespace: os</li> </ul>"},{"location":"types/os.Uname/#fields","title":"fields","text":""},{"location":"types/os.Uname/#unamesysname","title":"Uname.sysname","text":"<pre><code>Uname.sysname : string\n</code></pre> <p>for example <code>x86_64</code></p>"},{"location":"types/os.Uname/#unamemachine","title":"Uname.machine","text":"<pre><code>Uname.machine : string\n</code></pre> <p>for example <code>zotac</code></p>"},{"location":"types/os.Uname/#unamerelease","title":"Uname.release","text":"<pre><code>Uname.release : string\n</code></pre> <p>for example <code>5.15.0-57-generic</code></p>"},{"location":"types/os.Uname/#unameversion","title":"Uname.version","text":"<pre><code>Uname.version : string\n</code></pre> <p>for example <code>#63-Ubuntu SMP Thu Nov 24 13:43:17 UTC 2022</code></p>"},{"location":"types/os.Uname/#unamenodename","title":"Uname.nodename","text":"<pre><code>Uname.nodename : string\n</code></pre> <p>for example <code>mypc</code></p>"},{"location":"types/ot/","title":"class ot","text":"<p>Predefined Name IDs. Predefined OpenType 'name' table name identifier.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p>"},{"location":"types/ot/#fields","title":"fields","text":""},{"location":"types/ot/#otname_id_copyright","title":"ot.NAME_ID_COPYRIGHT","text":"<pre><code>ot.NAME_ID_COPYRIGHT : string\n</code></pre> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L4</p> <p>Copyright notice. Wraps <code>HB_OT_NAME_ID_COPYRIGHT</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L5</p>"},{"location":"types/ot/#otname_id_font_family","title":"ot.NAME_ID_FONT_FAMILY","text":"<pre><code>ot.NAME_ID_FONT_FAMILY : string\n</code></pre> <p>Font Family name. Wraps <code>HB_OT_NAME_ID_FONT_FAMILY</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L6</p>"},{"location":"types/ot/#otname_id_font_subfamily","title":"ot.NAME_ID_FONT_SUBFAMILY","text":"<pre><code>ot.NAME_ID_FONT_SUBFAMILY : string\n</code></pre> <p>Font Subfamily name. Wraps <code>HB_OT_NAME_ID_FONT_SUBFAMILY</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L7</p>"},{"location":"types/ot/#otname_id_unique_id","title":"ot.NAME_ID_UNIQUE_ID","text":"<pre><code>ot.NAME_ID_UNIQUE_ID : string\n</code></pre> <p>Unique font identifier. Wraps <code>HB_OT_NAME_ID_UNIQUE_ID</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L8</p>"},{"location":"types/ot/#otname_id_full_name","title":"ot.NAME_ID_FULL_NAME","text":"<pre><code>ot.NAME_ID_FULL_NAME : string\n</code></pre> <p>Full font name that reflects all family and relevant subfamily descriptors. Wraps <code>HB_OT_NAME_ID_FULL_NAME</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L9</p>"},{"location":"types/ot/#otname_id_version_string","title":"ot.NAME_ID_VERSION_STRING","text":"<pre><code>ot.NAME_ID_VERSION_STRING : string\n</code></pre> <p>Version string. Wraps <code>HB_OT_NAME_ID_VERSION_STRING</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L10</p>"},{"location":"types/ot/#otname_id_postscript_name","title":"ot.NAME_ID_POSTSCRIPT_NAME","text":"<pre><code>ot.NAME_ID_POSTSCRIPT_NAME : string\n</code></pre> <p>PostScript name for the font. Wraps <code>HB_OT_NAME_ID_POSTSCRIPT_NAME</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L11</p>"},{"location":"types/ot/#otname_id_trademark","title":"ot.NAME_ID_TRADEMARK","text":"<pre><code>ot.NAME_ID_TRADEMARK : string\n</code></pre> <p>Trademark. Wraps <code>HB_OT_NAME_ID_TRADEMARK</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L12</p>"},{"location":"types/ot/#otname_id_manufacturer","title":"ot.NAME_ID_MANUFACTURER","text":"<pre><code>ot.NAME_ID_MANUFACTURER : string\n</code></pre> <p>Manufacturer Name. Wraps <code>HB_OT_NAME_ID_MANUFACTURER</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L13</p>"},{"location":"types/ot/#otname_id_designer","title":"ot.NAME_ID_DESIGNER","text":"<pre><code>ot.NAME_ID_DESIGNER : string\n</code></pre> <p>Designer. Wraps <code>HB_OT_NAME_ID_DESIGNER</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L14</p>"},{"location":"types/ot/#otname_id_description","title":"ot.NAME_ID_DESCRIPTION","text":"<pre><code>ot.NAME_ID_DESCRIPTION : string\n</code></pre> <p>Description. Wraps <code>HB_OT_NAME_ID_DESCRIPTION</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L15</p>"},{"location":"types/ot/#otname_id_vendor_url","title":"ot.NAME_ID_VENDOR_URL","text":"<pre><code>ot.NAME_ID_VENDOR_URL : string\n</code></pre> <p>URL of font vendor. Wraps <code>HB_OT_NAME_ID_VENDOR_URL</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L16</p>"},{"location":"types/ot/#otname_id_designer_url","title":"ot.NAME_ID_DESIGNER_URL","text":"<pre><code>ot.NAME_ID_DESIGNER_URL : string\n</code></pre> <p>URL of typeface designer. Wraps <code>HB_OT_NAME_ID_DESIGNER_URL</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L17</p>"},{"location":"types/ot/#otname_id_license","title":"ot.NAME_ID_LICENSE","text":"<pre><code>ot.NAME_ID_LICENSE : string\n</code></pre> <p>License Description. Wraps <code>HB_OT_NAME_ID_LICENSE</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L18</p>"},{"location":"types/ot/#otname_id_license_url","title":"ot.NAME_ID_LICENSE_URL","text":"<pre><code>ot.NAME_ID_LICENSE_URL : string\n</code></pre> <p>URL where additional licensing information can be found. Wraps <code>HB_OT_NAME_ID_LICENSE_URL</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L19</p>"},{"location":"types/ot/#otname_id_typographic_family","title":"ot.NAME_ID_TYPOGRAPHIC_FAMILY","text":"<pre><code>ot.NAME_ID_TYPOGRAPHIC_FAMILY : string\n</code></pre> <p>Typographic Family name. Wraps <code>HB_OT_NAME_ID_TYPOGRAPHIC_FAMILY</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L20</p>"},{"location":"types/ot/#otname_id_typographic_subfamily","title":"ot.NAME_ID_TYPOGRAPHIC_SUBFAMILY","text":"<pre><code>ot.NAME_ID_TYPOGRAPHIC_SUBFAMILY : string\n</code></pre> <p>Typographic Subfamily name. Wraps <code>HB_OT_NAME_ID_TYPOGRAPHIC_SUBFAMILY</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L21</p>"},{"location":"types/ot/#otname_id_mac_full_name","title":"ot.NAME_ID_MAC_FULL_NAME","text":"<pre><code>ot.NAME_ID_MAC_FULL_NAME : string\n</code></pre> <p>Compatible Full Name for MacOS. Wraps <code>HB_OT_NAME_ID_MAC_FULL_NAME</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L22</p>"},{"location":"types/ot/#otname_id_sample_text","title":"ot.NAME_ID_SAMPLE_TEXT","text":"<pre><code>ot.NAME_ID_SAMPLE_TEXT : string\n</code></pre> <p>Sample text. Wraps <code>HB_OT_NAME_ID_SAMPLE_TEXT</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L23</p>"},{"location":"types/ot/#otname_id_cid_findfont_name","title":"ot.NAME_ID_CID_FINDFONT_NAME","text":"<pre><code>ot.NAME_ID_CID_FINDFONT_NAME : string\n</code></pre> <p>PostScript CID findfont name. Wraps <code>HB_OT_NAME_ID_CID_FINDFONT_NAME</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L24</p>"},{"location":"types/ot/#otname_id_wws_family","title":"ot.NAME_ID_WWS_FAMILY","text":"<pre><code>ot.NAME_ID_WWS_FAMILY : string\n</code></pre> <p>WWS Family Name. Wraps <code>HB_OT_NAME_ID_WWS_FAMILY</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L25</p>"},{"location":"types/ot/#otname_id_wws_subfamily","title":"ot.NAME_ID_WWS_SUBFAMILY","text":"<pre><code>ot.NAME_ID_WWS_SUBFAMILY : string\n</code></pre> <p>WWS Subfamily Name. Wraps <code>HB_OT_NAME_ID_WWS_SUBFAMILY</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L26</p>"},{"location":"types/ot/#otname_id_light_background","title":"ot.NAME_ID_LIGHT_BACKGROUND","text":"<pre><code>ot.NAME_ID_LIGHT_BACKGROUND : string\n</code></pre> <p>Light Background Palette. Wraps <code>HB_OT_NAME_ID_LIGHT_BACKGROUND</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L27</p>"},{"location":"types/ot/#otname_id_dark_background","title":"ot.NAME_ID_DARK_BACKGROUND","text":"<pre><code>ot.NAME_ID_DARK_BACKGROUND : string\n</code></pre> <p>Dark Background Palette. Wraps <code>HB_OT_NAME_ID_DARK_BACKGROUND</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L28</p>"},{"location":"types/ot/#otname_id_variations_ps_prefix","title":"ot.NAME_ID_VARIATIONS_PS_PREFIX","text":"<pre><code>ot.NAME_ID_VARIATIONS_PS_PREFIX : string\n</code></pre> <p>Variations PostScript Name Prefix. Wraps <code>HB_OT_NAME_ID_VARIATIONS_PS_PREFIX</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L29</p>"},{"location":"types/ot/#otname_id_invalid","title":"ot.NAME_ID_INVALID","text":"<pre><code>ot.NAME_ID_INVALID : string\n</code></pre> <p>Value to represent a nonexistent name ID. Wraps <code>HB_OT_NAME_ID_INVALID</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L30</p>"},{"location":"types/ot/#otlayout_no_script_index","title":"ot.LAYOUT_NO_SCRIPT_INDEX","text":"<pre><code>ot.LAYOUT_NO_SCRIPT_INDEX : string\n</code></pre> <p>Special value for script index indicating unsupported script. Wraps <code>HB_OT_LAYOUT_NO_SCRIPT_INDEX</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L31</p>"},{"location":"types/ot/#otlayout_no_feature_index","title":"ot.LAYOUT_NO_FEATURE_INDEX","text":"<pre><code>ot.LAYOUT_NO_FEATURE_INDEX : string\n</code></pre> <p>Special value for variations index indicating unsupported variation. Wraps <code>HB_OT_LAYOUT_NO_FEATURE_INDEX</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L32</p>"},{"location":"types/ot/#otlayout_default_language_index","title":"ot.LAYOUT_DEFAULT_LANGUAGE_INDEX","text":"<pre><code>ot.LAYOUT_DEFAULT_LANGUAGE_INDEX : string\n</code></pre> <p>Special value for language index indicating default or unsupported language. Wraps <code>HB_OT_LAYOUT_DEFAULT_LANGUAGE_INDEX</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L33</p>"},{"location":"types/ot/#otlayout_no_variations_index","title":"ot.LAYOUT_NO_VARIATIONS_INDEX","text":"<pre><code>ot.LAYOUT_NO_VARIATIONS_INDEX : string\n</code></pre> <p>Special value for variations index indicating unsupported variation. Wraps <code>HB_OT_LAYOUT_NO_VARIATIONS_INDEX</code>.</p> <p>https://gitlab.lisn.upsaclay.fr/texlive/luatex/-/blob/f52b099f3e01d53dc03b315e1909245c3d5418d3/source/texk/web2c/luatexdir/luaharfbuzz/src/luaharfbuzz/ot.c#L34</p>"},{"location":"types/unicode/","title":"class unicode","text":"<p>Unicode functions.</p>"},{"location":"types/unicode/#methods","title":"methods","text":""},{"location":"types/unicode/#unicodescript","title":"unicode.script","text":"<p><pre><code>function unicode.script(char: integer) -&gt;  HbScript {\n    COMMON = string,\n    INHERITED = string,\n    UNKNOWN = string,\n    INVALID = string,\n    new = function,\n    from_iso15924_tag = function,\n    to_iso15924_tag = function,\n    __to_string = function,\n    __eq = function,\n}\n</code></pre> @param <code>char</code> - Unicode codepoint</p> <p>@return  - a <code>Script</code> object.</p> <p>\ud83d\ude31 Types incomplete or incorrect? \ud83d\ude4f Please contribute!</p> <p>Retrieve the <code>Script</code> object to which code point <code>unicode</code> belongs.</p> <p>Wraps <code>hb_unicode_script</code></p> <p>Reference:</p> <ul> <li>Corresponding C source code: unicode.c#L3-L12</li> <li>HarfBuzz online documentation: hb_unicode_script</li> </ul>"}]}